{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/system/user.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/system/user.vue","mtime":1666151205543},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getList, getUser, getUserPlatform, remove, update, updatePlatform, add, grant, resetPassword, unlock } from \"@/api/system/user\";\nimport { exportBlob } from \"@/api/common\";\nimport { getDeptTree, getDeptLazyTree } from \"@/api/system/dept\";\nimport { getRoleTree } from \"@/api/system/role\";\nimport { getPostList } from \"@/api/system/post\";\nimport { mapGetters } from \"vuex\";\nimport website from '@/config/website';\nimport { getToken } from '@/util/auth';\nimport { downloadXls } from \"@/util/util\";\nimport { dateNow } from \"@/util/date\";\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\nimport func from \"@/util/func\";\nexport default {\n  data: function data() {\n    var _this = this;\n\n    var validatePass = function validatePass(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        callback();\n      }\n    };\n\n    var validatePass2 = function validatePass2(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== _this.form.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      form: {},\n      search: {},\n      roleBox: false,\n      excelBox: false,\n      platformBox: false,\n      initFlag: true,\n      selectionList: [],\n      query: {},\n      loading: true,\n      platformLoading: false,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      platformPage: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      init: {\n        roleTree: [],\n        deptTree: []\n      },\n      props: {\n        label: \"title\",\n        value: \"key\"\n      },\n      roleGrantList: [],\n      roleTreeObj: [],\n      treeDeptId: '',\n      treeData: [],\n      treeOption: {\n        nodeKey: 'id',\n        lazy: true,\n        treeLoad: function treeLoad(node, resolve) {\n          var parentId = node.level === 0 ? 0 : node.data.id;\n          getDeptLazyTree(parentId).then(function (res) {\n            resolve(res.data.data.map(function (item) {\n              return _objectSpread(_objectSpread({}, item), {}, {\n                leaf: !item.hasChildren\n              });\n            }));\n          });\n        },\n        addBtn: false,\n        menu: false,\n        size: 'small',\n        props: {\n          labelText: '标题',\n          label: 'title',\n          value: 'value',\n          children: 'children'\n        }\n      },\n      option: {\n        height: 'auto',\n        calcHeight: 80,\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        selection: true,\n        viewBtn: true,\n        dialogType: 'drawer',\n        dialogClickModal: false,\n        column: [{\n          label: \"登录账号\",\n          prop: \"account\",\n          search: true,\n          display: false\n        }, {\n          label: \"所属租户\",\n          prop: \"tenantName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户姓名\",\n          prop: \"realName\",\n          search: true,\n          display: false\n        }, {\n          label: \"所属角色\",\n          prop: \"roleName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"所属部门\",\n          prop: \"deptName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户平台\",\n          prop: \"userTypeName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户平台\",\n          type: \"select\",\n          dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          dataType: \"number\",\n          search: true,\n          hide: true,\n          display: false,\n          prop: \"userType\",\n          rules: [{\n            required: true,\n            message: \"请选择用户平台\",\n            trigger: \"blur\"\n          }]\n        }],\n        group: [{\n          label: '基础信息',\n          prop: 'baseInfo',\n          icon: 'el-icon-user-solid',\n          column: [{\n            label: \"所属租户\",\n            prop: \"tenantId\",\n            type: \"tree\",\n            dicUrl: \"/api/blade-system/tenant/select\",\n            props: {\n              label: \"tenantName\",\n              value: \"tenantId\"\n            },\n            hide: !website.tenantMode,\n            addDisplay: website.tenantMode,\n            editDisplay: website.tenantMode,\n            viewDisplay: website.tenantMode,\n            rules: [{\n              required: true,\n              message: \"请输入所属租户\",\n              trigger: \"click\"\n            }],\n            span: 24\n          }, {\n            label: \"登录账号\",\n            prop: \"account\",\n            rules: [{\n              required: true,\n              message: \"请输入登录账号\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"用户平台\",\n            type: \"select\",\n            dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\n            props: {\n              label: \"dictValue\",\n              value: \"dictKey\"\n            },\n            dataType: \"number\",\n            slot: true,\n            prop: \"userType\",\n            rules: [{\n              required: true,\n              message: \"请选择用户平台\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: '密码',\n            prop: 'password',\n            hide: true,\n            editDisplay: false,\n            viewDisplay: false,\n            rules: [{\n              required: true,\n              validator: validatePass,\n              trigger: 'blur'\n            }]\n          }, {\n            label: '确认密码',\n            prop: 'password2',\n            hide: true,\n            editDisplay: false,\n            viewDisplay: false,\n            rules: [{\n              required: true,\n              validator: validatePass2,\n              trigger: 'blur'\n            }]\n          }]\n        }, {\n          label: '详细信息',\n          prop: 'detailInfo',\n          icon: 'el-icon-s-order',\n          column: [{\n            label: \"用户昵称\",\n            prop: \"name\",\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请输入用户昵称\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"用户姓名\",\n            prop: \"realName\",\n            rules: [{\n              required: true,\n              message: \"请输入用户姓名\",\n              trigger: \"blur\"\n            }, {\n              min: 2,\n              max: 5,\n              message: '姓名长度在2到5个字符'\n            }]\n          }, {\n            label: \"手机号码\",\n            prop: \"phone\",\n            overHidden: true\n          }, {\n            label: \"电子邮箱\",\n            prop: \"email\",\n            hide: true,\n            overHidden: true\n          }, {\n            label: \"用户性别\",\n            prop: \"sex\",\n            type: \"select\",\n            dicData: [{\n              label: \"男\",\n              value: 1\n            }, {\n              label: \"女\",\n              value: 2\n            }, {\n              label: \"未知\",\n              value: 3\n            }],\n            hide: true\n          }, {\n            label: \"用户生日\",\n            type: \"date\",\n            prop: \"birthday\",\n            format: \"yyyy-MM-dd hh:mm:ss\",\n            valueFormat: \"yyyy-MM-dd hh:mm:ss\",\n            hide: true\n          }, {\n            label: \"账号状态\",\n            prop: \"statusName\",\n            hide: true,\n            display: false\n          }]\n        }, {\n          label: '职责信息',\n          prop: 'dutyInfo',\n          icon: 'el-icon-s-custom',\n          column: [{\n            label: \"用户编号\",\n            prop: \"code\"\n          }, {\n            label: \"所属角色\",\n            prop: \"roleId\",\n            multiple: true,\n            type: \"tree\",\n            dicData: [],\n            props: {\n              label: \"title\"\n            },\n            checkStrictly: true,\n            slot: true,\n            rules: [{\n              required: true,\n              message: \"请选择所属角色\",\n              trigger: \"click\"\n            }]\n          }, {\n            label: \"所属部门\",\n            prop: \"deptId\",\n            type: \"tree\",\n            multiple: true,\n            dicData: [],\n            props: {\n              label: \"title\"\n            },\n            checkStrictly: true,\n            slot: true,\n            rules: [{\n              required: true,\n              message: \"请选择所属部门\",\n              trigger: \"click\"\n            }]\n          }, {\n            label: \"所属岗位\",\n            prop: \"postId\",\n            type: \"tree\",\n            multiple: true,\n            dicData: [],\n            props: {\n              label: \"postName\",\n              value: \"id\"\n            },\n            rules: [{\n              required: true,\n              message: \"请选择所属岗位\",\n              trigger: \"click\"\n            }]\n          }]\n        }]\n      },\n      data: [],\n      platformQuery: {},\n      platformSelectionList: [],\n      platformData: [],\n      platformForm: {},\n      platformOption: {\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        selection: true,\n        viewBtn: true,\n        dialogClickModal: false,\n        menuWidth: 120,\n        editBtnText: '配置',\n        column: [{\n          label: \"登录账号\",\n          prop: \"account\",\n          search: true,\n          display: false\n        }, {\n          label: \"所属租户\",\n          prop: \"tenantName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户姓名\",\n          prop: \"realName\",\n          search: true,\n          display: false\n        }, {\n          label: \"用户平台\",\n          prop: \"userTypeName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户平台\",\n          type: \"select\",\n          dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          dataType: \"number\",\n          search: true,\n          hide: true,\n          display: false,\n          prop: \"userType\",\n          rules: [{\n            required: true,\n            message: \"请选择用户平台\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"用户拓展\",\n          prop: \"userExt\",\n          type: \"textarea\",\n          minRows: 8,\n          span: 24,\n          overHidden: true,\n          row: true,\n          hide: true\n        }]\n      },\n      excelForm: {},\n      excelOption: {\n        submitBtn: false,\n        emptyBtn: false,\n        column: [{\n          label: '模板上传',\n          prop: 'excelFile',\n          type: 'upload',\n          drag: true,\n          loadText: '模板上传中，请稍等',\n          span: 24,\n          propsHttp: {\n            res: 'data'\n          },\n          tip: '请上传 .xls,.xlsx 标准格式文件',\n          action: \"/api/blade-user/import-user\"\n        }, {\n          label: \"数据覆盖\",\n          prop: \"isCovered\",\n          type: \"switch\",\n          align: \"center\",\n          width: 80,\n          dicData: [{\n            label: \"否\",\n            value: 0\n          }, {\n            label: \"是\",\n            value: 1\n          }],\n          value: 0,\n          slot: true,\n          rules: [{\n            required: true,\n            message: \"请选择是否覆盖\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: '模板下载',\n          prop: 'excelTemplate',\n          formslot: true,\n          span: 24\n        }]\n      }\n    };\n  },\n  watch: {\n    'form.tenantId': function formTenantId() {\n      if (this.form.tenantId !== '' && this.initFlag) {\n        this.initData(this.form.tenantId);\n      }\n    },\n    'excelForm.isCovered': function excelFormIsCovered() {\n      if (this.excelForm.isCovered !== '') {\n        var column = this.findObject(this.excelOption.column, \"excelFile\");\n        column.action = \"/api/blade-user/import-user?isCovered=\".concat(this.excelForm.isCovered);\n      }\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"userInfo\", \"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.user_add, false),\n        viewBtn: this.vaildData(this.permission.user_view, false),\n        delBtn: this.vaildData(this.permission.user_delete, false),\n        editBtn: this.vaildData(this.permission.user_edit, false)\n      };\n    },\n    platformPermissionList: function platformPermissionList() {\n      return {\n        addBtn: false,\n        viewBtn: false,\n        delBtn: false,\n        editBtn: this.vaildData(this.permission.user_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  mounted: function mounted() {\n    // 非租户模式默认加载管理组数据\n    if (!website.tenantMode) {\n      this.initData(website.tenantId);\n    }\n  },\n  methods: {\n    nodeClick: function nodeClick(data) {\n      this.treeDeptId = data.id;\n      this.page.currentPage = 1;\n      this.onLoad(this.page);\n    },\n    initData: function initData(tenantId) {\n      var _this2 = this;\n\n      getRoleTree(tenantId).then(function (res) {\n        var column = _this2.findObject(_this2.option.group, \"roleId\");\n\n        column.dicData = res.data.data;\n      });\n      getDeptTree(tenantId).then(function (res) {\n        var column = _this2.findObject(_this2.option.group, \"deptId\");\n\n        column.dicData = res.data.data;\n      });\n      getPostList(tenantId).then(function (res) {\n        var column = _this2.findObject(_this2.option.group, \"postId\");\n\n        column.dicData = res.data.data;\n      });\n    },\n    submitRole: function submitRole() {\n      var _this3 = this;\n\n      var roleList = this.$refs.treeRole.getCheckedKeys().join(\",\");\n      grant(this.ids, roleList).then(function () {\n        _this3.roleBox = false;\n\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this3.onLoad(_this3.page);\n      });\n    },\n    rowSave: function rowSave(row, done, loading) {\n      var _this4 = this;\n\n      row.deptId = row.deptId.join(\",\");\n      row.roleId = row.roleId.join(\",\");\n      row.postId = row.postId.join(\",\");\n      add(row).then(function () {\n        _this4.initFlag = false;\n\n        _this4.onLoad(_this4.page);\n\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this5 = this;\n\n      row.deptId = row.deptId.join(\",\");\n      row.roleId = row.roleId.join(\",\");\n      row.postId = row.postId.join(\",\");\n      update(row).then(function () {\n        _this5.initFlag = false;\n\n        _this5.onLoad(_this5.page);\n\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this6 = this;\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this6.onLoad(_this6.page);\n\n        _this6.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.treeDeptId = '';\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    handleDelete: function handleDelete() {\n      var _this7 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this7.ids);\n      }).then(function () {\n        _this7.onLoad(_this7.page);\n\n        _this7.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this7.$refs.crud.toggleSelection();\n      });\n    },\n    handleReset: function handleReset() {\n      var _this8 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择账号密码重置为123456?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return resetPassword(_this8.ids);\n      }).then(function () {\n        _this8.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this8.$refs.crud.toggleSelection();\n      });\n    },\n    handleGrant: function handleGrant() {\n      var _this9 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.roleTreeObj = [];\n\n      if (this.selectionList.length === 1) {\n        this.roleTreeObj = this.selectionList[0].roleId.split(\",\");\n      }\n\n      getRoleTree().then(function (res) {\n        _this9.roleGrantList = res.data.data;\n        _this9.roleBox = true;\n      });\n    },\n    handlePlatform: function handlePlatform() {\n      this.platformBox = true;\n    },\n    handleLock: function handleLock() {\n      var _this10 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择账号解封？\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return unlock(_this10.ids);\n      }).then(function () {\n        _this10.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    handleImport: function handleImport() {\n      this.excelBox = true;\n    },\n    uploadAfter: function uploadAfter(res, done, loading, column) {\n      window.console.log(column);\n      this.excelBox = false;\n      this.refreshChange();\n      done();\n    },\n    handleExport: function handleExport() {\n      var _this11 = this;\n\n      var account = func.toStr(this.search.account);\n      var realName = func.toStr(this.search.realName);\n      this.$confirm(\"是否导出用户数据?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        NProgress.start();\n        exportBlob(\"/api/blade-user/export-user?\".concat(_this11.website.tokenHeader, \"=\").concat(getToken(), \"&account=\").concat(account, \"&realName=\").concat(realName)).then(function (res) {\n          downloadXls(res.data, \"\\u7528\\u6237\\u6570\\u636E\\u8868\".concat(dateNow(), \".xlsx\"));\n          NProgress.done();\n        });\n      });\n    },\n    handleTemplate: function handleTemplate() {\n      exportBlob(\"/api/blade-user/export-template?\".concat(this.website.tokenHeader, \"=\").concat(getToken())).then(function (res) {\n        downloadXls(res.data, \"用户数据模板.xlsx\");\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this12 = this;\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getUser(this.form.id).then(function (res) {\n          _this12.form = res.data.data;\n\n          if (_this12.form.hasOwnProperty(\"deptId\")) {\n            _this12.form.deptId = _this12.form.deptId.split(\",\");\n          }\n\n          if (_this12.form.hasOwnProperty(\"roleId\")) {\n            _this12.form.roleId = _this12.form.roleId.split(\",\");\n          }\n\n          if (_this12.form.hasOwnProperty(\"postId\")) {\n            _this12.form.postId = _this12.form.postId.split(\",\");\n          }\n        });\n      }\n\n      this.initFlag = true;\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this13 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query), this.treeDeptId).then(function (res) {\n        var data = res.data.data;\n        _this13.page.total = data.total;\n        _this13.data = data.records;\n        _this13.loading = false;\n\n        _this13.selectionClear();\n      });\n    },\n    platformRowUpdate: function platformRowUpdate(row, index, done, loading) {\n      var _this14 = this;\n\n      updatePlatform(row.id, row.userType, row.userExt).then(function () {\n        _this14.platformOnLoad(_this14.platformPage);\n\n        _this14.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    platformBeforeOpen: function platformBeforeOpen(done, type) {\n      var _this15 = this;\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getUserPlatform(this.platformForm.id).then(function (res) {\n          _this15.platformForm = res.data.data;\n        });\n      }\n\n      done();\n    },\n    platformSearchReset: function platformSearchReset() {\n      this.platformQuery = {};\n      this.platformOnLoad(this.platformPage);\n    },\n    platformSearchChange: function platformSearchChange(params, done) {\n      this.platformQuery = params;\n      this.platformPage.currentPage = 1;\n      this.platformOnLoad(this.platformPage, params);\n      done();\n    },\n    platformSelectionChange: function platformSelectionChange(list) {\n      this.platformSelectionList = list;\n    },\n    platformSelectionClear: function platformSelectionClear() {\n      this.platformSelectionList = [];\n      this.$refs.platformCrud.toggleSelection();\n    },\n    platformCurrentChange: function platformCurrentChange(currentPage) {\n      this.platformPage.currentPage = currentPage;\n    },\n    platformSizeChange: function platformSizeChange(pageSize) {\n      this.platformPage.pageSize = pageSize;\n    },\n    platformRefreshChange: function platformRefreshChange() {\n      this.platformOnLoad(this.platformPage, this.platformQuery);\n    },\n    platformOnLoad: function platformOnLoad(page) {\n      var _this16 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.platformLoading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query), this.treeDeptId).then(function (res) {\n        var data = res.data.data;\n        _this16.platformPage.total = data.total;\n        _this16.platformData = data.records;\n        _this16.platformLoading = false;\n\n        _this16.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":"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","names":["getList","getUser","getUserPlatform","remove","update","updatePlatform","add","grant","resetPassword","unlock","data","callback","form","search","roleBox","excelBox","platformBox","initFlag","selectionList","query","loading","platformLoading","page","pageSize","currentPage","total","platformPage","init","roleTree","deptTree","props","label","value","roleGrantList","roleTreeObj","treeDeptId","treeData","treeOption","nodeKey","lazy","treeLoad","getDeptLazyTree","resolve","item","leaf","addBtn","menu","size","labelText","children","option","height","calcHeight","tip","searchShow","searchMenuSpan","border","index","selection","viewBtn","dialogType","dialogClickModal","column","prop","display","slot","type","dicUrl","dataType","hide","rules","required","message","trigger","group","icon","addDisplay","editDisplay","viewDisplay","span","validator","min","max","overHidden","dicData","format","valueFormat","multiple","checkStrictly","platformQuery","platformSelectionList","platformData","platformForm","platformOption","menuWidth","editBtnText","minRows","row","excelForm","excelOption","submitBtn","emptyBtn","drag","loadText","propsHttp","res","action","align","width","formslot","watch","computed","mapGetters","permissionList","delBtn","editBtn","platformPermissionList","ids","mounted","methods","nodeClick","initData","tenantId","getRoleTree","getDeptTree","getPostList","submitRole","rowSave","done","window","rowUpdate","rowDel","confirmButtonText","cancelButtonText","then","searchReset","searchChange","params","selectionChange","list","selectionClear","handleDelete","handleReset","handleGrant","handlePlatform","handleLock","handleImport","uploadAfter","handleExport","NProgress","exportBlob","downloadXls","handleTemplate","beforeOpen","currentChange","sizeChange","refreshChange","onLoad","platformRowUpdate","platformBeforeOpen","platformSearchReset","platformSearchChange","platformSelectionChange","platformSelectionClear","platformCurrentChange","platformSizeChange","platformRefreshChange","platformOnLoad"],"sourceRoot":"src/views/system","sources":["user.vue"],"sourcesContent":["<template>\n  <el-row>\n    <el-col :span=\"5\">\n      <div class=\"box\">\n        <el-scrollbar>\n          <basic-container>\n            <avue-tree :option=\"treeOption\" :data=\"treeData\" @node-click=\"nodeClick\"/>\n          </basic-container>\n        </el-scrollbar>\n      </div>\n    </el-col>\n    <el-col :span=\"19\">\n      <basic-container>\n        <avue-crud :option=\"option\"\n                   :search.sync=\"search\"\n                   :table-loading=\"loading\"\n                   :data=\"data\"\n                   ref=\"crud\"\n                   v-model=\"form\"\n                   :permission=\"permissionList\"\n                   @row-del=\"rowDel\"\n                   @row-update=\"rowUpdate\"\n                   @row-save=\"rowSave\"\n                   :before-open=\"beforeOpen\"\n                   :page.sync=\"page\"\n                   @search-change=\"searchChange\"\n                   @search-reset=\"searchReset\"\n                   @selection-change=\"selectionChange\"\n                   @current-change=\"currentChange\"\n                   @size-change=\"sizeChange\"\n                   @refresh-change=\"refreshChange\"\n                   @on-load=\"onLoad\">\n          <template slot=\"menuLeft\">\n            <el-button type=\"danger\"\n                       size=\"small\"\n                       plain\n                       icon=\"el-icon-delete\"\n                       v-if=\"permission.user_delete\"\n                       @click=\"handleDelete\">删 除\n            </el-button>\n            <el-button type=\"info\"\n                       size=\"small\"\n                       plain\n                       v-if=\"permission.user_role\"\n                       icon=\"el-icon-user\"\n                       @click=\"handleGrant\">角色配置\n            </el-button>\n            <el-button type=\"info\"\n                       size=\"small\"\n                       plain\n                       v-if=\"permission.user_reset\"\n                       icon=\"el-icon-refresh\"\n                       @click=\"handleReset\">密码重置\n            </el-button>\n            <el-button type=\"info\"\n                       size=\"small\"\n                       plain\n                       v-if=\"userInfo.role_name.includes('admin')\"\n                       icon=\"el-icon-setting\"\n                       @click=\"handlePlatform\">平台配置\n            </el-button>\n            <el-button type=\"info\"\n                       size=\"small\"\n                       plain\n                       v-if=\"userInfo.role_name.includes('admin')\"\n                       icon=\"el-icon-coordinate\"\n                       @click=\"handleLock\">账号解封\n            </el-button>\n            <el-button type=\"success\"\n                       size=\"small\"\n                       plain\n                       v-if=\"userInfo.role_name.includes('admin')\"\n                       icon=\"el-icon-upload2\"\n                       @click=\"handleImport\">导入\n            </el-button>\n            <el-button type=\"warning\"\n                       size=\"small\"\n                       plain\n                       v-if=\"userInfo.role_name.includes('admin')\"\n                       icon=\"el-icon-download\"\n                       @click=\"handleExport\">导出\n            </el-button>\n          </template>\n          <template slot-scope=\"{row}\"\n                    slot=\"tenantName\">\n            <el-tag>{{row.tenantName}}</el-tag>\n          </template>\n          <template slot-scope=\"{row}\"\n                    slot=\"roleName\">\n            <el-tag>{{row.roleName}}</el-tag>\n          </template>\n          <template slot-scope=\"{row}\"\n                    slot=\"deptName\">\n            <el-tag>{{row.deptName}}</el-tag>\n          </template>\n          <template slot-scope=\"{row}\"\n                    slot=\"userTypeName\">\n            <el-tag>{{row.userTypeName}}</el-tag>\n          </template>\n        </avue-crud>\n        <el-dialog title=\"用户角色配置\"\n                   append-to-body\n                   :visible.sync=\"roleBox\"\n                   width=\"345px\">\n\n          <el-tree :data=\"roleGrantList\"\n                   show-checkbox\n                   check-strictly\n                   default-expand-all\n                   node-key=\"id\"\n                   ref=\"treeRole\"\n                   :default-checked-keys=\"roleTreeObj\"\n                   :props=\"props\">\n          </el-tree>\n\n          <span slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"roleBox = false\">取 消</el-button>\n            <el-button type=\"primary\"\n                       @click=\"submitRole\">确 定</el-button>\n          </span>\n        </el-dialog>\n        <el-dialog title=\"用户数据导入\"\n                   append-to-body\n                   :visible.sync=\"excelBox\"\n                   width=\"555px\">\n          <avue-form :option=\"excelOption\" v-model=\"excelForm\" :upload-after=\"uploadAfter\">\n            <template slot=\"excelTemplate\">\n              <el-button type=\"primary\" @click=\"handleTemplate\">\n                点击下载<i class=\"el-icon-download el-icon--right\"></i>\n              </el-button>\n            </template>\n          </avue-form>\n        </el-dialog>\n        <el-dialog title=\"用户平台配置\"\n                   append-to-body\n                   :visible.sync=\"platformBox\">\n          <avue-crud :option=\"platformOption\"\n                     :table-loading=\"platformLoading\"\n                     :data=\"platformData\"\n                     ref=\"platformCrud\"\n                     v-model=\"platformForm\"\n                     :before-open=\"platformBeforeOpen\"\n                     :page.sync=\"platformPage\"\n                     :permission=\"platformPermissionList\"\n                     @row-update=\"platformRowUpdate\"\n                     @search-change=\"platformSearchChange\"\n                     @search-reset=\"platformSearchReset\"\n                     @selection-change=\"platformSelectionChange\"\n                     @current-change=\"platformCurrentChange\"\n                     @size-change=\"platformSizeChange\"\n                     @refresh-change=\"platformRefreshChange\"\n                     @on-load=\"platformOnLoad\">\n            <template slot-scope=\"{row}\"\n                      slot=\"tenantName\">\n              <el-tag>{{row.tenantName}}</el-tag>\n            </template>\n            <template slot-scope=\"{row}\"\n                      slot=\"userTypeName\">\n              <el-tag>{{row.userTypeName}}</el-tag>\n            </template>\n          </avue-crud>\n        </el-dialog>\n      </basic-container>\n    </el-col>\n  </el-row>\n</template>\n\n<script>\n  import {\n    getList,\n    getUser,\n    getUserPlatform,\n    remove,\n    update,\n    updatePlatform,\n    add,\n    grant,\n    resetPassword, unlock\n  } from \"@/api/system/user\";\n  import {exportBlob} from \"@/api/common\";\n  import {getDeptTree, getDeptLazyTree} from \"@/api/system/dept\";\n  import {getRoleTree} from \"@/api/system/role\";\n  import {getPostList} from \"@/api/system/post\";\n  import {mapGetters} from \"vuex\";\n  import website from '@/config/website';\n  import {getToken} from '@/util/auth';\n  import {downloadXls} from \"@/util/util\";\n  import {dateNow} from \"@/util/date\";\n  import NProgress from 'nprogress';\n  import 'nprogress/nprogress.css';\n  import func from \"@/util/func\";\n\n  export default {\n    data() {\n      const validatePass = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('请输入密码'));\n        } else {\n          callback();\n        }\n      };\n      const validatePass2 = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('请再次输入密码'));\n        } else if (value !== this.form.password) {\n          callback(new Error('两次输入密码不一致!'));\n        } else {\n          callback();\n        }\n      };\n      return {\n        form: {},\n        search:{},\n        roleBox: false,\n        excelBox: false,\n        platformBox: false,\n        initFlag: true,\n        selectionList: [],\n        query: {},\n        loading: true,\n        platformLoading: false,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        platformPage: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        init: {\n          roleTree: [],\n          deptTree: [],\n        },\n        props: {\n          label: \"title\",\n          value: \"key\"\n        },\n        roleGrantList: [],\n        roleTreeObj: [],\n        treeDeptId: '',\n        treeData: [],\n        treeOption: {\n          nodeKey: 'id',\n          lazy: true,\n          treeLoad: function (node, resolve) {\n            const parentId = (node.level === 0) ? 0 : node.data.id;\n            getDeptLazyTree(parentId).then(res => {\n              resolve(res.data.data.map(item => {\n                return {\n                  ...item,\n                  leaf: !item.hasChildren\n                }\n              }))\n            });\n          },\n          addBtn: false,\n          menu: false,\n          size: 'small',\n          props: {\n            labelText: '标题',\n            label: 'title',\n            value: 'value',\n            children: 'children'\n          }\n        },\n        option: {\n          height: 'auto',\n          calcHeight: 80,\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          selection: true,\n          viewBtn: true,\n          dialogType: 'drawer',\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"登录账号\",\n              prop: \"account\",\n              search: true,\n              display: false\n            },\n            {\n              label: \"所属租户\",\n              prop: \"tenantName\",\n              slot: true,\n              display: false\n            },\n            {\n              label: \"用户姓名\",\n              prop: \"realName\",\n              search: true,\n              display: false\n            },\n            {\n              label: \"所属角色\",\n              prop: \"roleName\",\n              slot: true,\n              display: false\n            },\n            {\n              label: \"所属部门\",\n              prop: \"deptName\",\n              slot: true,\n              display: false\n            },\n            {\n              label: \"用户平台\",\n              prop: \"userTypeName\",\n              slot: true,\n              display: false\n            },\n            {\n              label: \"用户平台\",\n              type: \"select\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              search: true,\n              hide: true,\n              display: false,\n              prop: \"userType\",\n              rules: [{\n                required: true,\n                message: \"请选择用户平台\",\n                trigger: \"blur\"\n              }]\n            },\n          ],\n          group: [\n            {\n              label: '基础信息',\n              prop: 'baseInfo',\n              icon: 'el-icon-user-solid',\n              column: [\n                {\n                  label: \"所属租户\",\n                  prop: \"tenantId\",\n                  type: \"tree\",\n                  dicUrl: \"/api/blade-system/tenant/select\",\n                  props: {\n                    label: \"tenantName\",\n                    value: \"tenantId\"\n                  },\n                  hide: !website.tenantMode,\n                  addDisplay: website.tenantMode,\n                  editDisplay: website.tenantMode,\n                  viewDisplay: website.tenantMode,\n                  rules: [{\n                    required: true,\n                    message: \"请输入所属租户\",\n                    trigger: \"click\"\n                  }],\n                  span: 24,\n                },\n                {\n                  label: \"登录账号\",\n                  prop: \"account\",\n                  rules: [{\n                    required: true,\n                    message: \"请输入登录账号\",\n                    trigger: \"blur\"\n                  }],\n                },\n                {\n                  label: \"用户平台\",\n                  type: \"select\",\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  dataType: \"number\",\n                  slot: true,\n                  prop: \"userType\",\n                  rules: [{\n                    required: true,\n                    message: \"请选择用户平台\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: '密码',\n                  prop: 'password',\n                  hide: true,\n                  editDisplay: false,\n                  viewDisplay: false,\n                  rules: [{required: true, validator: validatePass, trigger: 'blur'}]\n                },\n                {\n                  label: '确认密码',\n                  prop: 'password2',\n                  hide: true,\n                  editDisplay: false,\n                  viewDisplay: false,\n                  rules: [{required: true, validator: validatePass2, trigger: 'blur'}]\n                },\n              ]\n            },\n            {\n              label: '详细信息',\n              prop: 'detailInfo',\n              icon: 'el-icon-s-order',\n              column: [\n                {\n                  label: \"用户昵称\",\n                  prop: \"name\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入用户昵称\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"用户姓名\",\n                  prop: \"realName\",\n                  rules: [{\n                    required: true,\n                    message: \"请输入用户姓名\",\n                    trigger: \"blur\"\n                  }, {\n                    min: 2,\n                    max: 5,\n                    message: '姓名长度在2到5个字符'\n                  }]\n                },\n                {\n                  label: \"手机号码\",\n                  prop: \"phone\",\n                  overHidden: true\n                },\n                {\n                  label: \"电子邮箱\",\n                  prop: \"email\",\n                  hide: true,\n                  overHidden: true\n                },\n                {\n                  label: \"用户性别\",\n                  prop: \"sex\",\n                  type: \"select\",\n                  dicData: [\n                    {\n                      label: \"男\",\n                      value: 1\n                    },\n                    {\n                      label: \"女\",\n                      value: 2\n                    },\n                    {\n                      label: \"未知\",\n                      value: 3\n                    }\n                  ],\n                  hide: true\n                },\n                {\n                  label: \"用户生日\",\n                  type: \"date\",\n                  prop: \"birthday\",\n                  format: \"yyyy-MM-dd hh:mm:ss\",\n                  valueFormat: \"yyyy-MM-dd hh:mm:ss\",\n                  hide: true\n                },\n                {\n                  label: \"账号状态\",\n                  prop: \"statusName\",\n                  hide: true,\n                  display: false\n                }\n              ]\n            },\n            {\n              label: '职责信息',\n              prop: 'dutyInfo',\n              icon: 'el-icon-s-custom',\n              column: [\n                {\n                  label: \"用户编号\",\n                  prop: \"code\",\n                },\n                {\n                  label: \"所属角色\",\n                  prop: \"roleId\",\n                  multiple: true,\n                  type: \"tree\",\n                  dicData: [],\n                  props: {\n                    label: \"title\"\n                  },\n                  checkStrictly: true,\n                  slot: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择所属角色\",\n                    trigger: \"click\"\n                  }]\n                },\n                {\n                  label: \"所属部门\",\n                  prop: \"deptId\",\n                  type: \"tree\",\n                  multiple: true,\n                  dicData: [],\n                  props: {\n                    label: \"title\"\n                  },\n                  checkStrictly: true,\n                  slot: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择所属部门\",\n                    trigger: \"click\"\n                  }]\n                },\n                {\n                  label: \"所属岗位\",\n                  prop: \"postId\",\n                  type: \"tree\",\n                  multiple: true,\n                  dicData: [],\n                  props: {\n                    label: \"postName\",\n                    value: \"id\"\n                  },\n                  rules: [{\n                    required: true,\n                    message: \"请选择所属岗位\",\n                    trigger: \"click\"\n                  }],\n                },\n              ]\n            },\n          ]\n        },\n        data: [],\n        platformQuery: {},\n        platformSelectionList: [],\n        platformData: [],\n        platformForm: {},\n        platformOption: {\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          selection: true,\n          viewBtn: true,\n          dialogClickModal: false,\n          menuWidth: 120,\n          editBtnText: '配置',\n          column: [\n            {\n              label: \"登录账号\",\n              prop: \"account\",\n              search: true,\n              display: false\n            },\n            {\n              label: \"所属租户\",\n              prop: \"tenantName\",\n              slot: true,\n              display: false\n            },\n            {\n              label: \"用户姓名\",\n              prop: \"realName\",\n              search: true,\n              display: false\n            },\n            {\n              label: \"用户平台\",\n              prop: \"userTypeName\",\n              slot: true,\n              display: false\n            },\n            {\n              label: \"用户平台\",\n              type: \"select\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              search: true,\n              hide: true,\n              display: false,\n              prop: \"userType\",\n              rules: [{\n                required: true,\n                message: \"请选择用户平台\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"用户拓展\",\n              prop: \"userExt\",\n              type: \"textarea\",\n              minRows: 8,\n              span: 24,\n              overHidden: true,\n              row: true,\n              hide: true,\n            },\n          ],\n        },\n        excelForm: {},\n        excelOption: {\n          submitBtn: false,\n          emptyBtn: false,\n          column: [\n            {\n              label: '模板上传',\n              prop: 'excelFile',\n              type: 'upload',\n              drag: true,\n              loadText: '模板上传中，请稍等',\n              span: 24,\n              propsHttp: {\n                res: 'data'\n              },\n              tip: '请上传 .xls,.xlsx 标准格式文件',\n              action: \"/api/blade-user/import-user\"\n            },\n            {\n              label: \"数据覆盖\",\n              prop: \"isCovered\",\n              type: \"switch\",\n              align: \"center\",\n              width: 80,\n              dicData: [\n                {\n                  label: \"否\",\n                  value: 0\n                },\n                {\n                  label: \"是\",\n                  value: 1\n                }\n              ],\n              value: 0,\n              slot: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择是否覆盖\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: '模板下载',\n              prop: 'excelTemplate',\n              formslot: true,\n              span: 24,\n            }\n          ]\n        }\n      };\n    },\n    watch: {\n      'form.tenantId'() {\n        if (this.form.tenantId !== '' && this.initFlag) {\n          this.initData(this.form.tenantId);\n        }\n      },\n      'excelForm.isCovered'() {\n        if (this.excelForm.isCovered !== '') {\n          const column = this.findObject(this.excelOption.column, \"excelFile\");\n          column.action = `/api/blade-user/import-user?isCovered=${this.excelForm.isCovered}`;\n        }\n      }\n    },\n    computed: {\n      ...mapGetters([\"userInfo\", \"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.user_add, false),\n          viewBtn: this.vaildData(this.permission.user_view, false),\n          delBtn: this.vaildData(this.permission.user_delete, false),\n          editBtn: this.vaildData(this.permission.user_edit, false)\n        };\n      },\n      platformPermissionList() {\n        return {\n          addBtn: false,\n          viewBtn: false,\n          delBtn: false,\n          editBtn: this.vaildData(this.permission.user_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      },\n    },\n    mounted() {\n      // 非租户模式默认加载管理组数据\n      if (!website.tenantMode) {\n        this.initData(website.tenantId);\n      }\n    },\n    methods: {\n      nodeClick(data) {\n        this.treeDeptId = data.id;\n        this.page.currentPage = 1;\n        this.onLoad(this.page);\n      },\n      initData(tenantId) {\n        getRoleTree(tenantId).then(res => {\n          const column = this.findObject(this.option.group, \"roleId\");\n          column.dicData = res.data.data;\n        });\n        getDeptTree(tenantId).then(res => {\n          const column = this.findObject(this.option.group, \"deptId\");\n          column.dicData = res.data.data;\n        });\n        getPostList(tenantId).then(res => {\n          const column = this.findObject(this.option.group, \"postId\");\n          column.dicData = res.data.data;\n        });\n      },\n      submitRole() {\n        const roleList = this.$refs.treeRole.getCheckedKeys().join(\",\");\n        grant(this.ids, roleList).then(() => {\n          this.roleBox = false;\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          this.onLoad(this.page);\n        });\n      },\n      rowSave(row, done, loading) {\n        row.deptId = row.deptId.join(\",\");\n        row.roleId = row.roleId.join(\",\");\n        row.postId = row.postId.join(\",\");\n        add(row).then(() => {\n          this.initFlag = false;\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        row.deptId = row.deptId.join(\",\");\n        row.roleId = row.roleId.join(\",\");\n        row.postId = row.postId.join(\",\");\n        update(row).then(() => {\n          this.initFlag = false;\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.treeDeptId = '';\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleReset() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择账号密码重置为123456?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return resetPassword(this.ids);\n          })\n          .then(() => {\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleGrant() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.roleTreeObj = [];\n        if (this.selectionList.length === 1) {\n          this.roleTreeObj = this.selectionList[0].roleId.split(\",\");\n        }\n        getRoleTree().then(res => {\n          this.roleGrantList = res.data.data;\n          this.roleBox = true;\n        });\n      },\n      handlePlatform() {\n        this.platformBox = true;\n      },\n      handleLock() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择账号解封？\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return unlock(this.ids);\n          })\n          .then(() => {\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      handleImport() {\n        this.excelBox = true;\n      },\n      uploadAfter(res, done, loading, column) {\n        window.console.log(column);\n        this.excelBox = false;\n        this.refreshChange();\n        done();\n      },\n      handleExport() {\n        const account = func.toStr(this.search.account);\n        const realName = func.toStr(this.search.realName);\n        this.$confirm(\"是否导出用户数据?\", \"提示\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        }).then(() => {\n          NProgress.start();\n          exportBlob(`/api/blade-user/export-user?${this.website.tokenHeader}=${getToken()}&account=${account}&realName=${realName}`).then(res => {\n            downloadXls(res.data, `用户数据表${dateNow()}.xlsx`);\n            NProgress.done();\n          })\n        });\n      },\n      handleTemplate() {\n        exportBlob(`/api/blade-user/export-template?${this.website.tokenHeader}=${getToken()}`).then(res => {\n          downloadXls(res.data, \"用户数据模板.xlsx\");\n        })\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getUser(this.form.id).then(res => {\n            this.form = res.data.data;\n            if(this.form.hasOwnProperty(\"deptId\")){\n              this.form.deptId = this.form.deptId.split(\",\");\n            }\n            if(this.form.hasOwnProperty(\"roleId\")){\n              this.form.roleId = this.form.roleId.split(\",\");\n            }\n            if(this.form.hasOwnProperty(\"postId\")){\n              this.form.postId = this.form.postId.split(\",\");\n            }\n          });\n        }\n        this.initFlag = true;\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query), this.treeDeptId).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      },\n      platformRowUpdate(row, index, done, loading) {\n        updatePlatform(row.id, row.userType, row.userExt).then(() => {\n          this.platformOnLoad(this.platformPage);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      platformBeforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getUserPlatform(this.platformForm.id).then(res => {\n            this.platformForm = res.data.data;\n          });\n        }\n        done();\n      },\n      platformSearchReset() {\n        this.platformQuery = {};\n        this.platformOnLoad(this.platformPage);\n      },\n      platformSearchChange(params, done) {\n        this.platformQuery = params;\n        this.platformPage.currentPage = 1;\n        this.platformOnLoad(this.platformPage, params);\n        done();\n      },\n      platformSelectionChange(list) {\n        this.platformSelectionList = list;\n      },\n      platformSelectionClear() {\n        this.platformSelectionList = [];\n        this.$refs.platformCrud.toggleSelection();\n      },\n      platformCurrentChange(currentPage) {\n        this.platformPage.currentPage = currentPage;\n      },\n      platformSizeChange(pageSize) {\n        this.platformPage.pageSize = pageSize;\n      },\n      platformRefreshChange() {\n        this.platformOnLoad(this.platformPage, this.platformQuery);\n      },\n      platformOnLoad(page, params = {}) {\n        this.platformLoading = true;\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query), this.treeDeptId).then(res => {\n          const data = res.data.data;\n          this.platformPage.total = data.total;\n          this.platformData = data.records;\n          this.platformLoading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n\n<style>\n  .box {\n    height: 800px;\n  }\n\n  .el-scrollbar {\n    height: 100%;\n  }\n\n  .box .el-scrollbar__wrap {\n    overflow: scroll;\n  }\n</style>\n"]}]}