{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/util/demo/dict-horizontal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/util/demo/dict-horizontal.vue","mtime":1666151205545},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getParentList, getChildList, remove, update, add, getDict } from \"@/api/system/dict\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      parentId: 0,\n      formParent: {},\n      formChild: {},\n      selectionList: [],\n      query: {},\n      loading: true,\n      pageParent: {\n        pageSize: 10,\n        pageSizes: [10, 30, 50, 100, 200],\n        currentPage: 1,\n        total: 0\n      },\n      pageChild: {\n        pageSize: 10,\n        pageSizes: [10, 30, 50, 100, 200],\n        currentPage: 1,\n        total: 0\n      },\n      dataParent: [],\n      dataChild: [],\n      option: {\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        tree: true,\n        border: true,\n        index: true,\n        selection: true,\n        viewBtn: true,\n        menuWidth: 300,\n        dialogWidth: 880,\n        column: [{\n          label: \"字典编号\",\n          prop: \"code\",\n          search: true,\n          span: 24,\n          rules: [{\n            required: true,\n            message: \"请输入字典编号\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典键值\",\n          prop: \"dictKey\",\n          type: \"number\",\n          rules: [{\n            required: true,\n            message: \"请输入字典键值\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典名称\",\n          prop: \"dictValue\",\n          search: true,\n          align: \"center\",\n          rules: [{\n            required: true,\n            message: \"请输入字典名称\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典排序\",\n          prop: \"sort\",\n          type: \"number\",\n          rules: [{\n            required: true,\n            message: \"请输入字典排序\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"封存\",\n          prop: \"isSealed\",\n          type: \"select\",\n          dicData: [{\n            label: \"否\",\n            value: 0\n          }, {\n            label: \"是\",\n            value: 1\n          }],\n          slot: true,\n          rules: [{\n            required: true,\n            message: \"请选择封存\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典备注\",\n          prop: \"remark\",\n          search: true,\n          hide: true\n        }]\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.dict_add, false),\n        viewBtn: this.vaildData(this.permission.dict_view, false),\n        delBtn: this.vaildData(this.permission.dict_delete, false),\n        editBtn: this.vaildData(this.permission.dict_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    rowSave: function rowSave(row, done, loading) {\n      var _this = this;\n\n      add(row).then(function () {\n        _this.onLoadParent(_this.pageParent);\n\n        _this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this2 = this;\n\n      update(row).then(function () {\n        _this2.onLoadParent(_this2.pageParent);\n\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this3 = this;\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this3.onLoadParent(_this3.pageParent);\n\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    handleRowClick: function handleRowClick(row) {\n      this.parentId = row.id;\n      this.onLoadChild(this.pageChild);\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoadParent(this.pageParent);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.pageParent.currentPage = 1;\n      this.onLoadParent(this.pageParent, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    handleDelete: function handleDelete() {\n      var _this4 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this4.ids);\n      }).then(function () {\n        _this4.onLoadParent(_this4.pageParent);\n\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this4.$refs.crud.toggleSelection();\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this5 = this;\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDict(this.formParent.id).then(function (res) {\n          _this5.formParent = res.data.data;\n        });\n      }\n\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.pageParent.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.pageParent.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoadParent(this.page, this.query);\n    },\n    rowSaveChild: function rowSaveChild(row, done, loading) {\n      var _this6 = this;\n\n      add(row).then(function () {\n        _this6.onLoadChild(_this6.pageChild);\n\n        _this6.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdateChild: function rowUpdateChild(row, index, done, loading) {\n      var _this7 = this;\n\n      update(row).then(function () {\n        _this7.onLoadChild(_this7.pageChild);\n\n        _this7.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDelChild: function rowDelChild(row) {\n      var _this8 = this;\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this8.onLoadChild(_this8.pageChild);\n\n        _this8.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchResetChild: function searchResetChild() {\n      this.query = {};\n      this.onLoadChild(this.pageChild);\n    },\n    searchChangeChild: function searchChangeChild(params, done) {\n      this.query = params;\n      this.pageChild.currentPage = 1;\n      this.onLoadChild(this.pageChild, params);\n      done();\n    },\n    selectionChangeChild: function selectionChangeChild(list) {\n      this.selectionList = list;\n    },\n    selectionClearChild: function selectionClearChild() {\n      this.selectionList = [];\n      this.$refs.crudChild.toggleSelection();\n    },\n    handleDeleteChild: function handleDeleteChild() {\n      var _this9 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this9.ids);\n      }).then(function () {\n        _this9.onLoadChild(_this9.pageChild);\n\n        _this9.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this9.$refs.crudChild.toggleSelection();\n      });\n    },\n    beforeOpenChild: function beforeOpenChild(done, type) {\n      var _this10 = this;\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDict(this.formChild.id).then(function (res) {\n          _this10.formChild = res.data.data;\n        });\n      }\n\n      done();\n    },\n    currentChangeChild: function currentChangeChild(currentPage) {\n      this.pageChild.currentPage = currentPage;\n    },\n    sizeChangeChild: function sizeChangeChild(pageSize) {\n      this.pageChild.pageSize = pageSize;\n    },\n    refreshChangeChild: function refreshChangeChild() {\n      this.onLoadChild(this.pageChild, this.query);\n    },\n    onLoadParent: function onLoadParent(page) {\n      var _this11 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getParentList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(function (res) {\n        var data = res.data.data;\n        _this11.pageParent.total = data.total;\n        _this11.dataParent = data.records;\n        _this11.loading = false;\n\n        _this11.selectionClear();\n      });\n    },\n    onLoadChild: function onLoadChild(page) {\n      var _this12 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getChildList(page.currentPage, page.pageSize, this.parentId, Object.assign(params, this.query)).then(function (res) {\n        var data = res.data.data;\n        _this12.pageChild.total = data.total;\n        _this12.dataChild = data.records;\n        _this12.loading = false;\n\n        _this12.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":"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","names":["getParentList","getChildList","remove","update","add","getDict","data","parentId","formParent","formChild","selectionList","query","loading","pageParent","pageSize","pageSizes","currentPage","total","pageChild","dataParent","dataChild","option","tip","searchShow","searchMenuSpan","tree","border","index","selection","viewBtn","menuWidth","dialogWidth","column","label","prop","search","span","rules","required","message","trigger","type","align","dicData","value","slot","hide","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","methods","rowSave","row","done","window","rowUpdate","rowDel","confirmButtonText","cancelButtonText","then","handleRowClick","searchReset","searchChange","params","selectionChange","list","selectionClear","handleDelete","beforeOpen","currentChange","sizeChange","refreshChange","rowSaveChild","rowUpdateChild","rowDelChild","searchResetChild","searchChangeChild","selectionChangeChild","selectionClearChild","handleDeleteChild","beforeOpenChild","currentChangeChild","sizeChangeChild","refreshChangeChild","onLoadParent","page","Object","onLoadChild"],"sourceRoot":"src/views/util/demo","sources":["dict-horizontal.vue"],"sourcesContent":["<template>\n  <div>\n    <basic-container>\n      <el-row>\n        <el-col :span=\"12\">\n          <avue-crud\n            :option=\"option\"\n            :table-loading=\"loading\"\n            :data=\"dataParent\"\n            :page=\"pageParent\"\n            ref=\"crud\"\n            v-model=\"formParent\"\n            :permission=\"permissionList\"\n            :before-open=\"beforeOpen\"\n            @row-del=\"rowDel\"\n            @row-update=\"rowUpdate\"\n            @row-save=\"rowSave\"\n            @row-click=\"handleRowClick\"\n            @search-change=\"searchChange\"\n            @search-reset=\"searchReset\"\n            @selection-change=\"selectionChange\"\n            @current-change=\"currentChange\"\n            @size-change=\"sizeChange\"\n            @refresh-change=\"refreshChange\"\n            @on-load=\"onLoadParent\"\n          >\n            <template slot=\"menuLeft\">\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                icon=\"el-icon-delete\"\n                v-if=\"permission.dict_delete\"\n                plain\n                @click=\"handleDelete\"\n              >删 除\n              </el-button>\n            </template>\n            <template slot-scope=\"{row}\" slot=\"isSealed\">\n              <el-tag>{{row.isSealed===0?'否':'是'}}</el-tag>\n            </template>\n          </avue-crud>\n        </el-col>\n        <el-col :span=\"12\">\n          <avue-crud\n            :option=\"option\"\n            :table-loading=\"loading\"\n            :data=\"dataChild\"\n            :page=\"pageChild\"\n            ref=\"crudChild\"\n            v-model=\"formChild\"\n            :permission=\"permissionList\"\n            :before-open=\"beforeOpenChild\"\n            @row-del=\"rowDelChild\"\n            @row-update=\"rowUpdateChild\"\n            @row-save=\"rowSaveChild\"\n            @search-change=\"searchChangeChild\"\n            @search-reset=\"searchResetChild\"\n            @selection-change=\"selectionChangeChild\"\n            @current-change=\"currentChangeChild\"\n            @size-change=\"sizeChangeChild\"\n            @refresh-change=\"refreshChangeChild\"\n            @on-load=\"onLoadChild\"\n          >\n            <template slot=\"menuLeft\">\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                icon=\"el-icon-delete\"\n                v-if=\"permission.dict_delete\"\n                plain\n                @click=\"handleDelete\"\n              >删 除\n              </el-button>\n            </template>\n            <template slot-scope=\"{row}\" slot=\"isSealed\">\n              <el-tag>{{row.isSealed===0?'否':'是'}}</el-tag>\n            </template>\n          </avue-crud>\n        </el-col>\n      </el-row>\n    </basic-container>\n  </div>\n</template>\n\n<script>\n  import {\n    getParentList,\n    getChildList,\n    remove,\n    update,\n    add,\n    getDict,\n  } from \"@/api/system/dict\";\n  import {mapGetters} from \"vuex\";\n\n  export default {\n    data() {\n      return {\n        parentId: 0,\n        formParent: {},\n        formChild: {},\n        selectionList: [],\n        query: {},\n        loading: true,\n        pageParent: {\n          pageSize: 10,\n          pageSizes: [10, 30, 50, 100, 200],\n          currentPage: 1,\n          total: 0\n        },\n        pageChild: {\n          pageSize: 10,\n          pageSizes: [10, 30, 50, 100, 200],\n          currentPage: 1,\n          total: 0\n        },\n        dataParent: [],\n        dataChild: [],\n        option: {\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          tree: true,\n          border: true,\n          index: true,\n          selection: true,\n          viewBtn: true,\n          menuWidth: 300,\n          dialogWidth: 880,\n          column: [\n            {\n              label: \"字典编号\",\n              prop: \"code\",\n              search: true,\n              span: 24,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入字典编号\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"字典键值\",\n              prop: \"dictKey\",\n              type: \"number\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入字典键值\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"字典名称\",\n              prop: \"dictValue\",\n              search: true,\n              align: \"center\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入字典名称\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"字典排序\",\n              prop: \"sort\",\n              type: \"number\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入字典排序\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"封存\",\n              prop: \"isSealed\",\n              type: \"select\",\n              dicData: [\n                {\n                  label: \"否\",\n                  value: 0\n                },\n                {\n                  label: \"是\",\n                  value: 1\n                }\n              ],\n              slot: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择封存\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"字典备注\",\n              prop: \"remark\",\n              search: true,\n              hide: true\n            }\n          ]\n        }\n      };\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.dict_add, false),\n          viewBtn: this.vaildData(this.permission.dict_view, false),\n          delBtn: this.vaildData(this.permission.dict_delete, false),\n          editBtn: this.vaildData(this.permission.dict_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoadParent(this.pageParent);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoadParent(this.pageParent);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoadParent(this.pageParent);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      handleRowClick(row) {\n        this.parentId = row.id;\n        this.onLoadChild(this.pageChild);\n      },\n      searchReset() {\n        this.query = {};\n        this.onLoadParent(this.pageParent);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.pageParent.currentPage = 1;\n        this.onLoadParent(this.pageParent, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoadParent(this.pageParent);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getDict(this.formParent.id).then(res => {\n            this.formParent = res.data.data;\n          });\n        }\n        done();\n      },\n      currentChange(currentPage) {\n        this.pageParent.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.pageParent.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoadParent(this.page, this.query);\n      },\n      rowSaveChild(row, done, loading) {\n        add(row).then(() => {\n          this.onLoadChild(this.pageChild);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdateChild(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoadChild(this.pageChild);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDelChild(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoadChild(this.pageChild);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchResetChild() {\n        this.query = {};\n        this.onLoadChild(this.pageChild);\n      },\n      searchChangeChild(params, done) {\n        this.query = params;\n        this.pageChild.currentPage = 1;\n        this.onLoadChild(this.pageChild, params);\n        done();\n      },\n      selectionChangeChild(list) {\n        this.selectionList = list;\n      },\n      selectionClearChild() {\n        this.selectionList = [];\n        this.$refs.crudChild.toggleSelection();\n      },\n      handleDeleteChild() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoadChild(this.pageChild);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crudChild.toggleSelection();\n          });\n      },\n      beforeOpenChild(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getDict(this.formChild.id).then(res => {\n            this.formChild = res.data.data;\n          });\n        }\n        done();\n      },\n      currentChangeChild(currentPage) {\n        this.pageChild.currentPage = currentPage;\n      },\n      sizeChangeChild(pageSize) {\n        this.pageChild.pageSize = pageSize;\n      },\n      refreshChangeChild() {\n        this.onLoadChild(this.pageChild, this.query);\n      },\n      onLoadParent(page, params = {}) {\n        this.loading = true;\n        getParentList(\n          page.currentPage,\n          page.pageSize,\n          Object.assign(params, this.query)\n        ).then(res => {\n          const data = res.data.data;\n          this.pageParent.total = data.total;\n          this.dataParent = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      },\n      onLoadChild(page, params = {}) {\n        this.loading = true;\n        getChildList(\n          page.currentPage,\n          page.pageSize,\n          this.parentId,\n          Object.assign(params, this.query)\n        ).then(res => {\n          const data = res.data.data;\n          this.pageChild.total = data.total;\n          this.dataChild = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n\n<style>\n</style>\n"]}]}