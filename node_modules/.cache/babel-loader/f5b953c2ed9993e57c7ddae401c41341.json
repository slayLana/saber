{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/eslint-loader/index.js??ref--13-0!/Users/jiang/WorkSpace/code/bladex/saber/src/store/modules/dict.js","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/store/modules/dict.js","mtime":1666151205530},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/eslint-loader/index.js","mtime":1666157452476}],"contextDependencies":[],"result":["import { getStore, setStore } from '@/util/store';\nimport { getDictionary } from '@/api/system/dict';\nvar dict = {\n  state: {\n    flowRoutes: getStore({\n      name: 'flowRoutes'\n    }) || {}\n  },\n  actions: {\n    FlowRoutes: function FlowRoutes(_ref) {\n      var commit = _ref.commit;\n      return new Promise(function (resolve, reject) {\n        getDictionary({\n          code: 'flow'\n        }).then(function (res) {\n          commit('SET_FLOW_ROUTES', res.data.data);\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  },\n  mutations: {\n    SET_FLOW_ROUTES: function SET_FLOW_ROUTES(state, data) {\n      state.flowRoutes = data.map(function (item) {\n        return {\n          routeKey: \"\".concat(item.code, \"_\").concat(item.dictKey),\n          routeValue: item.remark\n        };\n      });\n      setStore({\n        name: 'flowRoutes',\n        content: state.flowRoutes\n      });\n    }\n  }\n};\nexport default dict;",{"version":3,"names":["getStore","setStore","getDictionary","dict","state","flowRoutes","name","actions","FlowRoutes","commit","Promise","resolve","reject","code","then","res","data","catch","error","mutations","SET_FLOW_ROUTES","map","item","routeKey","dictKey","routeValue","remark","content"],"sources":["/Users/jiang/WorkSpace/code/bladex/saber/src/store/modules/dict.js"],"sourcesContent":["import {getStore, setStore} from '@/util/store'\n\nimport {getDictionary} from '@/api/system/dict'\n\nconst dict = {\n  state: {\n    flowRoutes: getStore({name: 'flowRoutes'}) || {},\n  },\n  actions: {\n    FlowRoutes({commit}) {\n      return new Promise((resolve, reject) => {\n        getDictionary({code: 'flow'}).then(res => {\n          commit('SET_FLOW_ROUTES', res.data.data);\n          resolve();\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n  },\n  mutations: {\n    SET_FLOW_ROUTES: (state, data) => {\n      state.flowRoutes = data.map(item => {\n        return {\n          routeKey: `${item.code}_${item.dictKey}`,\n          routeValue: item.remark,\n        };\n      });\n      setStore({name: 'flowRoutes', content: state.flowRoutes})\n    },\n  }\n\n};\n\nexport default dict;\n"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,QAAlB,QAAiC,cAAjC;AAEA,SAAQC,aAAR,QAA4B,mBAA5B;AAEA,IAAMC,IAAI,GAAG;EACXC,KAAK,EAAE;IACLC,UAAU,EAAEL,QAAQ,CAAC;MAACM,IAAI,EAAE;IAAP,CAAD,CAAR,IAAkC;EADzC,CADI;EAIXC,OAAO,EAAE;IACPC,UADO,4BACc;MAAA,IAATC,MAAS,QAATA,MAAS;MACnB,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACtCV,aAAa,CAAC;UAACW,IAAI,EAAE;QAAP,CAAD,CAAb,CAA8BC,IAA9B,CAAmC,UAAAC,GAAG,EAAI;UACxCN,MAAM,CAAC,iBAAD,EAAoBM,GAAG,CAACC,IAAJ,CAASA,IAA7B,CAAN;UACAL,OAAO;QACR,CAHD,EAGGM,KAHH,CAGS,UAAAC,KAAK,EAAI;UAChBN,MAAM,CAACM,KAAD,CAAN;QACD,CALD;MAMD,CAPM,CAAP;IAQD;EAVM,CAJE;EAgBXC,SAAS,EAAE;IACTC,eAAe,EAAE,yBAAChB,KAAD,EAAQY,IAAR,EAAiB;MAChCZ,KAAK,CAACC,UAAN,GAAmBW,IAAI,CAACK,GAAL,CAAS,UAAAC,IAAI,EAAI;QAClC,OAAO;UACLC,QAAQ,YAAKD,IAAI,CAACT,IAAV,cAAkBS,IAAI,CAACE,OAAvB,CADH;UAELC,UAAU,EAAEH,IAAI,CAACI;QAFZ,CAAP;MAID,CALkB,CAAnB;MAMAzB,QAAQ,CAAC;QAACK,IAAI,EAAE,YAAP;QAAqBqB,OAAO,EAAEvB,KAAK,CAACC;MAApC,CAAD,CAAR;IACD;EATQ;AAhBA,CAAb;AA8BA,eAAeF,IAAf"}]}