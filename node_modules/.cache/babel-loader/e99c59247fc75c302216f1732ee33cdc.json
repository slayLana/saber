{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/util/demo/dict-classic.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/util/demo/dict-classic.vue","mtime":1666151205544},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getList, remove, update, add, getDict, getDictTree } from \"@/api/system/dict\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      selectionList: [],\n      query: {},\n      loading: true,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      option: {\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        tree: true,\n        border: true,\n        index: true,\n        selection: true,\n        viewBtn: true,\n        menuWidth: 300,\n        dialogWidth: 880,\n        column: [{\n          label: \"字典编号\",\n          prop: \"code\",\n          search: true,\n          span: 24,\n          rules: [{\n            required: true,\n            message: \"请输入字典编号\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典名称\",\n          prop: \"dictValue\",\n          search: true,\n          align: \"center\",\n          rules: [{\n            required: true,\n            message: \"请输入字典名称\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"上级字典\",\n          prop: \"parentId\",\n          type: \"tree\",\n          dicData: [],\n          hide: true,\n          props: {\n            label: \"title\"\n          },\n          rules: [{\n            required: false,\n            message: \"请选择上级字典\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"字典键值\",\n          prop: \"dictKey\",\n          type: \"number\",\n          rules: [{\n            required: true,\n            message: \"请输入字典键值\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典排序\",\n          prop: \"sort\",\n          type: \"number\",\n          rules: [{\n            required: true,\n            message: \"请输入字典排序\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"封存\",\n          prop: \"isSealed\",\n          type: \"select\",\n          dicData: [{\n            label: \"否\",\n            value: 0\n          }, {\n            label: \"是\",\n            value: 1\n          }],\n          slot: true,\n          rules: [{\n            required: true,\n            message: \"请选择封存\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典备注\",\n          prop: \"remark\",\n          search: true,\n          hide: true\n        }]\n      },\n      data: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.dict_add, false),\n        viewBtn: this.vaildData(this.permission.dict_view, false),\n        delBtn: this.vaildData(this.permission.dict_delete, false),\n        editBtn: this.vaildData(this.permission.dict_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  mounted: function mounted() {\n    var _this = this;\n\n    getDictTree().then(function (res) {\n      var column = _this.findObject(_this.optionChild.column, \"parentId\");\n\n      column.dicData = res.data.data;\n    });\n  },\n  methods: {\n    handleAdd: function handleAdd(row) {\n      this.$refs.crud.value.code = row.code;\n      this.$refs.crud.value.parentId = row.id;\n      this.$refs.crud.option.column.filter(function (item) {\n        if (item.prop === \"code\") {\n          item.value = row.code;\n          item.addDisabled = true;\n        }\n\n        if (item.prop === \"parentId\") {\n          item.value = row.id;\n          item.addDisabled = true;\n        }\n      });\n      this.$refs.crud.rowAdd();\n    },\n    rowSave: function rowSave(row, done, loading) {\n      var _this2 = this;\n\n      add(row).then(function () {\n        _this2.onLoad(_this2.page);\n\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this3 = this;\n\n      update(row).then(function () {\n        _this3.onLoad(_this3.page);\n\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this4 = this;\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this4.onLoad(_this4.page);\n\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    handleDelete: function handleDelete() {\n      var _this5 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this5.ids);\n      }).then(function () {\n        _this5.onLoad(_this5.page);\n\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this5.$refs.crud.toggleSelection();\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this6 = this;\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDict(this.form.id).then(function (res) {\n          _this6.form = res.data.data;\n        });\n      }\n\n      done();\n    },\n    beforeClose: function beforeClose(done) {\n      this.$refs.crud.tableForm = {};\n      this.$refs.crud.value.code = \"\";\n      this.$refs.crud.value.parentId = \"\";\n      this.$refs.crud.value.addDisabled = false;\n      this.$refs.crud.option.column.filter(function (item) {\n        if (item.prop === \"code\") {\n          item.value = \"\";\n          item.addDisabled = false;\n        }\n\n        if (item.prop === \"parentId\") {\n          item.value = \"\";\n          item.addDisabled = false;\n        }\n      });\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this7 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(function (res) {\n        _this7.data = res.data.data;\n        _this7.loading = false;\n\n        _this7.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":"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","names":["getList","remove","update","add","getDict","getDictTree","data","form","selectionList","query","loading","page","pageSize","currentPage","total","option","tip","searchShow","searchMenuSpan","tree","border","index","selection","viewBtn","menuWidth","dialogWidth","column","label","prop","search","span","rules","required","message","trigger","align","type","dicData","hide","props","value","slot","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","mounted","methods","handleAdd","row","item","rowSave","done","window","rowUpdate","rowDel","confirmButtonText","cancelButtonText","then","searchReset","searchChange","params","selectionChange","list","selectionClear","handleDelete","beforeOpen","beforeClose","currentChange","sizeChange","refreshChange","onLoad","Object"],"sourceRoot":"src/views/util/demo","sources":["dict-classic.vue"],"sourcesContent":["<template>\n  <basic-container>\n    <avue-crud\n      :option=\"option\"\n      :table-loading=\"loading\"\n      :data=\"data\"\n      ref=\"crud\"\n      v-model=\"form\"\n      :permission=\"permissionList\"\n      :before-open=\"beforeOpen\"\n      :before-close=\"beforeClose\"\n      @row-del=\"rowDel\"\n      @row-update=\"rowUpdate\"\n      @row-save=\"rowSave\"\n      @search-change=\"searchChange\"\n      @search-reset=\"searchReset\"\n      @selection-change=\"selectionChange\"\n      @current-change=\"currentChange\"\n      @size-change=\"sizeChange\"\n      @refresh-change=\"refreshChange\"\n      @on-load=\"onLoad\"\n    >\n      <template slot=\"menuLeft\">\n        <el-button\n          type=\"danger\"\n          size=\"small\"\n          icon=\"el-icon-delete\"\n          v-if=\"permission.dict_delete\"\n          plain\n          @click=\"handleDelete\"\n        >删 除\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\" slot=\"isSealed\">\n        <el-tag>{{row.isSealed===0?'否':'是'}}</el-tag>\n      </template>\n      <template slot-scope=\"scope\" slot=\"menu\">\n        <el-button\n          type=\"text\"\n          icon=\"el-icon-check\"\n          size=\"small\"\n          @click.stop=\"handleAdd(scope.row,scope.index)\"\n        >新增子项\n        </el-button>\n      </template>\n    </avue-crud>\n  </basic-container>\n</template>\n\n<script>\n  import {\n    getList,\n    remove,\n    update,\n    add,\n    getDict,\n    getDictTree\n  } from \"@/api/system/dict\";\n  import {mapGetters} from \"vuex\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionList: [],\n        query: {},\n        loading: true,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        option: {\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          tree: true,\n          border: true,\n          index: true,\n          selection: true,\n          viewBtn: true,\n          menuWidth: 300,\n          dialogWidth: 880,\n          column: [\n            {\n              label: \"字典编号\",\n              prop: \"code\",\n              search: true,\n              span: 24,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入字典编号\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"字典名称\",\n              prop: \"dictValue\",\n              search: true,\n              align: \"center\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入字典名称\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"上级字典\",\n              prop: \"parentId\",\n              type: \"tree\",\n              dicData: [],\n              hide: true,\n              props: {\n                label: \"title\"\n              },\n              rules: [\n                {\n                  required: false,\n                  message: \"请选择上级字典\",\n                  trigger: \"click\"\n                }\n              ]\n            },\n            {\n              label: \"字典键值\",\n              prop: \"dictKey\",\n              type: \"number\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入字典键值\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"字典排序\",\n              prop: \"sort\",\n              type: \"number\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入字典排序\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"封存\",\n              prop: \"isSealed\",\n              type: \"select\",\n              dicData: [\n                {\n                  label: \"否\",\n                  value: 0\n                },\n                {\n                  label: \"是\",\n                  value: 1\n                }\n              ],\n              slot: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择封存\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"字典备注\",\n              prop: \"remark\",\n              search: true,\n              hide: true\n            }\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.dict_add, false),\n          viewBtn: this.vaildData(this.permission.dict_view, false),\n          delBtn: this.vaildData(this.permission.dict_delete, false),\n          editBtn: this.vaildData(this.permission.dict_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    mounted() {\n      getDictTree().then(res => {\n        const column = this.findObject(this.optionChild.column, \"parentId\");\n        column.dicData = res.data.data;\n      });\n    },\n    methods: {\n      handleAdd(row) {\n        this.$refs.crud.value.code = row.code;\n        this.$refs.crud.value.parentId = row.id;\n        this.$refs.crud.option.column.filter(item => {\n          if (item.prop === \"code\") {\n            item.value = row.code;\n            item.addDisabled = true;\n          }\n          if (item.prop === \"parentId\") {\n            item.value = row.id;\n            item.addDisabled = true;\n          }\n        });\n        this.$refs.crud.rowAdd();\n      },\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getDict(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      beforeClose(done) {\n        this.$refs.crud.tableForm = {};\n        this.$refs.crud.value.code = \"\";\n        this.$refs.crud.value.parentId = \"\";\n        this.$refs.crud.value.addDisabled = false;\n        this.$refs.crud.option.column.filter(item => {\n          if (item.prop === \"code\") {\n            item.value = \"\";\n            item.addDisabled = false;\n          }\n          if (item.prop === \"parentId\") {\n            item.value = \"\";\n            item.addDisabled = false;\n          }\n        });\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getList(\n          page.currentPage,\n          page.pageSize,\n          Object.assign(params, this.query)\n        ).then(res => {\n          this.data = res.data.data;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n\n<style>\n</style>\n"]}]}