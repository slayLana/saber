{"remainingRequest":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/bladex/saber/src/views/desk/notice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/bladex/saber/src/views/desk/notice.vue","mtime":1666151205538},{"path":"/Users/jiang/WorkSpace/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getList, remove, update, add, getNotice } from \"@/api/desk/notice\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      query: {},\n      loading: true,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      selectionList: [],\n      option: {\n        height: 'auto',\n        calcHeight: 30,\n        dialogWidth: 950,\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        viewBtn: true,\n        selection: true,\n        excelBtn: true,\n        dialogClickModal: false,\n        column: [{\n          label: \"通知标题\",\n          prop: \"title\",\n          span: 24,\n          row: true,\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入通知标题\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"通知类型\",\n          type: \"select\",\n          dicUrl: \"/api/blade-system/dict/dictionary?code=notice\",\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          dataType: \"number\",\n          slot: true,\n          prop: \"category\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入通知类型\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"通知时间\",\n          prop: \"releaseTimeRange\",\n          type: \"datetime\",\n          format: \"yyyy-MM-dd hh:mm:ss\",\n          valueFormat: \"yyyy-MM-dd hh:mm:ss\",\n          searchRange: true,\n          hide: true,\n          addDisplay: false,\n          editDisplay: false,\n          viewDisplay: false,\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入通知时间\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"通知日期\",\n          prop: \"releaseTime\",\n          type: \"date\",\n          format: \"yyyy-MM-dd hh:mm:ss\",\n          valueFormat: \"yyyy-MM-dd hh:mm:ss\",\n          rules: [{\n            required: true,\n            message: \"请输入通知日期\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"通知内容\",\n          prop: \"content\",\n          component: 'AvueUeditor',\n          options: {\n            action: '/api/blade-resource/oss/endpoint/put-file',\n            props: {\n              res: \"data\",\n              url: \"link\"\n            }\n          },\n          hide: true,\n          minRows: 6,\n          span: 24\n        }]\n      },\n      data: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.notice_add, false),\n        viewBtn: this.vaildData(this.permission.notice_view, false),\n        delBtn: this.vaildData(this.permission.notice_delete, false),\n        editBtn: this.vaildData(this.permission.notice_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    rowSave: function rowSave(row, done, loading) {\n      var _this = this;\n\n      add(row).then(function () {\n        _this.onLoad(_this.page);\n\n        _this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this2 = this;\n\n      update(row).then(function () {\n        _this2.onLoad(_this2.page);\n\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this3 = this;\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this3.onLoad(_this3.page);\n\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    handleDelete: function handleDelete() {\n      var _this4 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this4.ids);\n      }).then(function () {\n        _this4.onLoad(_this4.page);\n\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this4.$refs.crud.toggleSelection();\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this5 = this;\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getNotice(this.form.id).then(function (res) {\n          _this5.form = res.data.data;\n        });\n      }\n\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this6 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var releaseTimeRange = this.query.releaseTimeRange;\n\n      var values = _objectSpread(_objectSpread({}, params), this.query);\n\n      if (releaseTimeRange) {\n        values = _objectSpread(_objectSpread({}, values), {}, {\n          releaseTime_datege: releaseTimeRange[0],\n          releaseTime_datelt: releaseTimeRange[1]\n        });\n        values.releaseTimeRange = null;\n      }\n\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, values).then(function (res) {\n        var data = res.data.data;\n        _this6.page.total = data.total;\n        _this6.data = data.records;\n        _this6.loading = false;\n\n        _this6.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":"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","names":["data","form","query","loading","page","pageSize","currentPage","total","selectionList","option","height","calcHeight","dialogWidth","tip","searchShow","searchMenuSpan","border","index","viewBtn","selection","excelBtn","dialogClickModal","column","label","prop","span","row","search","rules","required","message","trigger","type","dicUrl","props","value","dataType","slot","format","valueFormat","searchRange","hide","addDisplay","editDisplay","viewDisplay","component","options","action","res","url","minRows","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","methods","rowSave","done","add","window","rowUpdate","update","rowDel","confirmButtonText","cancelButtonText","then","searchReset","searchChange","params","selectionChange","list","selectionClear","handleDelete","beforeOpen","getNotice","currentChange","sizeChange","refreshChange","onLoad","values","releaseTime_datege","releaseTime_datelt","getList"],"sourceRoot":"src/views/desk","sources":["notice.vue"],"sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               :page.sync=\"page\"\n               ref=\"crud\"\n               @row-del=\"rowDel\"\n               v-model=\"form\"\n               :permission=\"permissionList\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               :before-open=\"beforeOpen\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\">\n      <template slot=\"menuLeft\">\n        <el-button type=\"danger\"\n                   size=\"small\"\n                   icon=\"el-icon-delete\"\n                   plain\n                   v-if=\"permission.notice_delete\"\n                   @click=\"handleDelete\">删 除\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\"\n                slot=\"category\">\n        <el-tag>{{row.categoryName}}</el-tag>\n      </template>\n    </avue-crud>\n  </basic-container>\n</template>\n\n<script>\n  import {getList, remove, update, add, getNotice} from \"@/api/desk/notice\";\n  import {mapGetters} from \"vuex\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        query: {},\n        loading: true,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        selectionList: [],\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          dialogWidth: 950,\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          viewBtn: true,\n          selection: true,\n          excelBtn: true,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"通知标题\",\n              prop: \"title\",\n              span: 24,\n              row: true,\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入通知标题\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"通知类型\",\n              type: \"select\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=notice\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              slot: true,\n              prop: \"category\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入通知类型\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"通知时间\",\n              prop: \"releaseTimeRange\",\n              type: \"datetime\",\n              format: \"yyyy-MM-dd hh:mm:ss\",\n              valueFormat: \"yyyy-MM-dd hh:mm:ss\",\n              searchRange:true,\n              hide: true,\n              addDisplay: false,\n              editDisplay: false,\n              viewDisplay: false,\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入通知时间\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"通知日期\",\n              prop: \"releaseTime\",\n              type: \"date\",\n              format: \"yyyy-MM-dd hh:mm:ss\",\n              valueFormat: \"yyyy-MM-dd hh:mm:ss\",\n              rules: [{\n                required: true,\n                message: \"请输入通知日期\",\n                trigger: \"click\"\n              }]\n            },\n            {\n              label: \"通知内容\",\n              prop: \"content\",\n              component: 'AvueUeditor',\n              options: {\n                action: '/api/blade-resource/oss/endpoint/put-file',\n                props: {\n                  res: \"data\",\n                  url: \"link\",\n                }\n              },\n              hide: true,\n              minRows: 6,\n              span: 24,\n            }\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.notice_add, false),\n          viewBtn: this.vaildData(this.permission.notice_view, false),\n          delBtn: this.vaildData(this.permission.notice_delete, false),\n          editBtn: this.vaildData(this.permission.notice_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getNotice(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        const {releaseTimeRange} = this.query;\n        let values = {\n          ...params,\n          ...this.query\n        };\n        if (releaseTimeRange) {\n          values = {\n            ...values,\n            releaseTime_datege: releaseTimeRange[0],\n            releaseTime_datelt: releaseTimeRange[1],\n          };\n          values.releaseTimeRange = null;\n        }\n        this.loading = true;\n        getList(page.currentPage, page.pageSize, values).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n\n<style>\n</style>\n"]}]}