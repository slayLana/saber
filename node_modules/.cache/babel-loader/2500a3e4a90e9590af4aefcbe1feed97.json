{"remainingRequest":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/bladex/saber/src/views/base/region.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/bladex/saber/src/views/base/region.vue","mtime":1666151205538},{"path":"/Users/jiang/WorkSpace/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getLazyTree, getDetail, submit, remove } from \"@/api/base/region\";\nimport { exportBlob } from \"@/api/common\";\nimport { mapGetters } from \"vuex\";\nimport { validatenull } from \"@/util/validate\";\nimport { downloadXls } from \"@/util/util\";\nimport { dateNow } from \"@/util/date\";\nimport { getToken } from \"@/util/auth\";\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\nexport default {\n  data: function data() {\n    return {\n      topCode: '00',\n      treeCode: '',\n      treeParentCode: '',\n      treeData: [],\n      treeOption: {\n        nodeKey: 'id',\n        lazy: true,\n        treeLoad: function treeLoad(node, resolve) {\n          var parentCode = node.level === 0 ? \"00\" : node.data.id;\n          getLazyTree(parentCode).then(function (res) {\n            resolve(res.data.data.map(function (item) {\n              return _objectSpread(_objectSpread({}, item), {}, {\n                leaf: !item.hasChildren\n              });\n            }));\n          });\n        },\n        addBtn: false,\n        menu: false,\n        size: 'small',\n        props: {\n          labelText: '标题',\n          label: 'title',\n          value: 'value',\n          children: 'children'\n        }\n      },\n      regionForm: {},\n      regionOption: {\n        labelWidth: 100,\n        column: [{\n          label: \"父区划编号\",\n          prop: \"parentCode\",\n          span: 24,\n          disabled: true,\n          rules: [{\n            required: true,\n            message: \"请输入父区划编号\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"父区划名称\",\n          prop: \"parentName\",\n          span: 24,\n          disabled: true\n        }, {\n          label: \"区划编号\",\n          prop: \"code\",\n          formslot: true,\n          span: 24,\n          rules: [{\n            required: true,\n            message: \"请输入区划编号\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"区划子编号\",\n          prop: \"subCode\",\n          display: false\n        }, {\n          label: \"区划名称\",\n          prop: \"name\",\n          span: 24,\n          rules: [{\n            required: true,\n            message: \"请输入区划名称\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"区划等级\",\n          prop: \"regionLevel\",\n          type: \"radio\",\n          dicUrl: \"/api/blade-system/dict/dictionary?code=region\",\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          dataType: \"number\",\n          span: 24,\n          rules: [{\n            required: true,\n            message: \"请选择区划等级\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"区划排序\",\n          prop: \"sort\",\n          type: \"number\",\n          span: 24,\n          rules: [{\n            required: true,\n            message: \"请输入区划排序\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"区划备注\",\n          prop: \"remark\",\n          type: \"textarea\",\n          minRows: 6,\n          span: 24\n        }]\n      },\n      excelBox: false,\n      excelForm: {},\n      excelOption: {\n        submitBtn: false,\n        emptyBtn: false,\n        column: [{\n          label: '模板上传',\n          prop: 'excelFile',\n          type: 'upload',\n          drag: true,\n          loadText: '模板上传中，请稍等',\n          span: 24,\n          propsHttp: {\n            res: 'data'\n          },\n          tip: '请上传 .xls,.xlsx 标准格式文件',\n          action: \"/api/blade-system/region/import-region\"\n        }, {\n          label: \"数据覆盖\",\n          prop: \"isCovered\",\n          type: \"switch\",\n          align: \"center\",\n          width: 80,\n          dicData: [{\n            label: \"否\",\n            value: 0\n          }, {\n            label: \"是\",\n            value: 1\n          }],\n          value: 0,\n          slot: true,\n          rules: [{\n            required: true,\n            message: \"请选择是否覆盖\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: '模板下载',\n          prop: 'excelTemplate',\n          formslot: true,\n          span: 24\n        }]\n      },\n      debugBox: false,\n      debugForm: {},\n      debugOption: {\n        labelWidth: 50,\n        submitBtn: false,\n        emptyBtn: false,\n        column: [{\n          label: '省份',\n          prop: 'province',\n          type: 'select',\n          props: {\n            label: 'name',\n            value: 'code'\n          },\n          cascader: ['city'],\n          dicUrl: '/api/blade-system/region/select',\n          span: 24\n        }, {\n          label: '地市',\n          prop: 'city',\n          type: 'select',\n          props: {\n            label: 'name',\n            value: 'code'\n          },\n          cascader: ['district'],\n          dicFlag: false,\n          dicUrl: '/api/blade-system/region/select?code={{province}}',\n          span: 24\n        }, {\n          label: '区县',\n          prop: 'district',\n          type: 'select',\n          props: {\n            label: 'name',\n            value: 'code'\n          },\n          dicFlag: false,\n          dicUrl: '/api/blade-system/region/select?code={{city}}',\n          span: 24\n        }]\n      }\n    };\n  },\n  watch: {\n    'regionForm.subCode': function regionFormSubCode() {\n      this.regionForm.code = this.regionForm.parentCode + this.regionForm.subCode;\n    },\n    'excelForm.isCovered': function excelFormIsCovered() {\n      if (this.excelForm.isCovered !== '') {\n        var column = this.findObject(this.excelOption.column, \"excelFile\");\n        column.action = \"/api/blade-system/region/import-region?isCovered=\".concat(this.excelForm.isCovered);\n      }\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.region_add, false),\n        viewBtn: this.vaildData(this.permission.region_view, false),\n        delBtn: this.vaildData(this.permission.region_delete, false),\n        editBtn: this.vaildData(this.permission.region_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    initTree: function initTree() {\n      var _this = this;\n\n      this.treeData = [];\n      getLazyTree(this.topCode).then(function (res) {\n        _this.treeData = res.data.data.map(function (item) {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            leaf: !item.hasChildren\n          });\n        });\n      });\n    },\n    nodeClick: function nodeClick(data) {\n      var _this2 = this;\n\n      var column = this.findObject(this.regionOption.column, \"parentCode\");\n      column.disabled = true;\n      this.treeCode = data.id;\n      this.treeParentCode = data.parentId;\n      getDetail(this.treeCode).then(function (res) {\n        _this2.regionForm = res.data.data;\n        _this2.regionForm.subCode = _this2.regionForm.code.replace(_this2.regionForm.parentCode, '');\n      });\n    },\n    addChildren: function addChildren() {\n      if (validatenull(this.regionForm.code) || validatenull(this.regionForm.name)) {\n        this.$message.warning(\"请先选择一项区划\");\n        return;\n      }\n\n      this.regionForm.parentCode = this.regionForm.code;\n      this.regionForm.parentName = this.regionForm.name;\n      this.regionForm.code = '';\n      this.regionForm.subCode = '';\n      this.regionForm.name = '';\n      this.regionForm.regionLevel = this.regionForm.regionLevel === 5 ? 5 : this.regionForm.regionLevel + 1;\n    },\n    handleSubmit: function handleSubmit(form, done, loading) {\n      var _this3 = this;\n\n      var parentCode = form.parentCode === this.topCode ? '' : form.parentCode;\n      form.code = parentCode + form.subCode;\n      submit(form).then(function () {\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this3.initTree();\n\n        _this3.regionForm.subCode = '';\n\n        _this3.$refs.form.resetForm();\n\n        done();\n      }, function (error) {\n        loading();\n        window.console.log(error);\n      });\n    },\n    handleDelete: function handleDelete() {\n      var _this4 = this;\n\n      if (validatenull(this.regionForm.code)) {\n        this.$message.warning(\"请先选择一项区划\");\n        return;\n      }\n\n      this.$confirm(\"\\u786E\\u5B9A\\u5C06 [\".concat(this.regionForm.name, \"] \\u6570\\u636E\\u5220\\u9664?\"), {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this4.treeCode);\n      }).then(function () {\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this4.initTree();\n\n        _this4.regionForm.subCode = '';\n\n        _this4.$refs.form.resetForm();\n      });\n    },\n    uploadAfter: function uploadAfter(res, done, loading, column) {\n      window.console.log(column);\n      this.excelBox = false;\n      this.initTree();\n      done();\n    },\n    handleDebug: function handleDebug() {\n      this.debugBox = true;\n    },\n    handleImport: function handleImport() {\n      this.excelBox = true;\n    },\n    handleExport: function handleExport() {\n      var _this5 = this;\n\n      this.$confirm(\"是否导出行政区划数据?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        NProgress.start();\n        exportBlob(\"/api/blade-system/region/export-region?\".concat(_this5.website.tokenHeader, \"=\").concat(getToken())).then(function (res) {\n          downloadXls(res.data, \"\\u884C\\u653F\\u533A\\u5212\\u6570\\u636E\".concat(dateNow(), \".xlsx\"));\n          NProgress.done();\n        });\n      });\n    },\n    handleTemplate: function handleTemplate() {\n      exportBlob(\"/api/blade-system/region/export-template?\".concat(this.website.tokenHeader, \"=\").concat(getToken())).then(function (res) {\n        downloadXls(res.data, \"行政区划模板.xlsx\");\n      });\n    }\n  }\n};",{"version":3,"mappings":"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","names":["data","topCode","treeCode","treeParentCode","treeData","treeOption","nodeKey","lazy","treeLoad","getLazyTree","resolve","item","leaf","addBtn","menu","size","props","labelText","label","value","children","regionForm","regionOption","labelWidth","column","prop","span","disabled","rules","required","message","trigger","formslot","display","type","dicUrl","dataType","minRows","excelBox","excelForm","excelOption","submitBtn","emptyBtn","drag","loadText","propsHttp","res","tip","action","align","width","dicData","slot","debugBox","debugForm","debugOption","cascader","dicFlag","watch","computed","mapGetters","permissionList","viewBtn","delBtn","editBtn","ids","methods","initTree","nodeClick","getDetail","addChildren","handleSubmit","form","done","loading","submit","window","handleDelete","confirmButtonText","cancelButtonText","then","uploadAfter","handleDebug","handleImport","handleExport","NProgress","exportBlob","downloadXls","handleTemplate"],"sourceRoot":"src/views/base","sources":["region.vue"],"sourcesContent":["<template>\n  <el-row>\n    <el-col :span=\"9\">\n      <div class=\"box\">\n        <el-scrollbar>\n          <basic-container>\n            <avue-tree :option=\"treeOption\" :data=\"treeData\" @node-click=\"nodeClick\"/>\n          </basic-container>\n        </el-scrollbar>\n      </div>\n    </el-col>\n    <el-col :span=\"15\">\n      <basic-container>\n        <el-button-group>\n          <el-button v-if=\"permission.region_add\" type=\"primary\" size=\"small\" icon=\"el-icon-circle-plus-outline\" @click=\"addChildren\">新增下级</el-button>\n          <el-button v-if=\"permission.region_delete\" type=\"primary\" size=\"small\" icon=\"el-icon-delete\" @click=\"handleDelete\">删除</el-button>\n          <el-button v-if=\"permission.region_import\" type=\"primary\" size=\"small\" icon=\"el-icon-upload2\" @click=\"handleImport\">导入</el-button>\n          <el-button v-if=\"permission.region_export\" type=\"primary\" size=\"small\" icon=\"el-icon-download\" @click=\"handleExport\">导出</el-button>\n          <el-button v-if=\"permission.region_debug\" type=\"primary\" size=\"small\" icon=\"el-icon-video-play\" @click=\"handleDebug\">调试</el-button>\n        </el-button-group>\n      </basic-container>\n      <basic-container>\n        <avue-form ref=\"form\" :option=\"regionOption\" v-model=\"regionForm\" @submit=\"handleSubmit\">\n          <template slot=\"code\" slot-scope=\"{}\">\n            <el-input placeholder=\"请输入 区划子编号\" v-model=\"regionForm.subCode\">\n              <template slot=\"prepend\">{{regionForm.parentCode}}</template>\n            </el-input>\n          </template>\n        </avue-form>\n        <el-dialog title=\"行政区划数据导入\"\n                   append-to-body\n                   :visible.sync=\"excelBox\"\n                   width=\"555px\">\n          <avue-form :option=\"excelOption\" v-model=\"excelForm\" :upload-after=\"uploadAfter\">\n            <template slot=\"excelTemplate\">\n              <el-button type=\"primary\" @click=\"handleTemplate\">\n                点击下载<i class=\"el-icon-download el-icon--right\"></i>\n              </el-button>\n            </template>\n          </avue-form>\n        </el-dialog>\n        <el-dialog title=\"行政区划数据调试\"\n                   append-to-body\n                   :visible.sync=\"debugBox\"\n                   width=\"350px\">\n          <avue-form :option=\"debugOption\" v-model=\"debugForm\"/>\n        </el-dialog>\n      </basic-container>\n    </el-col>\n  </el-row>\n</template>\n\n<script>\n  import {getLazyTree, getDetail, submit, remove} from \"@/api/base/region\";\n  import {exportBlob} from \"@/api/common\";\n  import {mapGetters} from \"vuex\";\n  import {validatenull} from \"@/util/validate\";\n  import {downloadXls} from \"@/util/util\";\n  import {dateNow} from \"@/util/date\";\n  import {getToken} from \"@/util/auth\";\n  import NProgress from 'nprogress';\n  import 'nprogress/nprogress.css';\n\n  export default {\n    data() {\n      return {\n        topCode: '00',\n        treeCode: '',\n        treeParentCode: '',\n        treeData: [],\n        treeOption: {\n          nodeKey: 'id',\n          lazy: true,\n          treeLoad: function (node, resolve) {\n            const parentCode = (node.level === 0) ? \"00\" : node.data.id;\n            getLazyTree(parentCode).then(res => {\n              resolve(res.data.data.map(item => {\n                return {\n                  ...item,\n                  leaf: !item.hasChildren\n                }\n              }))\n            });\n          },\n          addBtn: false,\n          menu: false,\n          size: 'small',\n          props: {\n            labelText: '标题',\n            label: 'title',\n            value: 'value',\n            children: 'children'\n          }\n        },\n        regionForm: {},\n        regionOption: {\n          labelWidth: 100,\n          column: [\n            {\n              label: \"父区划编号\",\n              prop: \"parentCode\",\n              span: 24,\n              disabled: true,\n              rules: [{\n                required: true,\n                message: \"请输入父区划编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"父区划名称\",\n              prop: \"parentName\",\n              span: 24,\n              disabled: true,\n            },\n            {\n              label: \"区划编号\",\n              prop: \"code\",\n              formslot: true,\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请输入区划编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划子编号\",\n              prop: \"subCode\",\n              display: false,\n            },\n            {\n              label: \"区划名称\",\n              prop: \"name\",\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请输入区划名称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划等级\",\n              prop: \"regionLevel\",\n              type: \"radio\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=region\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请选择区划等级\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划排序\",\n              prop: \"sort\",\n              type: \"number\",\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请输入区划排序\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划备注\",\n              prop: \"remark\",\n              type: \"textarea\",\n              minRows: 6,\n              span: 24,\n            },\n          ]\n        },\n        excelBox: false,\n        excelForm: {},\n        excelOption: {\n          submitBtn: false,\n          emptyBtn: false,\n          column: [\n            {\n              label: '模板上传',\n              prop: 'excelFile',\n              type: 'upload',\n              drag: true,\n              loadText: '模板上传中，请稍等',\n              span: 24,\n              propsHttp: {\n                res: 'data'\n              },\n              tip: '请上传 .xls,.xlsx 标准格式文件',\n              action: \"/api/blade-system/region/import-region\"\n            },\n            {\n              label: \"数据覆盖\",\n              prop: \"isCovered\",\n              type: \"switch\",\n              align: \"center\",\n              width: 80,\n              dicData: [\n                {\n                  label: \"否\",\n                  value: 0\n                },\n                {\n                  label: \"是\",\n                  value: 1\n                }\n              ],\n              value: 0,\n              slot: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择是否覆盖\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: '模板下载',\n              prop: 'excelTemplate',\n              formslot: true,\n              span: 24,\n            }\n          ]\n        },\n        debugBox: false,\n        debugForm: {},\n        debugOption: {\n          labelWidth: 50,\n          submitBtn: false,\n          emptyBtn: false,\n          column: [\n            {\n              label: '省份',\n              prop: 'province',\n              type: 'select',\n              props: {\n                label: 'name',\n                value: 'code'\n              },\n              cascader: ['city'],\n              dicUrl: '/api/blade-system/region/select',\n              span: 24,\n            },\n            {\n              label: '地市',\n              prop: 'city',\n              type: 'select',\n              props: {\n                label: 'name',\n                value: 'code'\n              },\n              cascader: ['district'],\n              dicFlag: false,\n              dicUrl: '/api/blade-system/region/select?code={{province}}',\n              span: 24,\n            },\n            {\n              label: '区县',\n              prop: 'district',\n              type: 'select',\n              props: {\n                label: 'name',\n                value: 'code'\n              },\n              dicFlag: false,\n              dicUrl: '/api/blade-system/region/select?code={{city}}',\n              span: 24,\n            }\n          ]\n        }\n      };\n    },\n    watch: {\n      'regionForm.subCode'() {\n        this.regionForm.code = this.regionForm.parentCode + this.regionForm.subCode;\n      },\n      'excelForm.isCovered'() {\n        if (this.excelForm.isCovered !== '') {\n          const column = this.findObject(this.excelOption.column, \"excelFile\");\n          column.action = `/api/blade-system/region/import-region?isCovered=${this.excelForm.isCovered}`;\n        }\n      }\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.region_add, false),\n          viewBtn: this.vaildData(this.permission.region_view, false),\n          delBtn: this.vaildData(this.permission.region_delete, false),\n          editBtn: this.vaildData(this.permission.region_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      initTree() {\n        this.treeData = [];\n        getLazyTree(this.topCode).then(res => {\n          this.treeData = res.data.data.map(item => {\n            return {\n              ...item,\n              leaf: !item.hasChildren\n            }\n          })\n        });\n      },\n      nodeClick(data) {\n        const column = this.findObject(this.regionOption.column, \"parentCode\");\n        column.disabled = true;\n        this.treeCode = data.id;\n        this.treeParentCode = data.parentId;\n        getDetail(this.treeCode).then(res => {\n          this.regionForm = res.data.data;\n          this.regionForm.subCode = this.regionForm.code.replace(this.regionForm.parentCode, '');\n        })\n      },\n      addChildren() {\n        if (validatenull(this.regionForm.code) || validatenull(this.regionForm.name)) {\n          this.$message.warning(\"请先选择一项区划\");\n          return;\n        }\n        this.regionForm.parentCode = this.regionForm.code;\n        this.regionForm.parentName = this.regionForm.name;\n        this.regionForm.code = '';\n        this.regionForm.subCode = '';\n        this.regionForm.name = '';\n        this.regionForm.regionLevel = (this.regionForm.regionLevel === 5) ? 5 : this.regionForm.regionLevel + 1;\n      },\n      handleSubmit(form, done, loading) {\n        const parentCode = form.parentCode === this.topCode ? '' : form.parentCode;\n        form.code = parentCode + form.subCode;\n        submit(form).then(() => {\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          this.initTree();\n          this.regionForm.subCode = '';\n          this.$refs.form.resetForm();\n          done();\n        }, error => {\n          loading();\n          window.console.log(error);\n        });\n      },\n      handleDelete() {\n        if (validatenull(this.regionForm.code)) {\n          this.$message.warning(\"请先选择一项区划\");\n          return;\n        }\n        this.$confirm(`确定将 [${this.regionForm.name}] 数据删除?`, {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.treeCode);\n          })\n          .then(() => {\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.initTree();\n            this.regionForm.subCode = '';\n            this.$refs.form.resetForm();\n          });\n      },\n      uploadAfter(res, done, loading, column) {\n        window.console.log(column);\n        this.excelBox = false;\n        this.initTree();\n        done();\n      },\n      handleDebug() {\n        this.debugBox = true;\n      },\n      handleImport() {\n        this.excelBox = true;\n      },\n      handleExport() {\n        this.$confirm(\"是否导出行政区划数据?\", \"提示\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        }).then(() => {\n          NProgress.start();\n          exportBlob(`/api/blade-system/region/export-region?${this.website.tokenHeader}=${getToken()}`).then(res => {\n            downloadXls(res.data, `行政区划数据${dateNow()}.xlsx`);\n            NProgress.done();\n          })\n        });\n      },\n      handleTemplate() {\n        exportBlob(`/api/blade-system/region/export-template?${this.website.tokenHeader}=${getToken()}`).then(res => {\n          downloadXls(res.data, \"行政区划模板.xlsx\");\n        })\n      },\n    }\n  };\n</script>\n\n<style>\n  .box {\n    height: 800px;\n  }\n\n  .el-scrollbar {\n    height: 100%;\n  }\n\n  .box .el-scrollbar__wrap {\n    overflow: scroll;\n  }\n</style>\n"]}]}