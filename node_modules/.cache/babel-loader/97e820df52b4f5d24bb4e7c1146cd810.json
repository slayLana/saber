{"remainingRequest":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/bladex/saber/src/page/index/top/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/bladex/saber/src/page/index/top/index.vue","mtime":1666151205526},{"path":"/Users/jiang/WorkSpace/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { resetRouter } from '@/router/router';\nimport { mapGetters, mapState } from \"vuex\";\nimport { fullscreenToggel, listenfullscreen } from \"@/util/util\";\nimport topLock from \"./top-lock\";\nimport topMenu from \"./top-menu\";\nimport topSearch from \"./top-search\";\nimport topTheme from \"./top-theme\";\nimport topLogs from \"./top-logs\";\nimport topColor from \"./top-color\";\nimport topNotice from \"./top-notice\";\nimport topLang from \"./top-lang\";\nexport default {\n  components: {\n    topLock: topLock,\n    topMenu: topMenu,\n    topSearch: topSearch,\n    topTheme: topTheme,\n    topLogs: topLogs,\n    topColor: topColor,\n    topNotice: topNotice,\n    topLang: topLang\n  },\n  name: \"top\",\n  data: function data() {\n    return {\n      userBox: false,\n      userForm: {\n        deptId: '',\n        roleId: ''\n      },\n      userOption: {\n        labelWidth: 70,\n        submitBtn: true,\n        emptyBtn: false,\n        submitText: '切换',\n        column: [{\n          label: '部门',\n          prop: 'deptId',\n          type: 'select',\n          props: {\n            label: 'deptName',\n            value: 'id'\n          },\n          dicUrl: '/api/blade-system/dept/select',\n          span: 24,\n          display: false,\n          rules: [{\n            required: true,\n            message: \"请选择部门\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: '角色',\n          prop: 'roleId',\n          type: 'select',\n          props: {\n            label: 'roleName',\n            value: 'id'\n          },\n          dicUrl: '/api/blade-system/role/select',\n          span: 24,\n          display: false,\n          rules: [{\n            required: true,\n            message: \"请选择角色\",\n            trigger: \"blur\"\n          }]\n        }]\n      }\n    };\n  },\n  filters: {},\n  created: function created() {},\n  mounted: function mounted() {\n    listenfullscreen(this.setScreen);\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    showDebug: function showDebug(state) {\n      return state.common.showDebug;\n    },\n    showTheme: function showTheme(state) {\n      return state.common.showTheme;\n    },\n    showLock: function showLock(state) {\n      return state.common.showLock;\n    },\n    showFullScren: function showFullScren(state) {\n      return state.common.showFullScren;\n    },\n    showCollapse: function showCollapse(state) {\n      return state.common.showCollapse;\n    },\n    showSearch: function showSearch(state) {\n      return state.common.showSearch;\n    },\n    showMenu: function showMenu(state) {\n      return state.common.showMenu;\n    },\n    showColor: function showColor(state) {\n      return state.common.showColor;\n    }\n  })), mapGetters([\"userInfo\", \"isFullScren\", \"tagWel\", \"tagList\", \"isCollapse\", \"tag\", \"logsLen\", \"logsFlag\"])),\n  methods: {\n    handleScreen: function handleScreen() {\n      fullscreenToggel();\n    },\n    setCollapse: function setCollapse() {\n      this.$store.commit(\"SET_COLLAPSE\");\n    },\n    setScreen: function setScreen() {\n      this.$store.commit(\"SET_FULLSCREN\");\n    },\n    switchDept: function switchDept() {\n      var userId = this.userInfo.user_id;\n      var deptColumn = this.findObject(this.userOption.column, \"deptId\");\n      deptColumn.dicUrl = \"/api/blade-system/dept/select?userId=\".concat(userId);\n      deptColumn.display = true;\n      var roleColumn = this.findObject(this.userOption.column, \"roleId\");\n      roleColumn.dicUrl = \"/api/blade-system/role/select?userId=\".concat(userId);\n      roleColumn.display = true;\n      this.userBox = true;\n    },\n    submitSwitch: function submitSwitch(form, done) {\n      var _this = this;\n\n      this.$store.dispatch(\"refreshToken\", form).then(function () {\n        _this.userBox = false;\n\n        _this.$router.push({\n          path: \"/\"\n        });\n      });\n      done();\n    },\n    logout: function logout() {\n      var _this2 = this;\n\n      this.$confirm(this.$t(\"logoutTip\"), this.$t(\"tip\"), {\n        confirmButtonText: this.$t(\"submitText\"),\n        cancelButtonText: this.$t(\"cancelText\"),\n        type: \"warning\"\n      }).then(function () {\n        _this2.$store.dispatch(\"LogOut\").then(function () {\n          resetRouter();\n\n          _this2.$router.push({\n            path: \"/login\"\n          });\n        });\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;AA4GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC,gBADA;IAEAC,gBAFA;IAGAC,oBAHA;IAIAC,kBAJA;IAKAC,gBALA;IAMAC,kBANA;IAOAC,oBAPA;IAQAC;EARA,CADA;EAWAC,WAXA;EAYAC,IAZA,kBAYA;IACA;MACAC,cADA;MAEAC;QACAC,UADA;QAEAC;MAFA,CAFA;MAMAC;QACAC,cADA;QAEAC,eAFA;QAGAC,eAHA;QAIAC,gBAJA;QAKAC,SACA;UACAC,WADA;UAEAC,cAFA;UAGAC,cAHA;UAIAC;YACAH,iBADA;YAEAI;UAFA,CAJA;UAQAC,uCARA;UASAC,QATA;UAUAC,cAVA;UAWAC;YACAC,cADA;YAEAC,gBAFA;YAGAC;UAHA;QAXA,CADA,EAkBA;UACAX,WADA;UAEAC,cAFA;UAGAC,cAHA;UAIAC;YACAH,iBADA;YAEAI;UAFA,CAJA;UAQAC,uCARA;UASAC,QATA;UAUAC,cAVA;UAWAC;YACAC,cADA;YAEAC,gBAFA;YAGAC;UAHA;QAXA,CAlBA;MALA;IANA;EAiDA,CA9DA;EA+DAC,WA/DA;EAgEAC,OAhEA,qBAgEA,CACA,CAjEA;EAkEAC,OAlEA,qBAkEA;IACAC;EACA,CApEA;EAqEAC,0CACAC;IACAC;MAAA;IAAA,CADA;IAEAC;MAAA;IAAA,CAFA;IAGAC;MAAA;IAAA,CAHA;IAIAC;MAAA;IAAA,CAJA;IAKAC;MAAA;IAAA,CALA;IAMAC;MAAA;IAAA,CANA;IAOAC;MAAA;IAAA,CAPA;IAQAC;MAAA;IAAA;EARA,EADA,GAWAC,YACA,UADA,EAEA,aAFA,EAGA,QAHA,EAIA,SAJA,EAKA,YALA,EAMA,KANA,EAOA,SAPA,EAQA,UARA,EAXA,CArEA;EA2FAC;IACAC,YADA,0BACA;MACAC;IACA,CAHA;IAIAC,WAJA,yBAIA;MACA;IACA,CANA;IAOAC,SAPA,uBAOA;MACA;IACA,CATA;IAUAC,UAVA,wBAUA;MACA;MACA;MACAC;MACAA;MACA;MACAC;MACAA;MACA;IACA,CAnBA;IAoBAC,YApBA,wBAoBAC,IApBA,EAoBAC,IApBA,EAoBA;MAAA;;MACA;QACA;;QACA;UAAAC;QAAA;MACA,CAHA;MAIAD;IACA,CA1BA;IA2BAE,MA3BA,oBA2BA;MAAA;;MACA;QACAC,wCADA;QAEAC,uCAFA;QAGAvC;MAHA,GAIAwC,IAJA,CAIA;QACA;UACAC;;UACA;YAAAL;UAAA;QACA,CAHA;MAIA,CATA;IAUA;EAtCA;AA3FA","names":["components","topLock","topMenu","topSearch","topTheme","topLogs","topColor","topNotice","topLang","name","data","userBox","userForm","deptId","roleId","userOption","labelWidth","submitBtn","emptyBtn","submitText","column","label","prop","type","props","value","dicUrl","span","display","rules","required","message","trigger","filters","created","mounted","listenfullscreen","computed","mapState","showDebug","showTheme","showLock","showFullScren","showCollapse","showSearch","showMenu","showColor","mapGetters","methods","handleScreen","fullscreenToggel","setCollapse","setScreen","switchDept","deptColumn","roleColumn","submitSwitch","form","done","path","logout","confirmButtonText","cancelButtonText","then","resetRouter"],"sourceRoot":"src/page/index/top","sources":["index.vue"],"sourcesContent":["<template>\n  <div class=\"avue-top\">\n    <div class=\"top-bar__left\">\n      <div class=\"avue-breadcrumb\"\n           :class=\"[{ 'avue-breadcrumb--active': isCollapse }]\"\n           v-if=\"showCollapse\">\n        <i class=\"icon-navicon\"\n           @click=\"setCollapse\"></i>\n      </div>\n    </div>\n    <div class=\"top-bar__title\">\n      <div class=\"top-bar__item top-bar__item--show\"\n           v-if=\"showMenu\">\n        <top-menu ref=\"topMenu\"></top-menu>\n      </div>\n      <span class=\"top-bar__item\"\n            v-if=\"showSearch\">\n        <top-search></top-search>\n      </span>\n    </div>\n    <div class=\"top-bar__right\">\n      <el-tooltip v-if=\"showColor\"\n                  effect=\"dark\"\n                  :content=\"$t('navbar.color')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item\">\n          <top-color></top-color>\n        </div>\n      </el-tooltip>\n      <el-tooltip v-if=\"showDebug\"\n                  effect=\"dark\"\n                  :content=\"logsFlag?$t('navbar.bug'):logsLen+$t('navbar.bugs')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item\">\n          <top-logs></top-logs>\n        </div>\n      </el-tooltip>\n      <el-tooltip v-if=\"showLock\"\n                  effect=\"dark\"\n                  :content=\"$t('navbar.lock')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item\">\n          <top-lock></top-lock>\n        </div>\n      </el-tooltip>\n      <el-tooltip v-if=\"showTheme\"\n                  effect=\"dark\"\n                  :content=\"$t('navbar.theme')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item top-bar__item--show\">\n          <top-theme></top-theme>\n        </div>\n      </el-tooltip>\n      <el-tooltip effect=\"dark\"\n                  :content=\"$t('navbar.notice')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item top-bar__item--show\">\n          <top-notice></top-notice>\n        </div>\n      </el-tooltip>\n      <el-tooltip effect=\"dark\"\n                  :content=\"$t('navbar.language')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item top-bar__item--show\">\n          <top-lang></top-lang>\n        </div>\n      </el-tooltip>\n      <el-tooltip v-if=\"showFullScren\"\n                  effect=\"dark\"\n                  :content=\"isFullScren?$t('navbar.screenfullF'):$t('navbar.screenfull')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item\">\n          <i :class=\"isFullScren?'icon-tuichuquanping':'icon-quanping'\"\n             @click=\"handleScreen\"></i>\n        </div>\n      </el-tooltip>\n      <img class=\"top-bar__img\"\n           :src=\"userInfo.avatar\">\n      <el-dropdown>\n        <span class=\"el-dropdown-link\">\n          {{userInfo.userName}}\n          <i class=\"el-icon-arrow-down el-icon--right\"></i>\n        </span>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item>\n            <router-link to=\"/\">{{$t('navbar.dashboard')}}</router-link>\n          </el-dropdown-item>\n          <el-dropdown-item>\n            <router-link to=\"/info/index\">{{$t('navbar.userinfo')}}</router-link>\n          </el-dropdown-item>\n          <el-dropdown-item v-if=\"this.website.switchMode\" @click.native=\"switchDept\"\n                            >{{$t('navbar.switchDept')}}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"logout\"\n                            divided>{{$t('navbar.logOut')}}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n      <el-dialog title=\"用户信息选择\"\n                 append-to-body\n                 :visible.sync=\"userBox\"\n                 width=\"350px\">\n        <avue-form ref=\"form\" :option=\"userOption\" v-model=\"userForm\" @submit=\"submitSwitch\"/>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n<script>\n  import {resetRouter} from '@/router/router'\n  import {mapGetters, mapState} from \"vuex\";\n  import {fullscreenToggel, listenfullscreen} from \"@/util/util\";\n  import topLock from \"./top-lock\";\n  import topMenu from \"./top-menu\";\n  import topSearch from \"./top-search\";\n  import topTheme from \"./top-theme\";\n  import topLogs from \"./top-logs\";\n  import topColor from \"./top-color\";\n  import topNotice from './top-notice'\n  import topLang from \"./top-lang\";\n\n  export default {\n    components: {\n      topLock,\n      topMenu,\n      topSearch,\n      topTheme,\n      topLogs,\n      topColor,\n      topNotice,\n      topLang\n    },\n    name: \"top\",\n    data() {\n      return {\n        userBox: false,\n        userForm: {\n          deptId: '',\n          roleId: ''\n        },\n        userOption: {\n          labelWidth: 70,\n          submitBtn: true,\n          emptyBtn: false,\n          submitText: '切换',\n          column: [\n            {\n              label: '部门',\n              prop: 'deptId',\n              type: 'select',\n              props: {\n                label: 'deptName',\n                value: 'id'\n              },\n              dicUrl: '/api/blade-system/dept/select',\n              span: 24,\n              display: false,\n              rules: [{\n                required: true,\n                message: \"请选择部门\",\n                trigger: \"blur\"\n              }],\n            },\n            {\n              label: '角色',\n              prop: 'roleId',\n              type: 'select',\n              props: {\n                label: 'roleName',\n                value: 'id'\n              },\n              dicUrl: '/api/blade-system/role/select',\n              span: 24,\n              display: false,\n              rules: [{\n                required: true,\n                message: \"请选择角色\",\n                trigger: \"blur\"\n              }],\n            },\n          ]\n        }\n      };\n    },\n    filters: {},\n    created() {\n    },\n    mounted() {\n      listenfullscreen(this.setScreen);\n    },\n    computed: {\n      ...mapState({\n        showDebug: state => state.common.showDebug,\n        showTheme: state => state.common.showTheme,\n        showLock: state => state.common.showLock,\n        showFullScren: state => state.common.showFullScren,\n        showCollapse: state => state.common.showCollapse,\n        showSearch: state => state.common.showSearch,\n        showMenu: state => state.common.showMenu,\n        showColor: state => state.common.showColor\n      }),\n      ...mapGetters([\n        \"userInfo\",\n        \"isFullScren\",\n        \"tagWel\",\n        \"tagList\",\n        \"isCollapse\",\n        \"tag\",\n        \"logsLen\",\n        \"logsFlag\"\n      ])\n    },\n    methods: {\n      handleScreen() {\n        fullscreenToggel();\n      },\n      setCollapse() {\n        this.$store.commit(\"SET_COLLAPSE\");\n      },\n      setScreen() {\n        this.$store.commit(\"SET_FULLSCREN\");\n      },\n      switchDept() {\n        const userId = this.userInfo.user_id;\n        const deptColumn = this.findObject(this.userOption.column, \"deptId\");\n        deptColumn.dicUrl = `/api/blade-system/dept/select?userId=${userId}`;\n        deptColumn.display = true;\n        const roleColumn = this.findObject(this.userOption.column, \"roleId\");\n        roleColumn.dicUrl = `/api/blade-system/role/select?userId=${userId}`;\n        roleColumn.display = true;\n        this.userBox = true;\n      },\n      submitSwitch (form, done) {\n        this.$store.dispatch(\"refreshToken\", form).then(() => {\n          this.userBox = false;\n          this.$router.push({path: \"/\"});\n        })\n        done();\n      },\n      logout() {\n        this.$confirm(this.$t(\"logoutTip\"), this.$t(\"tip\"), {\n          confirmButtonText: this.$t(\"submitText\"),\n          cancelButtonText: this.$t(\"cancelText\"),\n          type: \"warning\"\n        }).then(() => {\n          this.$store.dispatch(\"LogOut\").then(() => {\n            resetRouter();\n            this.$router.push({path: \"/login\"});\n          });\n        });\n      }\n    }\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n"]}]}