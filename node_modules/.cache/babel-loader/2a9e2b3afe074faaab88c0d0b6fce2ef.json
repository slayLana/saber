{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/eslint-loader/index.js??ref--13-0!/Users/jiang/WorkSpace/code/bladex/saber/src/router/avue-router.js","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/router/avue-router.js","mtime":1666151205528},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/eslint-loader/index.js","mtime":1666157452476}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n\nvar RouterPlugin = function RouterPlugin() {\n  this.$router = null;\n  this.$store = null;\n};\n\nRouterPlugin.install = function (vue) {\n  var _this = this;\n\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  this.$router = option.router;\n  this.$store = option.store;\n  this.$vue = new vue({\n    i18n: option.i18n\n  }); // 这个的作用是 为了检查出网页链接，因为本项目用到了 iframe\n\n  function isURL(s) {\n    if (s.includes('html')) return true;\n    return /^http[s]?:\\/\\/.*/.test(s);\n  } // 将参数处理为参数的形式拼接\n\n\n  function objToform(obj) {\n    var result = [];\n    Object.keys(obj).forEach(function (ele) {\n      result.push(\"\".concat(ele, \"=\").concat(obj[ele]));\n    });\n    return result.join('&');\n  }\n\n  this.$router.$avueRouter = {\n    //全局配置\n    $website: this.$store.getters.website,\n    group: '',\n    meta: {},\n    safe: this,\n    // 设置标题\n    setTitle: function setTitle(title) {\n      var defaultTitle = _this.$vue.$t('title');\n\n      title = title ? \"\".concat(title, \"-\").concat(defaultTitle) : defaultTitle;\n      document.title = title;\n    },\n    closeTag: function closeTag(value) {\n      var tag = value || _this.$store.getters.tag;\n\n      if (typeof value === 'string') {\n        tag = _this.$store.getters.tagList.filter(function (ele) {\n          return ele.value === value;\n        })[0];\n      }\n\n      _this.$store.commit('DEL_TAG', tag);\n    },\n    generateTitle: function generateTitle(title, key) {\n      if (!key) return title;\n\n      var hasKey = _this.$vue.$te('route.' + key);\n\n      if (hasKey) {\n        // $t :this method from vue-i18n, inject in @/lang/index.js\n        var translatedTitle = _this.$vue.$t('route.' + key);\n\n        return translatedTitle;\n      }\n\n      return title;\n    },\n    //处理路由\n    getPath: function getPath(params) {\n      var src = params.src;\n      var result = src || '/';\n\n      if (isURL(src)) {\n        result = \"/myiframe/urlPath?\".concat(objToform(params));\n      }\n\n      return result;\n    },\n    //正则处理路由\n    vaildPath: function vaildPath(list, path) {\n      var result = false;\n      list.forEach(function (ele) {\n        if (new RegExp(\"^\" + ele + \".*\", \"g\").test(path)) {\n          result = true;\n        }\n      });\n      return result;\n    },\n    //设置路由值\n    getValue: function getValue(route) {\n      var value = \"\";\n\n      if (route.query.src) {\n        value = route.query.src;\n      } else {\n        value = route.path;\n      }\n\n      return value;\n    },\n    //动态路由\n    // 路由是专门的一个接口获取\n\n    /**\n     * aMenu: 接受到的动态路由数据 menu的结构外层有父级path 里面有一个childen 记录页面的路由\n     * first: 为了区分外界 调用formatRoutes 和 当前文件调用 formatRoutes\n    */\n    formatRoutes: function formatRoutes() {\n      var _this2 = this;\n\n      var aMenu = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var first = arguments.length > 1 ? arguments[1] : undefined;\n      // window.console.log('aMenu')\n      // window.console.log(aMenu)\n      var aRouter = []; // 获取到全局配置中的 props\n\n      var propsConfig = this.$website.menu.props; // 设置 props默认值 作用就是将字段设置成配置的\n\n      var propsDefault = {\n        label: propsConfig.label || 'name',\n        path: propsConfig.path || 'path',\n        icon: propsConfig.icon || 'icon',\n        children: propsConfig.children || 'children',\n        meta: propsConfig.meta || 'meta'\n      }; // 如果没有权限菜单就结束\n\n      if (aMenu.length === 0) return; // 开始处理menu\n\n      var _loop = function _loop(i) {\n        // 取到当前要处理的一项\n        var oMenu = aMenu[i]; // 这一块的赋值 也就是取到返回的值\n\n        var path = function () {\n          if (first) {\n            // 将 '/index' 替换为 ''\n            return oMenu[propsDefault.path].replace('/index', '');\n          } else {\n            return oMenu[propsDefault.path];\n          }\n        }(),\n            //特殊处理组件 执行完这个 component 也就是精确到具体的文件了  views文件夹下面就是具体的页面代码\n        _component = 'views' + oMenu.path,\n            name = oMenu[propsDefault.label],\n            icon = oMenu[propsDefault.icon],\n            children = oMenu[propsDefault.children],\n            meta = oMenu[propsDefault.meta] || {}; // meta中 keepalive 的处理\n\n\n        meta = Object.assign(meta, function () {\n          if (option.keepAlive === true) {\n            return {\n              keepAlive: true\n            };\n          }\n        }()); //是否有子路由\n\n        var isChild = children.length !== 0;\n        var oRouter = {\n          path: path,\n          component: function component(resolve) {\n            // 判断是否为首路由\n            if (first) {\n              require(['../page/index'], resolve);\n\n              return; // 判断是否为多层路由\n            } else if (isChild && !first) {\n              require(['../page/index/layout'], resolve);\n\n              return; // 判断是否为最终的页面视图\n            } else {\n              require([\"../\".concat(_component, \".vue\")], resolve);\n            }\n          },\n          name: name,\n          icon: icon,\n          meta: meta,\n          redirect: function () {\n            // 第一次进来但是没有子路由的 需要添加redirect\n            if (!isChild && first && !isURL(path)) return \"\".concat(path, \"/index\");else return '';\n          }(),\n          // 整理子路由的route 配置\n          // 处理是否为一级路由\n          children: !isChild ? function () {\n            if (first) {\n              // 这里的isURL判断，因为这个网站有使用 iframe。所以需要判断是否为网页链接\n              if (!isURL(path)) oMenu[propsDefault.path] = \"\".concat(path, \"/index\");\n              return [{\n                component: function component(resolve) {\n                  require([\"../\".concat(_component, \".vue\")], resolve);\n                },\n                icon: icon,\n                name: name,\n                meta: meta,\n                path: 'index'\n              }];\n            }\n\n            return [];\n          }() : function () {\n            /**\n             * 这里是重点，当有子路由的时候 会再去执行 formatRoutes 方法，然后又会有一个新的 aMenu for循环。\n             * 最后返回的是一个数组 aRouter 这个数组就会作为 childen的值被 return\n            */\n            return _this2.formatRoutes(children, false);\n          }()\n        };\n        aRouter.push(oRouter);\n      };\n\n      for (var i = 0; i < aMenu.length; i++) {\n        _loop(i);\n      } // for循环结束\n      // 这个first 卡的其实就是首路由\n\n\n      if (first) {\n        this.safe.$router.addRoutes(aRouter);\n      } else {\n        // 这里返回的是子组件\n        return aRouter;\n      }\n    }\n  };\n};\n\nexport default RouterPlugin;",{"version":3,"names":["RouterPlugin","$router","$store","install","vue","option","router","store","$vue","i18n","isURL","s","includes","test","objToform","obj","result","Object","keys","forEach","ele","push","join","$avueRouter","$website","getters","website","group","meta","safe","setTitle","title","defaultTitle","$t","document","closeTag","value","tag","tagList","filter","commit","generateTitle","key","hasKey","$te","translatedTitle","getPath","params","src","vaildPath","list","path","RegExp","getValue","route","query","formatRoutes","aMenu","first","aRouter","propsConfig","menu","props","propsDefault","label","icon","children","length","i","oMenu","replace","component","name","assign","keepAlive","isChild","oRouter","resolve","require","redirect","addRoutes"],"sources":["/Users/jiang/WorkSpace/code/bladex/saber/src/router/avue-router.js"],"sourcesContent":["let RouterPlugin = function () {\n  this.$router = null;\n  this.$store = null;\n\n};\nRouterPlugin.install = function (vue, option = {}) {\n  this.$router = option.router;\n  this.$store = option.store;\n  this.$vue = new vue({ i18n: option.i18n });\n\n  // 这个的作用是 为了检查出网页链接，因为本项目用到了 iframe\n  function isURL(s) {\n    if (s.includes('html')) return true;\n    return /^http[s]?:\\/\\/.*/.test(s)\n  }\n\n  // 将参数处理为参数的形式拼接\n  function objToform(obj) {\n    let result = [];\n    Object.keys(obj).forEach(ele => {\n      result.push(`${ele}=${obj[ele]}`);\n    })\n    return result.join('&');\n  }\n\n  this.$router.$avueRouter = {\n    //全局配置\n    $website: this.$store.getters.website,\n    group: '',\n    meta: {},\n    safe: this,\n    // 设置标题\n    setTitle: (title) => {\n      const defaultTitle = this.$vue.$t('title');\n      title = title ? `${title}-${defaultTitle}` : defaultTitle;\n      document.title = title;\n    },\n    closeTag: (value) => {\n      let tag = value || this.$store.getters.tag;\n      if (typeof value === 'string') {\n        tag = this.$store.getters.tagList.filter(ele => ele.value === value)[0]\n      }\n      this.$store.commit('DEL_TAG', tag)\n    },\n    generateTitle: (title, key) => {\n      if (!key) return title;\n      const hasKey = this.$vue.$te('route.' + key)\n      if (hasKey) {\n        // $t :this method from vue-i18n, inject in @/lang/index.js\n        const translatedTitle = this.$vue.$t('route.' + key)\n\n        return translatedTitle\n      }\n      return title\n    },\n    //处理路由\n    getPath: function (params) {\n      let {src} = params;\n      let result = src || '/';\n      if (isURL(src)) {\n        result = `/myiframe/urlPath?${objToform(params)}`;\n      }\n      return result;\n    },\n    //正则处理路由\n    vaildPath: function (list, path) {\n      let result = false;\n      list.forEach(ele => {\n        if (new RegExp(\"^\" + ele + \".*\", \"g\").test(path)) {\n          result = true\n        }\n\n      })\n      return result;\n    },\n    //设置路由值\n    getValue: function (route) {\n      let value = \"\";\n      if (route.query.src) {\n        value = route.query.src;\n      } else {\n        value = route.path;\n      }\n      return value;\n    },\n    //动态路由\n    // 路由是专门的一个接口获取\n      /**\n       * aMenu: 接受到的动态路由数据 menu的结构外层有父级path 里面有一个childen 记录页面的路由\n       * first: 为了区分外界 调用formatRoutes 和 当前文件调用 formatRoutes\n      */\n    formatRoutes: function (aMenu = [], first) {\n      // window.console.log('aMenu')\n      // window.console.log(aMenu)\n      const aRouter = []\n      // 获取到全局配置中的 props\n      const propsConfig = this.$website.menu.props;\n      // 设置 props默认值 作用就是将字段设置成配置的\n      const propsDefault = {\n        label: propsConfig.label || 'name',\n        path: propsConfig.path || 'path',\n        icon: propsConfig.icon || 'icon',\n        children: propsConfig.children || 'children',\n        meta: propsConfig.meta || 'meta',\n      }\n      // 如果没有权限菜单就结束\n      if (aMenu.length === 0) return;\n      // 开始处理menu\n      for (let i = 0; i < aMenu.length; i++) {\n        // 取到当前要处理的一项\n        const oMenu = aMenu[i];\n        // 这一块的赋值 也就是取到返回的值\n        let path = (() => {\n            if (first) {\n              // 将 '/index' 替换为 ''\n              return oMenu[propsDefault.path].replace('/index', '')\n            } else {\n              return oMenu[propsDefault.path]\n            }\n          })(),\n          //特殊处理组件 执行完这个 component 也就是精确到具体的文件了  views文件夹下面就是具体的页面代码\n          component = 'views' + oMenu.path,\n          name = oMenu[propsDefault.label],\n          icon = oMenu[propsDefault.icon],\n          children = oMenu[propsDefault.children],\n          meta = oMenu[propsDefault.meta] || {};\n          // meta中 keepalive 的处理\n        meta = Object.assign(meta, (function () {\n          if (option.keepAlive === true) {\n            return {\n              keepAlive: true\n            }\n          }\n        })());\n        //是否有子路由\n        const isChild = children.length !== 0;\n        const oRouter = {\n          path: path,\n          component(resolve) {\n            // 判断是否为首路由\n            if (first) {\n              require(['../page/index'], resolve)\n              return\n              // 判断是否为多层路由\n            } else if (isChild && !first) {\n              require(['../page/index/layout'], resolve)\n              return\n              // 判断是否为最终的页面视图\n            } else {\n              require([`../${component}.vue`], resolve)\n            }\n          },\n          name: name,\n          icon: icon,\n          meta: meta,\n          redirect: (() => {\n            // 第一次进来但是没有子路由的 需要添加redirect\n            if (!isChild && first && !isURL(path)) return `${path}/index`\n            else return '';\n          })(),\n          // 整理子路由的route 配置\n          // 处理是否为一级路由\n          children: !isChild ? (() => {\n            if (first) {\n              // 这里的isURL判断，因为这个网站有使用 iframe。所以需要判断是否为网页链接\n              if (!isURL(path)) oMenu[propsDefault.path] = `${path}/index`;\n              return [{\n                component(resolve) {\n                  require([`../${component}.vue`], resolve)\n                },\n                icon: icon,\n                name: name,\n                meta: meta,\n                path: 'index'\n              }]\n            }\n            return [];\n          })() : (() => {\n            /**\n             * 这里是重点，当有子路由的时候 会再去执行 formatRoutes 方法，然后又会有一个新的 aMenu for循环。\n             * 最后返回的是一个数组 aRouter 这个数组就会作为 childen的值被 return\n            */\n            return this.formatRoutes(children, false)\n          })()\n        }\n        aRouter.push(oRouter)\n      }\n      // for循环结束\n      // 这个first 卡的其实就是首路由\n      if (first) {\n        this.safe.$router.addRoutes(aRouter)\n      } else {\n        // 这里返回的是子组件\n        return aRouter\n      }\n    }\n  }\n}\nexport default RouterPlugin;\n"],"mappings":";;;;;;;AAAA,IAAIA,YAAY,GAAG,SAAfA,YAAe,GAAY;EAC7B,KAAKC,OAAL,GAAe,IAAf;EACA,KAAKC,MAAL,GAAc,IAAd;AAED,CAJD;;AAKAF,YAAY,CAACG,OAAb,GAAuB,UAAUC,GAAV,EAA4B;EAAA;;EAAA,IAAbC,MAAa,uEAAJ,EAAI;EACjD,KAAKJ,OAAL,GAAeI,MAAM,CAACC,MAAtB;EACA,KAAKJ,MAAL,GAAcG,MAAM,CAACE,KAArB;EACA,KAAKC,IAAL,GAAY,IAAIJ,GAAJ,CAAQ;IAAEK,IAAI,EAAEJ,MAAM,CAACI;EAAf,CAAR,CAAZ,CAHiD,CAKjD;;EACA,SAASC,KAAT,CAAeC,CAAf,EAAkB;IAChB,IAAIA,CAAC,CAACC,QAAF,CAAW,MAAX,CAAJ,EAAwB,OAAO,IAAP;IACxB,OAAO,mBAAmBC,IAAnB,CAAwBF,CAAxB,CAAP;EACD,CATgD,CAWjD;;;EACA,SAASG,SAAT,CAAmBC,GAAnB,EAAwB;IACtB,IAAIC,MAAM,GAAG,EAAb;IACAC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,OAAjB,CAAyB,UAAAC,GAAG,EAAI;MAC9BJ,MAAM,CAACK,IAAP,WAAeD,GAAf,cAAsBL,GAAG,CAACK,GAAD,CAAzB;IACD,CAFD;IAGA,OAAOJ,MAAM,CAACM,IAAP,CAAY,GAAZ,CAAP;EACD;;EAED,KAAKrB,OAAL,CAAasB,WAAb,GAA2B;IACzB;IACAC,QAAQ,EAAE,KAAKtB,MAAL,CAAYuB,OAAZ,CAAoBC,OAFL;IAGzBC,KAAK,EAAE,EAHkB;IAIzBC,IAAI,EAAE,EAJmB;IAKzBC,IAAI,EAAE,IALmB;IAMzB;IACAC,QAAQ,EAAE,kBAACC,KAAD,EAAW;MACnB,IAAMC,YAAY,GAAG,KAAI,CAACxB,IAAL,CAAUyB,EAAV,CAAa,OAAb,CAArB;;MACAF,KAAK,GAAGA,KAAK,aAAMA,KAAN,cAAeC,YAAf,IAAgCA,YAA7C;MACAE,QAAQ,CAACH,KAAT,GAAiBA,KAAjB;IACD,CAXwB;IAYzBI,QAAQ,EAAE,kBAACC,KAAD,EAAW;MACnB,IAAIC,GAAG,GAAGD,KAAK,IAAI,KAAI,CAAClC,MAAL,CAAYuB,OAAZ,CAAoBY,GAAvC;;MACA,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;QAC7BC,GAAG,GAAG,KAAI,CAACnC,MAAL,CAAYuB,OAAZ,CAAoBa,OAApB,CAA4BC,MAA5B,CAAmC,UAAAnB,GAAG;UAAA,OAAIA,GAAG,CAACgB,KAAJ,KAAcA,KAAlB;QAAA,CAAtC,EAA+D,CAA/D,CAAN;MACD;;MACD,KAAI,CAAClC,MAAL,CAAYsC,MAAZ,CAAmB,SAAnB,EAA8BH,GAA9B;IACD,CAlBwB;IAmBzBI,aAAa,EAAE,uBAACV,KAAD,EAAQW,GAAR,EAAgB;MAC7B,IAAI,CAACA,GAAL,EAAU,OAAOX,KAAP;;MACV,IAAMY,MAAM,GAAG,KAAI,CAACnC,IAAL,CAAUoC,GAAV,CAAc,WAAWF,GAAzB,CAAf;;MACA,IAAIC,MAAJ,EAAY;QACV;QACA,IAAME,eAAe,GAAG,KAAI,CAACrC,IAAL,CAAUyB,EAAV,CAAa,WAAWS,GAAxB,CAAxB;;QAEA,OAAOG,eAAP;MACD;;MACD,OAAOd,KAAP;IACD,CA7BwB;IA8BzB;IACAe,OAAO,EAAE,iBAAUC,MAAV,EAAkB;MACzB,IAAKC,GAAL,GAAYD,MAAZ,CAAKC,GAAL;MACA,IAAIhC,MAAM,GAAGgC,GAAG,IAAI,GAApB;;MACA,IAAItC,KAAK,CAACsC,GAAD,CAAT,EAAgB;QACdhC,MAAM,+BAAwBF,SAAS,CAACiC,MAAD,CAAjC,CAAN;MACD;;MACD,OAAO/B,MAAP;IACD,CAtCwB;IAuCzB;IACAiC,SAAS,EAAE,mBAAUC,IAAV,EAAgBC,IAAhB,EAAsB;MAC/B,IAAInC,MAAM,GAAG,KAAb;MACAkC,IAAI,CAAC/B,OAAL,CAAa,UAAAC,GAAG,EAAI;QAClB,IAAI,IAAIgC,MAAJ,CAAW,MAAMhC,GAAN,GAAY,IAAvB,EAA6B,GAA7B,EAAkCP,IAAlC,CAAuCsC,IAAvC,CAAJ,EAAkD;UAChDnC,MAAM,GAAG,IAAT;QACD;MAEF,CALD;MAMA,OAAOA,MAAP;IACD,CAjDwB;IAkDzB;IACAqC,QAAQ,EAAE,kBAAUC,KAAV,EAAiB;MACzB,IAAIlB,KAAK,GAAG,EAAZ;;MACA,IAAIkB,KAAK,CAACC,KAAN,CAAYP,GAAhB,EAAqB;QACnBZ,KAAK,GAAGkB,KAAK,CAACC,KAAN,CAAYP,GAApB;MACD,CAFD,MAEO;QACLZ,KAAK,GAAGkB,KAAK,CAACH,IAAd;MACD;;MACD,OAAOf,KAAP;IACD,CA3DwB;IA4DzB;IACA;;IACE;AACN;AACA;AACA;IACIoB,YAAY,EAAE,wBAA6B;MAAA;;MAAA,IAAnBC,KAAmB,uEAAX,EAAW;MAAA,IAAPC,KAAO;MACzC;MACA;MACA,IAAMC,OAAO,GAAG,EAAhB,CAHyC,CAIzC;;MACA,IAAMC,WAAW,GAAG,KAAKpC,QAAL,CAAcqC,IAAd,CAAmBC,KAAvC,CALyC,CAMzC;;MACA,IAAMC,YAAY,GAAG;QACnBC,KAAK,EAAEJ,WAAW,CAACI,KAAZ,IAAqB,MADT;QAEnBb,IAAI,EAAES,WAAW,CAACT,IAAZ,IAAoB,MAFP;QAGnBc,IAAI,EAAEL,WAAW,CAACK,IAAZ,IAAoB,MAHP;QAInBC,QAAQ,EAAEN,WAAW,CAACM,QAAZ,IAAwB,UAJf;QAKnBtC,IAAI,EAAEgC,WAAW,CAAChC,IAAZ,IAAoB;MALP,CAArB,CAPyC,CAczC;;MACA,IAAI6B,KAAK,CAACU,MAAN,KAAiB,CAArB,EAAwB,OAfiB,CAgBzC;;MAhByC,2BAiBhCC,CAjBgC;QAkBvC;QACA,IAAMC,KAAK,GAAGZ,KAAK,CAACW,CAAD,CAAnB,CAnBuC,CAoBvC;;QACA,IAAIjB,IAAI,GAAI,YAAM;UACd,IAAIO,KAAJ,EAAW;YACT;YACA,OAAOW,KAAK,CAACN,YAAY,CAACZ,IAAd,CAAL,CAAyBmB,OAAzB,CAAiC,QAAjC,EAA2C,EAA3C,CAAP;UACD,CAHD,MAGO;YACL,OAAOD,KAAK,CAACN,YAAY,CAACZ,IAAd,CAAZ;UACD;QACF,CAPQ,EAAX;QAAA,IAQE;QACAoB,UAAS,GAAG,UAAUF,KAAK,CAAClB,IAT9B;QAAA,IAUEqB,IAAI,GAAGH,KAAK,CAACN,YAAY,CAACC,KAAd,CAVd;QAAA,IAWEC,IAAI,GAAGI,KAAK,CAACN,YAAY,CAACE,IAAd,CAXd;QAAA,IAYEC,QAAQ,GAAGG,KAAK,CAACN,YAAY,CAACG,QAAd,CAZlB;QAAA,IAaEtC,IAAI,GAAGyC,KAAK,CAACN,YAAY,CAACnC,IAAd,CAAL,IAA4B,EAbrC,CArBuC,CAmCrC;;;QACFA,IAAI,GAAGX,MAAM,CAACwD,MAAP,CAAc7C,IAAd,EAAqB,YAAY;UACtC,IAAIvB,MAAM,CAACqE,SAAP,KAAqB,IAAzB,EAA+B;YAC7B,OAAO;cACLA,SAAS,EAAE;YADN,CAAP;UAGD;QACF,CAN0B,EAApB,CAAP,CApCuC,CA2CvC;;QACA,IAAMC,OAAO,GAAGT,QAAQ,CAACC,MAAT,KAAoB,CAApC;QACA,IAAMS,OAAO,GAAG;UACdzB,IAAI,EAAEA,IADQ;UAEdoB,SAFc,qBAEJM,OAFI,EAEK;YACjB;YACA,IAAInB,KAAJ,EAAW;cACToB,OAAO,CAAC,CAAC,eAAD,CAAD,EAAoBD,OAApB,CAAP;;cACA,OAFS,CAGT;YACD,CAJD,MAIO,IAAIF,OAAO,IAAI,CAACjB,KAAhB,EAAuB;cAC5BoB,OAAO,CAAC,CAAC,sBAAD,CAAD,EAA2BD,OAA3B,CAAP;;cACA,OAF4B,CAG5B;YACD,CAJM,MAIA;cACLC,OAAO,CAAC,cAAOP,UAAP,UAAD,EAA0BM,OAA1B,CAAP;YACD;UACF,CAfa;UAgBdL,IAAI,EAAEA,IAhBQ;UAiBdP,IAAI,EAAEA,IAjBQ;UAkBdrC,IAAI,EAAEA,IAlBQ;UAmBdmD,QAAQ,EAAG,YAAM;YACf;YACA,IAAI,CAACJ,OAAD,IAAYjB,KAAZ,IAAqB,CAAChD,KAAK,CAACyC,IAAD,CAA/B,EAAuC,iBAAUA,IAAV,YAAvC,KACK,OAAO,EAAP;UACN,CAJS,EAnBI;UAwBd;UACA;UACAe,QAAQ,EAAE,CAACS,OAAD,GAAY,YAAM;YAC1B,IAAIjB,KAAJ,EAAW;cACT;cACA,IAAI,CAAChD,KAAK,CAACyC,IAAD,CAAV,EAAkBkB,KAAK,CAACN,YAAY,CAACZ,IAAd,CAAL,aAA8BA,IAA9B;cAClB,OAAO,CAAC;gBACNoB,SADM,qBACIM,OADJ,EACa;kBACjBC,OAAO,CAAC,cAAOP,UAAP,UAAD,EAA0BM,OAA1B,CAAP;gBACD,CAHK;gBAINZ,IAAI,EAAEA,IAJA;gBAKNO,IAAI,EAAEA,IALA;gBAMN5C,IAAI,EAAEA,IANA;gBAONuB,IAAI,EAAE;cAPA,CAAD,CAAP;YASD;;YACD,OAAO,EAAP;UACD,CAfoB,EAAX,GAeF,YAAM;YACZ;AACZ;AACA;AACA;YACY,OAAO,MAAI,CAACK,YAAL,CAAkBU,QAAlB,EAA4B,KAA5B,CAAP;UACD,CANM;QAzCO,CAAhB;QAiDAP,OAAO,CAACtC,IAAR,CAAauD,OAAb;MA9FuC;;MAiBzC,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACU,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;QAAA,MAA9BA,CAA8B;MA8EtC,CA/FwC,CAgGzC;MACA;;;MACA,IAAIV,KAAJ,EAAW;QACT,KAAK7B,IAAL,CAAU5B,OAAV,CAAkB+E,SAAlB,CAA4BrB,OAA5B;MACD,CAFD,MAEO;QACL;QACA,OAAOA,OAAP;MACD;IACF;EA1KwB,CAA3B;AA4KD,CAhMD;;AAiMA,eAAe3D,YAAf"}]}