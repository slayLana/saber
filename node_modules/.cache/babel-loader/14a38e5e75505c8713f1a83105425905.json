{"remainingRequest":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/bladex/saber/node_modules/avue-plugin-ueditor/packages/ueditor/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/avue-plugin-ueditor/packages/ueditor/src/main.vue","mtime":1666157454101},{"path":"/Users/jiang/WorkSpace/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport { getClient } from \"./upload/ali\";\nimport { getToken } from \"./upload/qiniu\";\nimport { getObjValue, HTMLFormat } from \"./upload/util\";\nimport E from 'wangeditor';\nexport default {\n  name: \"AvueUeditor\",\n  computed: {\n    domId: function domId() {\n      return '#' + this.id;\n    },\n    imgFlag: function imgFlag() {\n      return this.img.url == '';\n    },\n    isImg: function isImg() {\n      return this.img.obj.src;\n    },\n    urlKey: function urlKey() {\n      return this.props.url || 'url';\n    },\n    props: function props() {\n      return this.options.props || {};\n    },\n    oss: function oss() {\n      return this.options.oss;\n    },\n    customConfig: function customConfig() {\n      return this.options.customConfig || {};\n    },\n    action: function action() {\n      return this.options.action;\n    },\n    qiniu: function qiniu() {\n      return this.options.qiniu;\n    },\n    ali: function ali() {\n      return this.options.ali;\n    },\n    isQiniuOSS: function isQiniuOSS() {\n      return this.oss === \"qiniu\";\n    },\n    isAliOSS: function isAliOSS() {\n      return this.oss === \"ali\";\n    },\n    headers: function headers() {\n      return this.options.headers || {};\n    }\n  },\n  props: {\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    id: {\n      type: String,\n      default: function _default() {\n        return 'avue-ueditor-' + Math.ceil(Math.random() * 100);\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data: function data() {\n    return {\n      textall: '',\n      text: '',\n      dialogVisible: false,\n      editor: ''\n    };\n  },\n  watch: {\n    disabled: function disabled(val) {\n      this.editor.$textElem.attr('contenteditable', !val);\n    },\n    value: function value(newVal) {\n      if (this.editor) {\n        if (newVal && newVal !== this.text) {\n          this.text = newVal;\n          this.editor.txt.html(newVal);\n        } else if (!newVal) {\n          this.text = '';\n          this.editor.txt.html('');\n        }\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.initEdit();\n  },\n  methods: {\n    initEdit: function initEdit() {\n      var _this = this;\n\n      this.editor = new E(this.domId);\n      window.wangEditor = E;\n      this.editor.customConfig.zIndex = 100;\n\n      this.editor.customConfig.onfocus = function () {\n        _this.$emit('focus', _this.text);\n      };\n\n      this.editor.customConfig.onblur = function (html) {\n        _this.$emit('blur', html);\n      };\n\n      this.editor.customConfig.onchange = function (html) {\n        _this.text = html;\n\n        _this.$emit('input', _this.text);\n      };\n\n      this.editor.customConfig = Object.assign(this.editor.customConfig, this.customConfig);\n      this.initUploadImg();\n      this.editor.create();\n      this.initPlugins();\n\n      if (this.disabled) {\n        this.editor.$textElem.attr('contenteditable', false);\n      }\n\n      this.editor.txt.html(this.value); // 去掉文件粘贴自动上传，如果是复制的网页图片是不会生成两个img标签，粘贴事件不识别是否是网络图片，都会已文件的方式上传，导致bug\n      // this.handlePaste();\n    },\n    initUploadImg: function initUploadImg() {\n      var _this2 = this;\n\n      this.editor.customConfig.customUploadImg = function (file, insert) {\n        _this2.uploadFile(file[0]).then(function (res) {\n          insert(res);\n        });\n      };\n    },\n    uploadFile: function uploadFile(file) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        var loading = _this3.$loading({\n          lock: true,\n          text: 'Loading',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)',\n          // 只在输入框里面弹起loading，全屏loading很影响用户体验\n          target: \"\".concat(_this3.domId)\n        });\n\n        var headers = Object.assign(_this3.headers, {\n          \"Content-Type\": \"multipart/form-data\"\n        });\n        var oss_config = {};\n        var client;\n        var param = new FormData();\n        var url = _this3.action;\n        param.append(\"file\", file);\n\n        if (_this3.isQiniuOSS) {\n          oss_config = _this3.qiniu;\n          var token = getToken(oss_config.AK, oss_config.SK, {\n            scope: oss_config.scope,\n            deadline: new Date().getTime() + oss_config.deadline * 3600\n          });\n          param.append(\"token\", token);\n          url = \"http://up.qiniu.com/\";\n        } else if (_this3.isAliOSS) {\n          oss_config = _this3.ali;\n          client = getClient({\n            region: oss_config.region,\n            endpoint: oss_config.endpoint,\n            accessKeyId: oss_config.accessKeyId,\n            accessKeySecret: oss_config.accessKeySecret,\n            bucket: oss_config.bucket\n          });\n        }\n\n        (function () {\n          if (_this3.isAliOSS) {\n            return client.put(file.name, file);\n          } else {\n            return _this3.$axios.post(url, param, {\n              headers: headers\n            });\n          }\n        })().then(function (res) {\n          var list = {};\n          var result = '';\n\n          if (_this3.isAliOSS) {\n            list = res;\n            result = list.url;\n          } else if (_this3.isQiniuOSS) {\n            list = res.data;\n            list.key = oss_config.url + list.key;\n            result = list.key;\n          } else {\n            list = getObjValue(res.data, _this3.props.res, \"object\");\n            result = list[_this3.urlKey];\n          }\n\n          var html = result;\n          loading.close();\n          resolve(html);\n        }).catch(function (err) {\n          loading.close();\n          reject(err);\n        });\n      });\n    },\n    handleClose: function handleClose(done) {\n      this.$emit('input', HTMLFormat(this.textall));\n      done();\n    },\n    getUEContent: function getUEContent() {\n      return this.editor.txt.html();\n    },\n    HTMLFormat: HTMLFormat,\n    handlePaste: function handlePaste() {\n      var _this4 = this;\n\n      //粘贴键\n      document.addEventListener(\"paste\", function (e) {\n        //获取剪切板文件\n        var getFile = function getFile(event) {\n          if (event.clipboardData || event.originalEvent) {\n            var clipboardData = event.clipboardData || event.originalEvent.clipboardData;\n\n            if (clipboardData.items) {\n              var items = clipboardData.items,\n                  len = items.length,\n                  blob = null;\n\n              for (var i = 0; i < len; i++) {\n                if (items[i].type.indexOf(\"image\") !== -1) {\n                  blob = items[i].getAsFile();\n                  return blob;\n                }\n              }\n            }\n          }\n        };\n\n        var file = getFile(e);\n\n        if (file) {\n          _this4.uploadFile(file).then(function (res) {\n            _this4.editor.txt.append('<img src=\"' + res + '\" />');\n          });\n        }\n      });\n    },\n    initPlugins: function initPlugins() {\n      var _this5 = this;\n\n      E.fullscreen = {\n        // editor create之后调用\n        init: function init(editorSelector) {\n          setTimeout(function () {\n            document.querySelector(editorSelector + \" .w-e-toolbar\").appendHTML('<div class=\"w-e-menu\"><span class=\"_wangEditor_btn_fullscreen\" onclick=\"window.wangEditor.fullscreen.toggleFullscreen(\\'' + editorSelector + '\\')\">全屏</span></div>');\n          }, 0);\n        },\n        toggleFullscreen: function toggleFullscreen(editorSelector) {\n          document.querySelector(editorSelector).toggleClass('fullscreen-editor');\n\n          if (document.querySelector(editorSelector + ' ._wangEditor_btn_fullscreen').innerText == '全屏') {\n            document.querySelector(editorSelector + ' ._wangEditor_btn_fullscreen').innerText = '退出全屏';\n          } else {\n            document.querySelector(editorSelector + ' ._wangEditor_btn_fullscreen').innerText = '全屏';\n          }\n        }\n      };\n      E.fullscreen.init(this.domId);\n      E.views = {\n        init: function init(editorSelector) {\n          document.querySelector(editorSelector + \" .w-e-toolbar\").appendHTML('<div class=\"w-e-menu\"><span class=\"_wangEditor_btn_sourcecode\" onclick=\"window.wangEditor.views.toggleFullscreen(\\'' + editorSelector + '\\')\">源代码</span></div>');\n        },\n        toggleFullscreen: function toggleFullscreen() {\n          _this5.textall = HTMLFormat(_this5.value);\n          _this5.dialogVisible = true;\n        }\n      };\n      E.views.init(this.domId);\n    }\n  }\n};",{"version":3,"mappings":";AAgBA;AACA;AACA;AACA;AACA;EACAA,mBADA;EAEAC;IACAC,KADA,mBACA;MACA;IACA,CAHA;IAIAC,OAJA,qBAIA;MACA;IACA,CANA;IAOAC,KAPA,mBAOA;MACA;IACA,CATA;IAUAC,MAVA,oBAUA;MACA;IACA,CAZA;IAaAC,KAbA,mBAaA;MACA;IACA,CAfA;IAgBAC,GAhBA,iBAgBA;MACA;IACA,CAlBA;IAmBAC,YAnBA,0BAmBA;MACA;IACA,CArBA;IAsBAC,MAtBA,oBAsBA;MACA;IACA,CAxBA;IAyBAC,KAzBA,mBAyBA;MACA;IACA,CA3BA;IA4BAC,GA5BA,iBA4BA;MACA;IACA,CA9BA;IA+BAC,UA/BA,wBA+BA;MACA;IACA,CAjCA;IAkCAC,QAlCA,sBAkCA;MACA;IACA,CApCA;IAqCAC,OArCA,qBAqCA;MACA;IACA;EAvCA,CAFA;EA2CAR;IACAS;MACAC,YADA;MAEAC;QACA;MACA;IAJA,CADA;IAOAC;MACAF,YADA;MAEAC;QACA;MACA;IAJA,CAPA;IAaAE;MACAH,aADA;MAEAC;IAFA,CAbA;IAiBAG;MACAJ,YADA;MAEAC;IAFA;EAjBA,CA3CA;EAiEAI,IAjEA,kBAiEA;IACA;MACAC,WADA;MAEAC,QAFA;MAGAC,oBAHA;MAIAC;IAJA;EAMA,CAxEA;EAyEAC;IACAP,QADA,oBACAQ,GADA,EACA;MACA;IACA,CAHA;IAIAP,KAJA,iBAIAQ,MAJA,EAIA;MACA;QACA;UACA;UACA;QACA,CAHA,MAGA;UACA;UACA;QACA;MACA;IACA;EAdA,CAzEA;EAyFAC,OAzFA,qBAyFA;IACA;EACA,CA3FA;EA4FAC;IACAC,QADA,sBACA;MAAA;;MACA;MACAC;MACA;;MACA;QACA;MACA,CAFA;;MAGA;QACA;MACA,CAFA;;MAGA;QACA;;QACA;MACA,CAHA;;MAIA;MACA;MACA;MACA;;MACA;QACA;MACA;;MACA,iCArBA,CAsBA;MACA;IACA,CAzBA;IA0BAC,aA1BA,2BA0BA;MAAA;;MACA;QACA;UACAC;QACA,CAFA;MAGA,CAJA;IAKA,CAhCA;IAiCAC,UAjCA,sBAiCAC,IAjCA,EAiCA;MAAA;;MACA;QACA;UACAC,UADA;UAEAd,eAFA;UAGAe,0BAHA;UAIAC,gCAJA;UAKA;UACAC;QANA;;QASA;UAAA;QAAA;QACA;QACA;QACA;QACA;QACAC;;QACA;UACAC;UACA;YACAC,uBADA;YAEAC;UAFA;UAIAH;UACAI;QACA,CARA,MAQA;UACAH;UACAI;YACAC,yBADA;YAEAC,6BAFA;YAGAC,mCAHA;YAIAC,2CAJA;YAKAC;UALA;QAOA;;QACA;UACA;YACA;UACA,CAFA,MAEA;YACA;cAAArC;YAAA;UACA;QACA,CANA,IAMAsC,IANA,CAMA;UACA;UACA;;UACA;YACAC;YACAC;UACA,CAHA,MAGA;YACAD;YACAA;YACAC;UACA,CAJA,MAIA;YACAD;YACAC;UACA;;UACA;UACAC;UACAC;QACA,CAvBA,EAuBAC,KAvBA,CAuBA;UACAF;UACAG;QACA,CA1BA;MA2BA,CA7DA;IA+DA,CAjGA;IAkGAC,WAlGA,uBAkGAC,IAlGA,EAkGA;MACA;MACAA;IACA,CArGA;IAsGAC,YAtGA,0BAsGA;MACA;IACA,CAxGA;IAyGAC,sBAzGA;IA0GAC,WA1GA,yBA0GA;MAAA;;MACA;MACAC;QACA;QACA;UACA;YACA,oBACAC,wDADA;;YAEA;cACA;cAAA,IACAC,kBADA;cAAA,IAEAC,WAFA;;cAGA;gBACA;kBACAA;kBACA;gBACA;cACA;YACA;UACA;QACA,CAhBA;;QAiBA;;QACA;UACA;YACA;UACA,CAFA;QAGA;MACA,CAzBA;IA0BA,CAtIA;IAuIAC,WAvIA,yBAuIA;MAAA;;MACAC;QACA;QACAC;UACAC;YACAP;UACA,CAFA,EAEA,CAFA;QAGA,CANA;QAOAQ;UACAR;;UACA;YACAA;UACA,CAFA,MAEA;YACAA;UACA;QACA;MAdA;MAgBAK;MACAA;QACAC;UACAN;QACA,CAHA;QAIAQ;UACA;UACA;QACA;MAPA;MASAH;IACA;EAnKA;AA5FA","names":["name","computed","domId","imgFlag","isImg","urlKey","props","oss","customConfig","action","qiniu","ali","isQiniuOSS","isAliOSS","headers","options","type","default","id","disabled","value","data","textall","text","dialogVisible","editor","watch","val","newVal","mounted","methods","initEdit","window","initUploadImg","insert","uploadFile","file","lock","spinner","background","target","param","oss_config","scope","deadline","url","client","region","endpoint","accessKeyId","accessKeySecret","bucket","then","list","result","loading","resolve","catch","reject","handleClose","done","getUEContent","HTMLFormat","handlePaste","document","event","len","blob","initPlugins","E","init","setTimeout","toggleFullscreen"],"sourceRoot":"node_modules/avue-plugin-ueditor/packages/ueditor/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"avue-ueditor\">\n    <div :id=\"id\"></div>\n    <el-dialog title=\"源代码编辑\"\n               :before-close=\"handleClose\"\n               :visible.sync=\"dialogVisible\"\n               width=\"100%\"\n               fullscreen\n               append-to-body>\n      <el-input v-model=\"textall\"\n                autosize\n                type=\"textarea\"></el-input>\n    </el-dialog>\n  </div>\n</template>\n<script>\nimport { getClient } from \"./upload/ali\";\nimport { getToken } from \"./upload/qiniu\";\nimport { getObjValue, HTMLFormat } from \"./upload/util\";\nimport E from 'wangeditor'\nexport default {\n  name: \"AvueUeditor\",\n  computed: {\n    domId () {\n      return '#' + this.id\n    },\n    imgFlag () {\n      return this.img.url == '';\n    },\n    isImg () {\n      return this.img.obj.src\n    },\n    urlKey () {\n      return this.props.url || 'url';\n    },\n    props () {\n      return this.options.props || {};\n    },\n    oss () {\n      return this.options.oss\n    },\n    customConfig () {\n      return this.options.customConfig || {}\n    },\n    action () {\n      return this.options.action\n    },\n    qiniu () {\n      return this.options.qiniu\n    },\n    ali () {\n      return this.options.ali\n    },\n    isQiniuOSS () {\n      return this.oss === \"qiniu\";\n    },\n    isAliOSS () {\n      return this.oss === \"ali\";\n    },\n    headers () {\n      return this.options.headers || {};\n    }\n  },\n  props: {\n    options: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    id: {\n      type: String,\n      default: () => {\n        return 'avue-ueditor-' + Math.ceil(Math.random() * 100)\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: String,\n      default: \"\"\n    },\n  },\n  data () {\n    return {\n      textall: '',\n      text: '',\n      dialogVisible: false,\n      editor: ''\n    };\n  },\n  watch: {\n    disabled (val) {\n      this.editor.$textElem.attr('contenteditable', !val)\n    },\n    value (newVal) {\n      if (this.editor) {\n        if (newVal && newVal !== this.text) {\n          this.text = newVal;\n          this.editor.txt.html(newVal);\n        } else if (!newVal) {\n          this.text = '';\n          this.editor.txt.html('');\n        }\n      }\n    },\n  },\n  mounted () {\n    this.initEdit();\n  },\n  methods: {\n    initEdit () {\n      this.editor = new E(this.domId)\n      window.wangEditor = E;\n      this.editor.customConfig.zIndex = 100;\n      this.editor.customConfig.onfocus = () => {\n        this.$emit('focus', this.text)\n      }\n      this.editor.customConfig.onblur = (html) => {\n        this.$emit('blur', html)\n      }\n      this.editor.customConfig.onchange = (html) => {\n        this.text = html;\n        this.$emit('input', this.text)\n      }\n      this.editor.customConfig = Object.assign(this.editor.customConfig, this.customConfig)\n      this.initUploadImg();\n      this.editor.create()\n      this.initPlugins();\n      if (this.disabled) {\n        this.editor.$textElem.attr('contenteditable', false)\n      }\n      this.editor.txt.html(this.value);\n      // 去掉文件粘贴自动上传，如果是复制的网页图片是不会生成两个img标签，粘贴事件不识别是否是网络图片，都会已文件的方式上传，导致bug\n      // this.handlePaste();\n    },\n    initUploadImg () {\n      this.editor.customConfig.customUploadImg = (file, insert) => {\n        this.uploadFile(file[0]).then(res => {\n          insert(res)\n        })\n      }\n    },\n    uploadFile (file) {\n      return new Promise((resolve, reject) => {\n        const loading = this.$loading({\n          lock: true,\n          text: 'Loading',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)',\n          // 只在输入框里面弹起loading，全屏loading很影响用户体验\n          target:`${this.domId}`\n        });\n\n        const headers = Object.assign(this.headers, { \"Content-Type\": \"multipart/form-data\" });\n        let oss_config = {};\n        let client;\n        let param = new FormData();\n        let url = this.action;\n        param.append(\"file\", file);\n        if (this.isQiniuOSS) {\n          oss_config = this.qiniu;\n          const token = getToken(oss_config.AK, oss_config.SK, {\n            scope: oss_config.scope,\n            deadline: new Date().getTime() + oss_config.deadline * 3600\n          });\n          param.append(\"token\", token);\n          url = \"http://up.qiniu.com/\";\n        } else if (this.isAliOSS) {\n          oss_config = this.ali;\n          client = getClient({\n            region: oss_config.region,\n            endpoint: oss_config.endpoint,\n            accessKeyId: oss_config.accessKeyId,\n            accessKeySecret: oss_config.accessKeySecret,\n            bucket: oss_config.bucket\n          });\n        }\n        (() => {\n          if (this.isAliOSS) {\n            return client.put(file.name, file);\n          } else {\n            return this.$axios.post(url, param, { headers });\n          }\n        })().then(res => {\n          let list = {};\n          var result = '';\n          if (this.isAliOSS) {\n            list = res;\n            result = list.url;\n          } else if (this.isQiniuOSS) {\n            list = res.data;\n            list.key = oss_config.url + list.key;\n            result = list.key;\n          } else {\n            list = getObjValue(res.data, this.props.res, \"object\");\n            result = list[this.urlKey];\n          }\n          var html = result\n          loading.close();\n          resolve(html)\n        }).catch(err => {\n          loading.close();\n          reject(err);\n        });\n      })\n\n    },\n    handleClose (done) {\n      this.$emit('input', HTMLFormat(this.textall))\n      done()\n    },\n    getUEContent () {\n      return this.editor.txt.html()\n    },\n    HTMLFormat,\n    handlePaste () {\n      //粘贴键\n      document.addEventListener(\"paste\", e => {\n        //获取剪切板文件\n        const getFile = event => {\n          if (event.clipboardData || event.originalEvent) {\n            var clipboardData =\n              event.clipboardData || event.originalEvent.clipboardData;\n            if (clipboardData.items) {\n              var items = clipboardData.items,\n                len = items.length,\n                blob = null;\n              for (var i = 0; i < len; i++) {\n                if (items[i].type.indexOf(\"image\") !== -1) {\n                  blob = items[i].getAsFile();\n                  return blob;\n                }\n              }\n            }\n          }\n        };\n        const file = getFile(e);\n        if (file) {\n          this.uploadFile(file).then(res => {\n            this.editor.txt.append('<img src=\"' + res + '\" />')\n          })\n        }\n      });\n    },\n    initPlugins () {\n      E.fullscreen = {\n        // editor create之后调用\n        init: function (editorSelector) {\n          setTimeout(() => {\n            document.querySelector(editorSelector + \" .w-e-toolbar\").appendHTML('<div class=\"w-e-menu\"><span class=\"_wangEditor_btn_fullscreen\" onclick=\"window.wangEditor.fullscreen.toggleFullscreen(\\'' + editorSelector + '\\')\">全屏</span></div>');\n          }, 0);\n        },\n        toggleFullscreen: function (editorSelector) {\n          document.querySelector(editorSelector).toggleClass('fullscreen-editor');\n          if (document.querySelector(editorSelector + ' ._wangEditor_btn_fullscreen').innerText == '全屏') {\n            document.querySelector(editorSelector + ' ._wangEditor_btn_fullscreen').innerText = '退出全屏';\n          } else {\n            document.querySelector(editorSelector + ' ._wangEditor_btn_fullscreen').innerText = '全屏';\n          }\n        }\n      };\n      E.fullscreen.init(this.domId);\n      E.views = {\n        init: function (editorSelector) {\n          document.querySelector(editorSelector + \" .w-e-toolbar\").appendHTML('<div class=\"w-e-menu\"><span class=\"_wangEditor_btn_sourcecode\" onclick=\"window.wangEditor.views.toggleFullscreen(\\'' + editorSelector + '\\')\">源代码</span></div>');\n        },\n        toggleFullscreen: () => {\n          this.textall = HTMLFormat(this.value);\n          this.dialogVisible = true;\n        }\n      };\n      E.views.init(this.domId);\n    },\n  }\n};\n</script>\n<style lang=\"scss\">\n@import \"../../theme-chack/src/index.scss\";\n</style>\n"]}]}