{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/system/post.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/system/post.vue","mtime":1666151205542},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getList, getDetail, add, update, remove } from \"@/api/system/post\";\nimport { mapGetters } from \"vuex\";\nimport website from \"@/config/website\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      query: {},\n      loading: true,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      selectionList: [],\n      option: {\n        height: 'auto',\n        calcHeight: 30,\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        viewBtn: true,\n        selection: true,\n        dialogClickModal: false,\n        column: [{\n          label: \"所属租户\",\n          prop: \"tenantId\",\n          type: \"tree\",\n          dicUrl: \"/api/blade-system/tenant/select\",\n          addDisplay: false,\n          editDisplay: false,\n          viewDisplay: website.tenantMode,\n          span: 24,\n          props: {\n            label: \"tenantName\",\n            value: \"tenantId\"\n          },\n          hide: !website.tenantMode,\n          rules: [{\n            required: true,\n            message: \"请输入所属租户\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"岗位类型\",\n          prop: \"category\",\n          type: \"select\",\n          dicUrl: \"/api/blade-system/dict/dictionary?code=post_category\",\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          dataType: \"number\",\n          slot: true,\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请选择岗位类型\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"岗位编号\",\n          prop: \"postCode\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入岗位编号\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"岗位名称\",\n          prop: \"postName\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入岗位名称\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"岗位排序\",\n          prop: \"sort\",\n          type: \"number\",\n          rules: [{\n            required: true,\n            message: \"请输入岗位排序\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"岗位描述\",\n          prop: \"remark\",\n          type: \"textarea\",\n          span: 24,\n          minRows: 6,\n          hide: true\n        }]\n      },\n      data: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.post_add, false),\n        viewBtn: this.vaildData(this.permission.post_view, false),\n        delBtn: this.vaildData(this.permission.post_delete, false),\n        editBtn: this.vaildData(this.permission.post_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    rowSave: function rowSave(row, done, loading) {\n      var _this = this;\n\n      add(row).then(function () {\n        _this.onLoad(_this.page);\n\n        _this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this2 = this;\n\n      update(row).then(function () {\n        _this2.onLoad(_this2.page);\n\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this3 = this;\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this3.onLoad(_this3.page);\n\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    handleDelete: function handleDelete() {\n      var _this4 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this4.ids);\n      }).then(function () {\n        _this4.onLoad(_this4.page);\n\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this4.$refs.crud.toggleSelection();\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this5 = this;\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDetail(this.form.id).then(function (res) {\n          _this5.form = res.data.data;\n        });\n      }\n\n      done();\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this6 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(function (res) {\n        var data = res.data.data;\n        _this6.page.total = data.total;\n        _this6.data = data.records;\n        _this6.loading = false;\n\n        _this6.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":"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","names":["data","form","query","loading","page","pageSize","currentPage","total","selectionList","option","height","calcHeight","tip","searchShow","searchMenuSpan","border","index","viewBtn","selection","dialogClickModal","column","label","prop","type","dicUrl","addDisplay","editDisplay","viewDisplay","span","props","value","hide","rules","required","message","trigger","dataType","slot","search","minRows","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","methods","rowSave","row","done","add","window","rowUpdate","update","rowDel","confirmButtonText","cancelButtonText","then","handleDelete","beforeOpen","getDetail","searchReset","searchChange","params","selectionChange","list","selectionClear","currentChange","sizeChange","refreshChange","onLoad","getList"],"sourceRoot":"src/views/system","sources":["post.vue"],"sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               :page.sync=\"page\"\n               :permission=\"permissionList\"\n               :before-open=\"beforeOpen\"\n               v-model=\"form\"\n               ref=\"crud\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               @row-del=\"rowDel\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\">\n      <template slot=\"menuLeft\">\n        <el-button type=\"danger\"\n                   size=\"small\"\n                   icon=\"el-icon-delete\"\n                   plain\n                   v-if=\"permission.post_delete\"\n                   @click=\"handleDelete\">删 除\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\"\n                slot=\"category\">\n        <el-tag>{{row.categoryName}}</el-tag>\n      </template>\n    </avue-crud>\n  </basic-container>\n</template>\n\n<script>\n  import {getList, getDetail, add, update, remove} from \"@/api/system/post\";\n  import {mapGetters} from \"vuex\";\n  import website from \"@/config/website\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        query: {},\n        loading: true,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        selectionList: [],\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          viewBtn: true,\n          selection: true,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"所属租户\",\n              prop: \"tenantId\",\n              type: \"tree\",\n              dicUrl: \"/api/blade-system/tenant/select\",\n              addDisplay: false,\n              editDisplay: false,\n              viewDisplay: website.tenantMode,\n              span: 24,\n              props: {\n                label: \"tenantName\",\n                value: \"tenantId\"\n              },\n              hide: !website.tenantMode,\n              rules: [{\n                required: true,\n                message: \"请输入所属租户\",\n                trigger: \"click\"\n              }]\n            },\n            {\n              label: \"岗位类型\",\n              prop: \"category\",\n              type: \"select\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=post_category\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              slot: true,\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请选择岗位类型\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"岗位编号\",\n              prop: \"postCode\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入岗位编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"岗位名称\",\n              prop: \"postName\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入岗位名称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"岗位排序\",\n              prop: \"sort\",\n              type: \"number\",\n              rules: [{\n                required: true,\n                message: \"请输入岗位排序\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"岗位描述\",\n              prop: \"remark\",\n              type: \"textarea\",\n              span: 24,\n              minRows: 6,\n              hide: true,\n            },\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.post_add, false),\n          viewBtn: this.vaildData(this.permission.post_view, false),\n          delBtn: this.vaildData(this.permission.post_delete, false),\n          editBtn: this.vaildData(this.permission.post_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getDetail(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n\n<style>\n</style>\n"]}]}