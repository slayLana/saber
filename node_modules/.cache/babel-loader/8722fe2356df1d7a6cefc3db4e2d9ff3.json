{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/work/done.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/work/done.vue","mtime":1666151205547},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { mapGetters } from \"vuex\";\nimport { doneList } from \"@/api/work/work\";\nimport { flowCategory, flowRoute } from \"@/util/flow\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      selectionId: '',\n      selectionList: [],\n      query: {},\n      loading: true,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      processInstanceId: '',\n      flowBox: false,\n      workBox: false,\n      option: {\n        height: 'auto',\n        calcHeight: 30,\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        selection: true,\n        editBtn: false,\n        addBtn: false,\n        viewBtn: false,\n        delBtn: false,\n        dialogWidth: 900,\n        menuWidth: 150,\n        dialogClickModal: false,\n        column: [{\n          label: \"流程分类\",\n          type: \"select\",\n          row: true,\n          dicUrl: \"/api/blade-system/dict/dictionary?code=flow\",\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          dataType: \"number\",\n          slot: true,\n          prop: \"category\",\n          search: true,\n          hide: true,\n          width: 100\n        }, {\n          label: '流程名称',\n          prop: 'processDefinitionName',\n          search: true\n        }, {\n          label: '当前步骤',\n          prop: 'taskName'\n        }, {\n          label: '流程版本',\n          prop: 'processDefinitionVersion',\n          slot: true,\n          width: 80\n        }, {\n          label: '申请时间',\n          prop: 'createTime',\n          width: 165\n        }]\n      },\n      data: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\", \"flowRoutes\"])), {}, {\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    handleDetail: function handleDetail(row) {\n      this.$router.push({\n        path: \"/work/process/\".concat(flowRoute(this.flowRoutes, row.category), \"/detail/\").concat(row.processInstanceId, \"/\").concat(row.businessId)\n      });\n    },\n    handleImage: function handleImage(row) {\n      this.processInstanceId = row.processInstanceId;\n      this.flowBox = true;\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var query = _objectSpread(_objectSpread({}, this.query), {}, {\n        category: params.category ? flowCategory(params.category) : null\n      });\n\n      this.loading = true;\n      doneList(page.currentPage, page.pageSize, Object.assign(params, query)).then(function (res) {\n        var data = res.data.data;\n        _this.page.total = data.total;\n        _this.data = data.records;\n        _this.loading = false;\n\n        _this.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;AAuCA;AACA;AACA;AAEA;EACAA,IADA,kBACA;IACA;MACAC,QADA;MAEAC,eAFA;MAGAC,iBAHA;MAIAC,SAJA;MAKAC,aALA;MAMAC;QACAC,YADA;QAEAC,cAFA;QAGAC;MAHA,CANA;MAWAC,qBAXA;MAYAC,cAZA;MAaAC,cAbA;MAcAC;QACAC,cADA;QAEAC,cAFA;QAGAC,UAHA;QAIAC,gBAJA;QAKAC,iBALA;QAMAC,YANA;QAOAC,WAPA;QAQAC,eARA;QASAC,cATA;QAUAC,aAVA;QAWAC,cAXA;QAYAC,aAZA;QAaAC,gBAbA;QAcAC,cAdA;QAeAC,uBAfA;QAgBAC,SACA;UACAC,aADA;UAEAC,cAFA;UAGAC,SAHA;UAIAC,qDAJA;UAKAC;YACAJ,kBADA;YAEAK;UAFA,CALA;UASAC,kBATA;UAUAC,UAVA;UAWAC,gBAXA;UAYAC,YAZA;UAaAC,UAbA;UAcAC;QAdA,CADA,EAiBA;UACAX,aADA;UAEAQ,6BAFA;UAGAC;QAHA,CAjBA,EAsBA;UACAT,aADA;UAEAQ;QAFA,CAtBA,EA0BA;UACAR,aADA;UAEAQ,gCAFA;UAGAD,UAHA;UAIAI;QAJA,CA1BA,EAgCA;UACAX,aADA;UAEAQ,kBAFA;UAGAG;QAHA,CAhCA;MAhBA,CAdA;MAqEAzC;IArEA;EAuEA,CAzEA;EA0EA0C,0CACAC,wCADA;IAEAC,GAFA,iBAEA;MACA;MACA;QACAA;MACA,CAFA;MAGA;IACA;EARA,EA1EA;EAoFAC;IACAC,WADA,yBACA;MACA;MACA;IACA,CAJA;IAKAC,YALA,wBAKAC,MALA,EAKAC,IALA,EAKA;MACA;MACA;MACA;MACAA;IACA,CAVA;IAWAC,eAXA,2BAWAC,IAXA,EAWA;MACA;IACA,CAbA;IAcAC,cAdA,4BAcA;MACA;MACA;IACA,CAjBA;IAkBAC,YAlBA,wBAkBArB,GAlBA,EAkBA;MACA;QAAAsB;MAAA;IACA,CApBA;IAqBAC,WArBA,uBAqBAvB,GArBA,EAqBA;MACA;MACA;IACA,CAxBA;IAyBAwB,aAzBA,yBAyBAhD,WAzBA,EAyBA;MACA;IACA,CA3BA;IA4BAiD,UA5BA,sBA4BAlD,QA5BA,EA4BA;MACA;IACA,CA9BA;IA+BAmD,aA/BA,2BA+BA;MACA;IACA,CAjCA;IAkCAC,MAlCA,kBAkCArD,IAlCA,EAkCA;MAAA;;MAAA;;MACA,4CACA,UADA;QAEAsD;MAFA;;MAIA;MACAC;QACA;QACA;QACA;QACA;;QACA;MACA,CANA;IAOA;EA/CA;AApFA","names":["data","form","selectionId","selectionList","query","loading","page","pageSize","currentPage","total","processInstanceId","flowBox","workBox","option","height","calcHeight","tip","searchShow","searchMenuSpan","border","index","selection","editBtn","addBtn","viewBtn","delBtn","dialogWidth","menuWidth","dialogClickModal","column","label","type","row","dicUrl","props","value","dataType","slot","prop","search","hide","width","computed","mapGetters","ids","methods","searchReset","searchChange","params","done","selectionChange","list","selectionClear","handleDetail","path","handleImage","currentChange","sizeChange","refreshChange","onLoad","category","doneList"],"sourceRoot":"src/views/work","sources":["done.vue"],"sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               ref=\"crud\"\n               v-model=\"form\"\n               :page.sync=\"page\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\">\n      <template slot-scope=\"scope\" slot=\"menu\">\n        <el-button type=\"text\"\n                   size=\"small\"\n                   icon=\"el-icon-info\"\n                   v-if=\"permission.work_done_detail\"\n                   @click.stop=\"handleDetail(scope.row)\">详情\n        </el-button>\n        <el-button type=\"text\"\n                   size=\"small\"\n                   icon=\"el-icon-search\"\n                   v-if=\"permission.work_done_follow\"\n                   @click.stop=\"handleImage(scope.row,scope.index)\">流程图\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\"\n                slot=\"processDefinitionVersion\">\n        <el-tag>v{{row.processDefinitionVersion}}</el-tag>\n      </template>\n    </avue-crud>\n    <flow-design is-dialog :is-display.sync=\"flowBox\" :process-instance-id=\"processInstanceId\"></flow-design>\n  </basic-container>\n</template>\n\n<script>\n  import {mapGetters} from \"vuex\";\n  import {doneList} from \"@/api/work/work\";\n  import {flowCategory, flowRoute} from \"@/util/flow\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionId: '',\n        selectionList: [],\n        query: {},\n        loading: true,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        processInstanceId: '',\n        flowBox: false,\n        workBox: false,\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          selection: true,\n          editBtn: false,\n          addBtn: false,\n          viewBtn: false,\n          delBtn: false,\n          dialogWidth: 900,\n          menuWidth: 150,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"流程分类\",\n              type: \"select\",\n              row: true,\n              dicUrl: \"/api/blade-system/dict/dictionary?code=flow\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              slot: true,\n              prop: \"category\",\n              search: true,\n              hide: true,\n              width: 100,\n            },\n            {\n              label: '流程名称',\n              prop: 'processDefinitionName',\n              search: true,\n            },\n            {\n              label: '当前步骤',\n              prop: 'taskName',\n            },\n            {\n              label: '流程版本',\n              prop: 'processDefinitionVersion',\n              slot: true,\n              width: 80,\n            },\n            {\n              label: '申请时间',\n              prop: 'createTime',\n              width: 165,\n            },\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"permission\", \"flowRoutes\"]),\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      },\n    },\n    methods: {\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDetail(row) {\n        this.$router.push({path: `/work/process/${flowRoute(this.flowRoutes, row.category)}/detail/${row.processInstanceId}/${row.businessId}`});\n      },\n      handleImage(row) {\n        this.processInstanceId = row.processInstanceId;\n        this.flowBox = true;\n      },\n      currentChange(currentPage){\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize){\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        const query = {\n          ...this.query,\n          category: (params.category) ? flowCategory(params.category) : null\n        };\n        this.loading = true;\n        doneList(page.currentPage, page.pageSize, Object.assign(params, query)).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n"]}]}