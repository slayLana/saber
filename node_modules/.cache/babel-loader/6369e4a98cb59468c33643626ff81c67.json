{"remainingRequest":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/bladex/saber/src/views/system/menu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/bladex/saber/src/views/system/menu.vue","mtime":1666151205542},{"path":"/Users/jiang/WorkSpace/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getLazyList, remove, update, add, getMenu } from \"@/api/system/menu\";\nimport { mapGetters } from \"vuex\";\nimport iconList from \"@/config/iconList\";\nimport func from \"@/util/func\";\nimport { getMenuTree } from \"@/api/system/menu\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      query: {},\n      loading: true,\n      selectionList: [],\n      parentId: 0,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      option: {\n        lazy: true,\n        tip: false,\n        simplePage: true,\n        searchShow: true,\n        searchMenuSpan: 6,\n        dialogWidth: \"60%\",\n        tree: true,\n        border: true,\n        index: true,\n        selection: true,\n        viewBtn: true,\n        menuWidth: 300,\n        dialogClickModal: false,\n        column: [{\n          label: \"菜单名称\",\n          prop: \"name\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入菜单名称\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"路由地址\",\n          prop: \"path\",\n          rules: [{\n            required: true,\n            message: \"请输入路由地址\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"上级菜单\",\n          prop: \"parentId\",\n          type: \"tree\",\n          dicData: [],\n          hide: true,\n          addDisabled: false,\n          props: {\n            label: \"title\"\n          },\n          rules: [{\n            required: false,\n            message: \"请选择上级菜单\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"菜单图标\",\n          prop: \"source\",\n          type: \"icon\",\n          slot: true,\n          iconList: iconList,\n          rules: [{\n            required: true,\n            message: \"请输入菜单图标\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"菜单编号\",\n          prop: \"code\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入菜单编号\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单类型\",\n          prop: \"category\",\n          type: \"radio\",\n          dicData: [{\n            label: \"菜单\",\n            value: 1\n          }, {\n            label: \"按钮\",\n            value: 2\n          }],\n          hide: true,\n          rules: [{\n            required: true,\n            message: \"请选择菜单类型\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单别名\",\n          prop: \"alias\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入菜单别名\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"新窗口\",\n          prop: \"isOpen\",\n          type: \"radio\",\n          disabled: false,\n          display: false,\n          dicData: [{\n            label: \"否\",\n            value: 1\n          }, {\n            label: \"是\",\n            value: 2\n          }],\n          value: 1,\n          rules: [{\n            required: true,\n            message: \"请选择新窗口打开\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单排序\",\n          prop: \"sort\",\n          type: \"number\",\n          rules: [{\n            required: true,\n            message: \"请输入菜单排序\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单备注\",\n          prop: \"remark\",\n          type: \"textarea\",\n          span: 24,\n          minRows: 2,\n          hide: true\n        }]\n      },\n      data: []\n    };\n  },\n  watch: {\n    'form.category': function formCategory() {\n      var category = func.toInt(this.form.category);\n      this.$refs.crud.option.column.filter(function (item) {\n        if (item.prop === \"path\") {\n          item.rules[0].required = category === 1;\n        }\n\n        if (item.prop === 'isOpen') {\n          item.disabled = category === 2;\n        }\n      });\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"userInfo\", \"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.menu_add, false),\n        viewBtn: this.vaildData(this.permission.menu_view, false),\n        delBtn: this.vaildData(this.permission.menu_delete, false),\n        editBtn: this.vaildData(this.permission.menu_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    initData: function initData() {\n      var _this = this;\n\n      getMenuTree().then(function (res) {\n        var column = _this.findObject(_this.option.column, \"parentId\");\n\n        column.dicData = res.data.data;\n      });\n    },\n    handleAdd: function handleAdd(row) {\n      this.parentId = row.id;\n      var column = this.findObject(this.option.column, \"parentId\");\n      column.value = row.id;\n      column.addDisabled = true;\n      this.$refs.crud.rowAdd();\n    },\n    rowSave: function rowSave(row, done, loading) {\n      var _this2 = this;\n\n      add(row).then(function (res) {\n        // 获取新增数据的相关字段\n        var data = res.data.data;\n        row.id = data.id;\n\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        }); // 数据回调进行刷新\n\n\n        done(row);\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this3 = this;\n\n      update(row).then(function () {\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        }); // 数据回调进行刷新\n\n\n        done(row);\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row, index, done) {\n      var _this4 = this;\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        }); // 数据回调进行刷新\n\n\n        done(row);\n      });\n    },\n    handleDelete: function handleDelete() {\n      var _this5 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this5.ids);\n      }).then(function () {\n        // 刷新表格数据并重载\n        _this5.data = [];\n        _this5.parentId = 0;\n\n        _this5.$refs.crud.refreshTable();\n\n        _this5.$refs.crud.toggleSelection(); // 表格数据重载\n\n\n        _this5.onLoad(_this5.page);\n\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.parentId = 0;\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.parentId = '';\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this6 = this;\n\n      if ([\"add\", \"edit\"].includes(type)) {\n        this.initData();\n      }\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getMenu(this.form.id).then(function (res) {\n          _this6.form = res.data.data;\n        });\n      }\n\n      done();\n    },\n    beforeClose: function beforeClose(done) {\n      this.parentId = \"\";\n      var column = this.findObject(this.option.column, \"parentId\");\n      column.value = \"\";\n      column.addDisabled = false;\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this7 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getLazyList(this.parentId, Object.assign(params, this.query)).then(function (res) {\n        _this7.data = res.data.data;\n        _this7.loading = false;\n\n        _this7.selectionClear();\n      });\n    },\n    treeLoad: function treeLoad(tree, treeNode, resolve) {\n      var parentId = tree.id;\n      getLazyList(parentId).then(function (res) {\n        resolve(res.data.data);\n      });\n    }\n  }\n};",{"version":3,"mappings":"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","names":["data","form","query","loading","selectionList","parentId","page","pageSize","currentPage","total","option","lazy","tip","simplePage","searchShow","searchMenuSpan","dialogWidth","tree","border","index","selection","viewBtn","menuWidth","dialogClickModal","column","label","prop","search","rules","required","message","trigger","type","dicData","hide","addDisabled","props","slot","iconList","value","disabled","display","span","minRows","watch","item","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","methods","initData","getMenuTree","handleAdd","row","rowSave","done","add","window","rowUpdate","update","rowDel","confirmButtonText","cancelButtonText","then","handleDelete","searchReset","searchChange","params","selectionChange","list","selectionClear","beforeOpen","getMenu","beforeClose","currentChange","sizeChange","refreshChange","onLoad","getLazyList","treeLoad","treeNode","resolve"],"sourceRoot":"src/views/system","sources":["menu.vue"],"sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               ref=\"crud\"\n               v-model=\"form\"\n               :permission=\"permissionList\"\n               :before-open=\"beforeOpen\"\n               :before-close=\"beforeClose\"\n               @row-del=\"rowDel\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\"\n               @tree-load=\"treeLoad\">\n      <template slot=\"menuLeft\">\n        <el-button type=\"danger\"\n                   size=\"small\"\n                   icon=\"el-icon-delete\"\n                   v-if=\"permission.menu_delete\"\n                   plain\n                   @click=\"handleDelete\">删 除\n        </el-button>\n      </template>\n      <template slot-scope=\"scope\" slot=\"menu\">\n        <el-button\n          type=\"text\"\n          icon=\"el-icon-circle-plus-outline\"\n          size=\"small\"\n          @click.stop=\"handleAdd(scope.row,scope.index)\"\n          v-if=\"userInfo.role_name.includes('admin') && scope.row.category === 1\"\n        >新增子项\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\"\n                slot=\"source\">\n        <div style=\"text-align:center\">\n          <i :class=\"row.source\"/>\n        </div>\n      </template>\n    </avue-crud>\n  </basic-container>\n</template>\n\n<script>\n  import {getLazyList, remove, update, add, getMenu} from \"@/api/system/menu\";\n  import {mapGetters} from \"vuex\";\n  import iconList from \"@/config/iconList\";\n  import func from \"@/util/func\";\n  import {getMenuTree} from \"@/api/system/menu\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        query: {},\n        loading: true,\n        selectionList: [],\n        parentId: 0,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0,\n        },\n        option: {\n          lazy: true,\n          tip: false,\n          simplePage: true,\n          searchShow: true,\n          searchMenuSpan: 6,\n          dialogWidth: \"60%\",\n          tree: true,\n          border: true,\n          index: true,\n          selection: true,\n          viewBtn: true,\n          menuWidth: 300,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"菜单名称\",\n              prop: \"name\",\n              search: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单名称\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"路由地址\",\n              prop: \"path\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入路由地址\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"上级菜单\",\n              prop: \"parentId\",\n              type: \"tree\",\n              dicData: [],\n              hide: true,\n              addDisabled: false,\n              props: {\n                label: \"title\"\n              },\n              rules: [\n                {\n                  required: false,\n                  message: \"请选择上级菜单\",\n                  trigger: \"click\"\n                }\n              ]\n            },\n            {\n              label: \"菜单图标\",\n              prop: \"source\",\n              type: \"icon\",\n              slot: true,\n              iconList: iconList,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单图标\",\n                  trigger: \"click\"\n                }\n              ]\n            },\n            {\n              label: \"菜单编号\",\n              prop: \"code\",\n              search: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单编号\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单类型\",\n              prop: \"category\",\n              type: \"radio\",\n              dicData: [\n                {\n                  label: \"菜单\",\n                  value: 1\n                },\n                {\n                  label: \"按钮\",\n                  value: 2\n                }\n              ],\n              hide: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择菜单类型\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单别名\",\n              prop: \"alias\",\n              search: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单别名\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"新窗口\",\n              prop: \"isOpen\",\n              type: \"radio\",\n              disabled: false,\n              display: false,\n              dicData: [\n                {\n                  label: \"否\",\n                  value: 1\n                },\n                {\n                  label: \"是\",\n                  value: 2\n                }\n              ],\n              value: 1,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择新窗口打开\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单排序\",\n              prop: \"sort\",\n              type: \"number\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单排序\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单备注\",\n              prop: \"remark\",\n              type: \"textarea\",\n              span: 24,\n              minRows: 2,\n              hide: true\n            }\n          ]\n        },\n        data: []\n      };\n    },\n    watch: {\n      'form.category'() {\n        const category = func.toInt(this.form.category);\n        this.$refs.crud.option.column.filter(item => {\n          if (item.prop === \"path\") {\n            item.rules[0].required = category === 1;\n          }\n          if (item.prop === 'isOpen') {\n            item.disabled = category === 2;\n          }\n        });\n      },\n    },\n    computed: {\n      ...mapGetters([\"userInfo\", \"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.menu_add, false),\n          viewBtn: this.vaildData(this.permission.menu_view, false),\n          delBtn: this.vaildData(this.permission.menu_delete, false),\n          editBtn: this.vaildData(this.permission.menu_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      initData() {\n        getMenuTree().then(res => {\n          const column = this.findObject(this.option.column, \"parentId\");\n          column.dicData = res.data.data;\n        });\n      },\n      handleAdd(row) {\n        this.parentId = row.id;\n        const column = this.findObject(this.option.column, \"parentId\");\n        column.value = row.id;\n        column.addDisabled = true;\n        this.$refs.crud.rowAdd();\n      },\n      rowSave(row, done, loading) {\n        add(row).then((res) => {\n          // 获取新增数据的相关字段\n          const data = res.data.data;\n          row.id = data.id;\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          // 数据回调进行刷新\n          done(row);\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          // 数据回调进行刷新\n          done(row);\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row, index, done) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            // 数据回调进行刷新\n            done(row);\n          });\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            // 刷新表格数据并重载\n            this.data = [];\n            this.parentId = 0;\n            this.$refs.crud.refreshTable();\n            this.$refs.crud.toggleSelection();\n            // 表格数据重载\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.parentId = 0;\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.parentId = '';\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      beforeOpen(done, type) {\n        if ([\"add\", \"edit\"].includes(type)) {\n          this.initData();\n        }\n        if ([\"edit\", \"view\"].includes(type)) {\n          getMenu(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      beforeClose(done) {\n        this.parentId = \"\";\n        const column = this.findObject(this.option.column, \"parentId\");\n        column.value = \"\";\n        column.addDisabled = false;\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getLazyList(this.parentId, Object.assign(params, this.query)).then(res => {\n          this.data = res.data.data;\n          this.loading = false;\n          this.selectionClear();\n        });\n      },\n      treeLoad(tree, treeNode, resolve) {\n        const parentId = tree.id;\n        getLazyList(parentId).then(res => {\n          resolve(res.data.data);\n        });\n      }\n    }\n  };\n</script>\n\n<style>\n</style>\n"]}]}