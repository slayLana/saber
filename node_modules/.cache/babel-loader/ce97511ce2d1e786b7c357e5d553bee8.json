{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/tool/model.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/tool/model.vue","mtime":1666151205544},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.regexp.replace\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getList, getDetail, add, update, remove, getTableList, getTableInfoByName, getModelPrototype, submitModelPrototype } from \"@/api/tool/model\";\nimport { entityDic, option, optionModel } from \"@/const/tool/model\";\nimport { validatenull } from \"@/util/validate\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      query: {},\n      loading: true,\n      loadingOption: {\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0)'\n      },\n      fullscreenLoading: false,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      selectionList: [],\n      modelBox: false,\n      modelId: 0,\n      datasourceId: 1,\n      tableInfo: {},\n      active: 0,\n      stepStart: 0,\n      stepEnd: 4,\n      data: [],\n      option: option,\n      optionModel: optionModel,\n      formStep: {},\n      fields: [],\n      selectionModelList: []\n    };\n  },\n  watch: {\n    'form.datasourceId': function formDatasourceId() {\n      var _this = this;\n\n      if (!validatenull(this.form.datasourceId)) {\n        var fullLoading = this.$loading(this.loadingOption);\n        getTableList(this.form.datasourceId).then(function (res) {\n          var column = _this.findObject(_this.option.column, \"modelTable\");\n\n          column.dicData = res.data.data;\n          fullLoading.close();\n        }).catch(function () {\n          fullLoading.close();\n        });\n      }\n    },\n    'form.modelTable': function formModelTable() {\n      var _this2 = this;\n\n      if (!validatenull(this.form.modelTable)) {\n        var fullLoading = this.$loading(this.loadingOption);\n        getTableInfoByName(this.form.modelTable, this.form.datasourceId).then(function (res) {\n          var result = res.data;\n\n          if (result.success) {\n            var _result$data = result.data,\n                comment = _result$data.comment,\n                entityName = _result$data.entityName;\n\n            if (validatenull(_this2.form.modelClass)) {\n              _this2.form.modelClass = entityName;\n            }\n\n            if (validatenull(_this2.form.modelName)) {\n              _this2.form.modelName = comment;\n            }\n\n            if (validatenull(_this2.form.modelCode)) {\n              _this2.form.modelCode = entityName.replace(/^\\S/, function (s) {\n                return s.toLowerCase();\n              });\n            }\n\n            fullLoading.close();\n          }\n        });\n      }\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: true,\n        delBtn: true,\n        editBtn: true,\n        viewBtn: false\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    rowSave: function rowSave(row, done, loading) {\n      var _this3 = this;\n\n      add(row).then(function () {\n        done();\n\n        _this3.onLoad(_this3.page);\n\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      }, function (error) {\n        loading();\n        window.console.log(error);\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this4 = this;\n\n      update(row).then(function () {\n        done();\n\n        _this4.onLoad(_this4.page);\n\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      }, function (error) {\n        loading();\n        window.console.log(error);\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this5 = this;\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this5.onLoad(_this5.page);\n\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    handleDelete: function handleDelete() {\n      var _this6 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this6.ids);\n      }).then(function () {\n        _this6.onLoad(_this6.page);\n\n        _this6.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this6.$refs.crud.toggleSelection();\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this7 = this;\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDetail(this.form.id).then(function (res) {\n          _this7.form = res.data.data;\n        });\n      }\n\n      done();\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionModelChange: function selectionModelChange(list) {\n      this.selectionModelList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    onLoad: function onLoad(page) {\n      var _this8 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(function (res) {\n        var data = res.data.data;\n        _this8.page.total = data.total;\n        _this8.data = data.records;\n        _this8.loading = false;\n\n        _this8.selectionClear();\n      });\n    },\n    handleModel: function handleModel(row) {\n      var _this9 = this;\n\n      this.fields = [];\n      this.modelBox = true;\n      this.loading = true;\n      this.modelId = row.id;\n      this.datasourceId = row.datasourceId;\n      getModelPrototype(this.modelId, this.datasourceId).then(function (res) {\n        var result = res.data;\n\n        if (result.success) {\n          _this9.fields = result.data;\n\n          _this9.fields.forEach(function (item) {\n            item.$cellEdit = true;\n            item.modelId = _this9.modelId; // 首次加载配置默认值\n\n            if (validatenull(item.id)) {\n              item.isList = 1;\n              item.isForm = 1;\n              item.isRow = 0;\n              item.isRequired = 0;\n              item.isQuery = 0;\n              item.componentType = \"input\";\n            }\n\n            if (!validatenull(item.name)) {\n              item.jdbcName = item.name;\n              item.jdbcType = item.propertyType; // 根据字段物理类型自动适配实体类型\n\n              if (item.propertyType === \"LocalDateTime\") {\n                item.propertyType = \"Date\";\n                item.propertyEntity = \"java.util.Date\";\n              } else {\n                entityDic.forEach(function (d) {\n                  if (d.label === item.propertyType) {\n                    item.propertyType = d.label;\n                    item.propertyEntity = d.value;\n                  }\n                });\n              }\n            }\n          });\n\n          _this9.loading = false;\n        }\n      });\n    },\n    handleSubmit: function handleSubmit() {\n      var _this10 = this;\n\n      console.log(this.fields);\n      this.$confirm(\"确定提交模型配置?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        _this10.fields.forEach(function (item) {\n          entityDic.forEach(function (d) {\n            if (d.value === item.propertyEntity) {\n              item.propertyType = d.label;\n            }\n          });\n        });\n\n        submitModelPrototype(_this10.fields).then(function (res) {\n          var result = res.data;\n\n          if (result.success) {\n            _this10.$message.success(result.msg);\n\n            _this10.modelBox = false;\n          } else {\n            _this10.$message.error(result.msg);\n          }\n        });\n      });\n    }\n  }\n};",{"version":3,"mappings":"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","names":["getList","getDetail","add","update","remove","getTableList","getTableInfoByName","getModelPrototype","submitModelPrototype","data","form","query","loading","loadingOption","lock","text","spinner","background","fullscreenLoading","page","pageSize","currentPage","total","selectionList","modelBox","modelId","datasourceId","tableInfo","active","stepStart","stepEnd","option","optionModel","formStep","fields","selectionModelList","watch","column","fullLoading","catch","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","viewBtn","ids","methods","rowSave","row","done","type","message","window","rowUpdate","index","rowDel","confirmButtonText","cancelButtonText","then","handleDelete","beforeOpen","searchReset","searchChange","params","selectionChange","list","selectionModelChange","selectionClear","currentChange","sizeChange","onLoad","handleModel","item","entityDic","handleSubmit","console"],"sourceRoot":"src/views/tool","sources":["model.vue"],"sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               :page=\"page\"\n               :permission=\"permissionList\"\n               :before-open=\"beforeOpen\"\n               v-model=\"form\"\n               v-loading.fullscreen.lock=\"fullscreenLoading\"\n               ref=\"crud\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               @row-del=\"rowDel\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @on-load=\"onLoad\">\n      <template slot=\"menuLeft\">\n        <el-button type=\"danger\"\n                   size=\"small\"\n                   icon=\"el-icon-delete\"\n                   plain\n                   @click=\"handleDelete\">删 除\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\" slot=\"menu\">\n        <el-button type=\"text\"\n                   icon=\"el-icon-setting\"\n                   size=\"small\"\n                   plain\n                   class=\"none-border\"\n                   @click.stop=\"handleModel(row)\">模型配置\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\" slot=\"modelTable\">\n        <el-tag>{{ row.modelTable }}</el-tag>\n      </template>\n    </avue-crud>\n    <el-dialog title=\"数据库模型配置\"\n               :visible.sync=\"modelBox\"\n               :fullscreen=\"true\"\n               append-to-body>\n      <avue-crud ref=\"crudModel\" :option=\"optionModel\" :table-loading=\"loading\" :data=\"fields\"></avue-crud>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"danger\" @click=\"modelBox = false\">关 闭</el-button>\n        <el-button type=\"primary\" @click=\"handleSubmit\">提 交</el-button>\n      </span>\n    </el-dialog>\n  </basic-container>\n</template>\n\n<script>\nimport {\n  getList,\n  getDetail,\n  add,\n  update,\n  remove,\n  getTableList,\n  getTableInfoByName,\n  getModelPrototype,\n  submitModelPrototype\n} from \"@/api/tool/model\";\nimport {entityDic, option, optionModel} from \"@/const/tool/model\";\nimport {validatenull} from \"@/util/validate\";\nimport {mapGetters} from \"vuex\";\n\nexport default {\n  data() {\n    return {\n      form: {},\n      query: {},\n      loading: true,\n      loadingOption: {\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0)'\n      },\n      fullscreenLoading: false,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      selectionList: [],\n      modelBox: false,\n      modelId: 0,\n      datasourceId: 1,\n      tableInfo: {},\n      active: 0,\n      stepStart: 0,\n      stepEnd: 4,\n      data: [],\n      option: option,\n      optionModel: optionModel,\n      formStep: {},\n      fields: [],\n      selectionModelList: [],\n    };\n  },\n  watch: {\n    'form.datasourceId'() {\n      if (!validatenull(this.form.datasourceId)) {\n        const fullLoading = this.$loading(this.loadingOption);\n        getTableList(this.form.datasourceId).then(res => {\n          const column = this.findObject(this.option.column, \"modelTable\");\n          column.dicData = res.data.data;\n          fullLoading.close();\n        }).catch(() => {\n          fullLoading.close();\n        })\n      }\n    },\n    'form.modelTable'() {\n      if (!validatenull(this.form.modelTable)) {\n        const fullLoading = this.$loading(this.loadingOption);\n        getTableInfoByName(this.form.modelTable, this.form.datasourceId).then(res => {\n          const result = res.data;\n          if (result.success) {\n            const {comment, entityName} = result.data;\n            if (validatenull(this.form.modelClass)) {\n              this.form.modelClass = entityName;\n            }\n            if (validatenull(this.form.modelName)) {\n              this.form.modelName = comment;\n            }\n            if (validatenull(this.form.modelCode)) {\n              this.form.modelCode = entityName.replace(/^\\S/, s => s.toLowerCase());\n            }\n            fullLoading.close();\n          }\n        });\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\"permission\"]),\n    permissionList() {\n      return {\n        addBtn: true,\n        delBtn: true,\n        editBtn: true,\n        viewBtn: false\n      };\n    },\n    ids() {\n      let ids = [];\n      this.selectionList.forEach(ele => {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    },\n  },\n  methods: {\n    rowSave(row, done, loading) {\n      add(row).then(() => {\n        done();\n        this.onLoad(this.page);\n        this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      }, error => {\n        loading();\n        window.console.log(error);\n      });\n    },\n    rowUpdate(row, index, done, loading) {\n      update(row).then(() => {\n        done();\n        this.onLoad(this.page);\n        this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      }, error => {\n        loading();\n        window.console.log(error);\n      });\n    },\n    rowDel(row) {\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      })\n        .then(() => {\n          return remove(row.id);\n        })\n        .then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n        });\n    },\n    handleDelete() {\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      })\n        .then(() => {\n          return remove(this.ids);\n        })\n        .then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          this.$refs.crud.toggleSelection();\n        });\n    },\n    beforeOpen(done, type) {\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDetail(this.form.id).then(res => {\n          this.form = res.data.data;\n        });\n      }\n      done();\n    },\n    searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange(params, done) {\n      this.query = params;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionModelChange(list) {\n      this.selectionModelList = list;\n    },\n    selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    onLoad(page, params = {}) {\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n        const data = res.data.data;\n        this.page.total = data.total;\n        this.data = data.records;\n        this.loading = false;\n        this.selectionClear();\n      });\n    },\n    handleModel(row) {\n      this.fields = [];\n      this.modelBox = true;\n      this.loading = true;\n      this.modelId = row.id;\n      this.datasourceId = row.datasourceId;\n      getModelPrototype(this.modelId, this.datasourceId).then(res => {\n        const result = res.data;\n        if (result.success) {\n          this.fields = result.data;\n          this.fields.forEach(item => {\n            item.$cellEdit = true;\n            item.modelId = this.modelId;\n            // 首次加载配置默认值\n            if (validatenull(item.id)) {\n              item.isList = 1;\n              item.isForm = 1;\n              item.isRow = 0;\n              item.isRequired = 0;\n              item.isQuery = 0;\n              item.componentType = \"input\";\n            }\n            if (!validatenull(item.name)) {\n              item.jdbcName = item.name;\n              item.jdbcType = item.propertyType;\n              // 根据字段物理类型自动适配实体类型\n              if (item.propertyType === \"LocalDateTime\") {\n                item.propertyType = \"Date\";\n                item.propertyEntity = \"java.util.Date\";\n              } else {\n                entityDic.forEach(d => {\n                  if (d.label === item.propertyType) {\n                    item.propertyType = d.label;\n                    item.propertyEntity = d.value;\n                  }\n                });\n              }\n            }\n          });\n          this.loading = false;\n        }\n      });\n    },\n    handleSubmit() {\n      console.log(this.fields);\n      this.$confirm(\"确定提交模型配置?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(() => {\n        this.fields.forEach(item => {\n          entityDic.forEach(d => {\n            if (d.value === item.propertyEntity) {\n              item.propertyType = d.label;\n            }\n          });\n        });\n        submitModelPrototype(this.fields).then(res => {\n          const result = res.data;\n          if (result.success) {\n            this.$message.success(result.msg);\n            this.modelBox = false;\n          } else {\n            this.$message.error(result.msg);\n          }\n        })\n      });\n\n    }\n  }\n};\n</script>\n\n<style>\n.none-border {\n  border: 0;\n  background-color: transparent !important;\n}\n\n.step-div {\n  margin-top: 30px;\n}\n</style>\n"]}]}