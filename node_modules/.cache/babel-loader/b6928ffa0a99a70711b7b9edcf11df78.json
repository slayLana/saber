{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/eslint-loader/index.js??ref--13-0!/Users/jiang/WorkSpace/code/bladex/saber/src/router/axios.js","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/router/axios.js","mtime":1666151205529},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/eslint-loader/index.js","mtime":1666157452476}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n\n/*\n * @Description: \n * @Author: LiangTao\n * @Date: 2022-09-06 14:22:34\n * @LastEditTime: 2022-10-15 22:09:42\n * @LastEditors: LiangTao\n * @Reference: \n */\n\n/**\n * 全站http配置\n *\n * axios参数说明\n * isSerialize是否开启form表单提交\n * isToken是否需要token\n */\nimport axios from 'axios';\nimport store from '@/store/';\nimport router from '@/router/router';\nimport { serialize } from '@/util/util';\nimport { getToken } from '@/util/auth';\nimport { Message } from 'element-ui';\nimport website from '@/config/website';\nimport { Base64 } from 'js-base64';\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css'; //默认超时时间\n\naxios.defaults.timeout = 40000; //返回其他状态码\n\naxios.defaults.validateStatus = function (status) {\n  return status >= 200 && status <= 500;\n}; //跨域请求，允许保存cookie\n\n\naxios.defaults.withCredentials = true; // NProgress 配置\n\nNProgress.configure({\n  showSpinner: false\n}); //http request拦截\n\naxios.interceptors.request.use(function (config) {\n  //开启 progress bar\n  NProgress.start(); //headers判断是否需要\n\n  var authorization = config.authorization === false;\n\n  if (!authorization) {\n    config.headers['Authorization'] = \"Basic \".concat(Base64.encode(\"\".concat(website.clientId, \":\").concat(website.clientSecret)));\n  } //让每个请求携带token\n\n\n  var meta = config.meta || {};\n  var isToken = meta.isToken === false;\n\n  if (getToken() && !isToken) {\n    config.headers[website.tokenHeader] = 'bearer ' + getToken();\n  } //headers中配置text请求\n\n\n  if (config.text === true) {\n    config.headers[\"Content-Type\"] = \"text/plain\";\n  } //headers中配置serialize为true开启序列化\n\n\n  if (config.method === 'post' && meta.isSerialize === true) {\n    config.data = serialize(config.data);\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); //http response 拦截\n\naxios.interceptors.response.use(function (res) {\n  //关闭 progress bar\n  NProgress.done(); //获取状态码\n\n  var status = res.data.code || res.status;\n  var statusWhiteList = website.statusWhiteList || [];\n  var message = res.data.msg || res.data.error_description || '未知错误'; //如果在白名单里则自行catch逻辑处理\n\n  if (statusWhiteList.includes(status)) return Promise.reject(res); //如果是401则跳转到登录页面\n\n  if (status === 401) store.dispatch('FedLogOut').then(function () {\n    return router.push({\n      path: '/login'\n    });\n  }); // 如果请求为非200否者默认统一处理\n\n  if (status !== 200) {\n    Message({\n      message: message,\n      type: 'error'\n    });\n    return Promise.reject(new Error(message));\n  }\n\n  return res;\n}, function (error) {\n  NProgress.done();\n  return Promise.reject(new Error(error));\n});\nexport default axios;",{"version":3,"names":["axios","store","router","serialize","getToken","Message","website","Base64","NProgress","defaults","timeout","validateStatus","status","withCredentials","configure","showSpinner","interceptors","request","use","config","start","authorization","headers","encode","clientId","clientSecret","meta","isToken","tokenHeader","text","method","isSerialize","data","error","Promise","reject","response","res","done","code","statusWhiteList","message","msg","error_description","includes","dispatch","then","push","path","type","Error"],"sources":["/Users/jiang/WorkSpace/code/bladex/saber/src/router/axios.js"],"sourcesContent":["/*\n * @Description: \n * @Author: LiangTao\n * @Date: 2022-09-06 14:22:34\n * @LastEditTime: 2022-10-15 22:09:42\n * @LastEditors: LiangTao\n * @Reference: \n */\n/**\n * 全站http配置\n *\n * axios参数说明\n * isSerialize是否开启form表单提交\n * isToken是否需要token\n */\nimport axios from 'axios';\nimport store from '@/store/';\nimport router from '@/router/router';\nimport {serialize} from '@/util/util';\nimport {getToken} from '@/util/auth';\nimport {Message} from 'element-ui';\nimport website from '@/config/website';\nimport {Base64} from 'js-base64';\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\n\n//默认超时时间\naxios.defaults.timeout = 40000;\n//返回其他状态码\naxios.defaults.validateStatus = function (status) {\n  return status >= 200 && status <= 500;\n};\n//跨域请求，允许保存cookie\naxios.defaults.withCredentials = true;\n// NProgress 配置\nNProgress.configure({\n  showSpinner: false\n});\n//http request拦截\naxios.interceptors.request.use(config => {\n  //开启 progress bar\n  NProgress.start();\n  //headers判断是否需要\n  const authorization = config.authorization === false;\n  if (!authorization) {\n    config.headers['Authorization'] = `Basic ${Base64.encode(`${website.clientId}:${website.clientSecret}`)}`;\n  }\n  //让每个请求携带token\n  const meta = (config.meta || {});\n  const isToken = meta.isToken === false;\n  if (getToken() && !isToken) {\n    config.headers[website.tokenHeader] = 'bearer ' + getToken()\n  }\n  //headers中配置text请求\n  if (config.text === true) {\n    config.headers[\"Content-Type\"] = \"text/plain\";\n  }\n  //headers中配置serialize为true开启序列化\n  if (config.method === 'post' && meta.isSerialize === true) {\n    config.data = serialize(config.data);\n  }\n  return config\n}, error => {\n  return Promise.reject(error)\n});\n//http response 拦截\naxios.interceptors.response.use(res => {\n  //关闭 progress bar\n  NProgress.done();\n  //获取状态码\n  const status = res.data.code || res.status;\n  const statusWhiteList = website.statusWhiteList || [];\n  const message = res.data.msg || res.data.error_description || '未知错误';\n  //如果在白名单里则自行catch逻辑处理\n  if (statusWhiteList.includes(status)) return Promise.reject(res);\n  //如果是401则跳转到登录页面\n  if (status === 401) store.dispatch('FedLogOut').then(() => router.push({path: '/login'}));\n  // 如果请求为非200否者默认统一处理\n  if (status !== 200) {\n    Message({\n      message: message,\n      type: 'error'\n    });\n    return Promise.reject(new Error(message))\n  }\n  return res;\n}, error => {\n  NProgress.done();\n  return Promise.reject(new Error(error));\n});\n\nexport default axios;\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,yBAAP,C,CAEA;;AACAR,KAAK,CAACS,QAAN,CAAeC,OAAf,GAAyB,KAAzB,C,CACA;;AACAV,KAAK,CAACS,QAAN,CAAeE,cAAf,GAAgC,UAAUC,MAAV,EAAkB;EAChD,OAAOA,MAAM,IAAI,GAAV,IAAiBA,MAAM,IAAI,GAAlC;AACD,CAFD,C,CAGA;;;AACAZ,KAAK,CAACS,QAAN,CAAeI,eAAf,GAAiC,IAAjC,C,CACA;;AACAL,SAAS,CAACM,SAAV,CAAoB;EAClBC,WAAW,EAAE;AADK,CAApB,E,CAGA;;AACAf,KAAK,CAACgB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAAC,MAAM,EAAI;EACvC;EACAX,SAAS,CAACY,KAAV,GAFuC,CAGvC;;EACA,IAAMC,aAAa,GAAGF,MAAM,CAACE,aAAP,KAAyB,KAA/C;;EACA,IAAI,CAACA,aAAL,EAAoB;IAClBF,MAAM,CAACG,OAAP,CAAe,eAAf,oBAA2Cf,MAAM,CAACgB,MAAP,WAAiBjB,OAAO,CAACkB,QAAzB,cAAqClB,OAAO,CAACmB,YAA7C,EAA3C;EACD,CAPsC,CAQvC;;;EACA,IAAMC,IAAI,GAAIP,MAAM,CAACO,IAAP,IAAe,EAA7B;EACA,IAAMC,OAAO,GAAGD,IAAI,CAACC,OAAL,KAAiB,KAAjC;;EACA,IAAIvB,QAAQ,MAAM,CAACuB,OAAnB,EAA4B;IAC1BR,MAAM,CAACG,OAAP,CAAehB,OAAO,CAACsB,WAAvB,IAAsC,YAAYxB,QAAQ,EAA1D;EACD,CAbsC,CAcvC;;;EACA,IAAIe,MAAM,CAACU,IAAP,KAAgB,IAApB,EAA0B;IACxBV,MAAM,CAACG,OAAP,CAAe,cAAf,IAAiC,YAAjC;EACD,CAjBsC,CAkBvC;;;EACA,IAAIH,MAAM,CAACW,MAAP,KAAkB,MAAlB,IAA4BJ,IAAI,CAACK,WAAL,KAAqB,IAArD,EAA2D;IACzDZ,MAAM,CAACa,IAAP,GAAc7B,SAAS,CAACgB,MAAM,CAACa,IAAR,CAAvB;EACD;;EACD,OAAOb,MAAP;AACD,CAvBD,EAuBG,UAAAc,KAAK,EAAI;EACV,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAzBD,E,CA0BA;;AACAjC,KAAK,CAACgB,YAAN,CAAmBoB,QAAnB,CAA4BlB,GAA5B,CAAgC,UAAAmB,GAAG,EAAI;EACrC;EACA7B,SAAS,CAAC8B,IAAV,GAFqC,CAGrC;;EACA,IAAM1B,MAAM,GAAGyB,GAAG,CAACL,IAAJ,CAASO,IAAT,IAAiBF,GAAG,CAACzB,MAApC;EACA,IAAM4B,eAAe,GAAGlC,OAAO,CAACkC,eAAR,IAA2B,EAAnD;EACA,IAAMC,OAAO,GAAGJ,GAAG,CAACL,IAAJ,CAASU,GAAT,IAAgBL,GAAG,CAACL,IAAJ,CAASW,iBAAzB,IAA8C,MAA9D,CANqC,CAOrC;;EACA,IAAIH,eAAe,CAACI,QAAhB,CAAyBhC,MAAzB,CAAJ,EAAsC,OAAOsB,OAAO,CAACC,MAAR,CAAeE,GAAf,CAAP,CARD,CASrC;;EACA,IAAIzB,MAAM,KAAK,GAAf,EAAoBX,KAAK,CAAC4C,QAAN,CAAe,WAAf,EAA4BC,IAA5B,CAAiC;IAAA,OAAM5C,MAAM,CAAC6C,IAAP,CAAY;MAACC,IAAI,EAAE;IAAP,CAAZ,CAAN;EAAA,CAAjC,EAViB,CAWrC;;EACA,IAAIpC,MAAM,KAAK,GAAf,EAAoB;IAClBP,OAAO,CAAC;MACNoC,OAAO,EAAEA,OADH;MAENQ,IAAI,EAAE;IAFA,CAAD,CAAP;IAIA,OAAOf,OAAO,CAACC,MAAR,CAAe,IAAIe,KAAJ,CAAUT,OAAV,CAAf,CAAP;EACD;;EACD,OAAOJ,GAAP;AACD,CApBD,EAoBG,UAAAJ,KAAK,EAAI;EACVzB,SAAS,CAAC8B,IAAV;EACA,OAAOJ,OAAO,CAACC,MAAR,CAAe,IAAIe,KAAJ,CAAUjB,KAAV,CAAf,CAAP;AACD,CAvBD;AAyBA,eAAejC,KAAf"}]}