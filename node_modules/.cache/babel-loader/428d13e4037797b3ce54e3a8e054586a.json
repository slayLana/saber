{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/tool/code.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/tool/code.vue","mtime":1666151205543},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getList, getCode, build, remove, add, update, copy } from \"@/api/tool/code\";\nimport { getDetail as modelDetail, prototypeDetail } from \"@/api/tool/model\";\nimport { templateDic } from \"@/const/tool/model\";\nimport { validatenull } from \"@/util/validate\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      selectionList: [],\n      loading: true,\n      query: {},\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      option: {\n        height: 'auto',\n        calcHeight: 30,\n        dialogWidth: 900,\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        selection: true,\n        labelWidth: 120,\n        menuWidth: 300,\n        viewBtn: true,\n        dialogClickModal: false,\n        tabs: true,\n        column: [{\n          label: \"模块名\",\n          prop: \"codeName\",\n          search: true,\n          display: false\n        }, {\n          label: '模版类型',\n          prop: 'templateType',\n          type: \"select\",\n          dicData: templateDic,\n          display: false\n        }, {\n          label: \"表名\",\n          prop: \"tableName\",\n          search: true,\n          display: false\n        }, {\n          label: \"服务名\",\n          prop: \"serviceName\",\n          search: true,\n          display: false\n        }, {\n          label: \"包名\",\n          prop: \"packageName\",\n          display: false\n        }],\n        group: [{\n          label: '模型配置',\n          prop: 'modelSetting',\n          icon: 'el-icon-tickets',\n          column: [{\n            label: \"数据模型\",\n            prop: \"modelId\",\n            search: true,\n            span: 24,\n            type: \"select\",\n            dicUrl: \"/api/blade-develop/model/select\",\n            props: {\n              label: \"modelName\",\n              value: \"id\"\n            },\n            rules: [{\n              required: true,\n              message: \"请选择数据模型\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"模块名\",\n            prop: \"codeName\",\n            search: true,\n            rules: [{\n              required: true,\n              message: \"请输入模块名\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"服务名\",\n            prop: \"serviceName\",\n            search: true,\n            rules: [{\n              required: true,\n              message: \"请输入服务名\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"表名\",\n            prop: \"tableName\",\n            rules: [{\n              required: true,\n              message: \"请输入表名\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"表前缀\",\n            prop: \"tablePrefix\",\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请输入表前缀\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"主键名\",\n            prop: \"pkName\",\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请输入主键名\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"包名\",\n            prop: \"packageName\",\n            overHidden: true,\n            rules: [{\n              required: true,\n              message: \"请输入包名\",\n              trigger: \"blur\"\n            }]\n          }]\n        }, {\n          label: '模版配置',\n          prop: 'templateSetting',\n          icon: 'el-icon-copy-document',\n          column: [{\n            label: '模版类型',\n            prop: 'templateType',\n            type: \"select\",\n            dicData: templateDic,\n            value: \"crud\",\n            rules: [{\n              required: true,\n              message: \"请选择模版类型\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"作者信息\",\n            prop: \"author\",\n            value: \"BladeX\",\n            rules: [{\n              required: true,\n              message: \"请输入作者\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"子表模型\",\n            prop: \"subModelId\",\n            type: \"select\",\n            dicUrl: \"/api/blade-develop/model/select\",\n            props: {\n              label: \"modelName\",\n              value: \"id\"\n            },\n            display: false,\n            hide: true\n          }, {\n            label: \"子表外键\",\n            prop: \"subFkId\",\n            display: false,\n            hide: true\n          }, {\n            label: \"树主键字段\",\n            prop: \"treeId\",\n            type: \"select\",\n            dicData: [],\n            props: {\n              label: \"comment\",\n              value: \"jdbcName\"\n            },\n            display: false,\n            hide: true\n          }, {\n            label: \"树父主键字段\",\n            prop: \"treePid\",\n            type: \"select\",\n            dicData: [],\n            props: {\n              label: \"comment\",\n              value: \"jdbcName\"\n            },\n            display: false,\n            hide: true\n          }, {\n            label: \"树名称字段\",\n            prop: \"treeName\",\n            type: \"select\",\n            dicData: [],\n            props: {\n              label: \"comment\",\n              value: \"jdbcName\"\n            },\n            display: false,\n            hide: true\n          }]\n        }, {\n          label: '生成配置',\n          prop: 'codingSetting',\n          icon: 'el-icon-printer',\n          column: [{\n            label: \"基础业务\",\n            labelTip: '配置是否使用BladeX封装的BaseService解锁更多功能',\n            prop: \"baseMode\",\n            type: 'radio',\n            dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n            props: {\n              label: \"dictValue\",\n              value: \"dictKey\"\n            },\n            value: 2,\n            dataType: \"number\",\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请选择基础业务\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"包装器\",\n            labelTip: '配置是否使用Wrapper包装器来拓展Controller返回列表的字段',\n            prop: \"wrapMode\",\n            type: 'radio',\n            dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n            props: {\n              label: \"dictValue\",\n              value: \"dictKey\"\n            },\n            value: 2,\n            dataType: \"number\",\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请选择包装器\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"远程调用\",\n            labelTip: '配置是否使用Feign远程调用',\n            prop: \"feignMode\",\n            type: 'radio',\n            dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n            props: {\n              label: \"dictValue\",\n              value: \"dictKey\"\n            },\n            value: 1,\n            dataType: \"number\",\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请选择基础业务\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"代码风格\",\n            labelTip: '选择不同底层实现的代码模版',\n            prop: \"codeStyle\",\n            type: 'radio',\n            dicData: [{\n              label: \"saber\",\n              value: \"saber\"\n            }, {\n              label: \"element\",\n              value: \"element\"\n            }],\n            value: \"saber\",\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请选择代码风格\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"后端生成路径\",\n            prop: \"apiPath\",\n            span: 24,\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请输入后端生成路径\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"前端生成路径\",\n            prop: \"webPath\",\n            span: 24,\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请输入前端生成路径\",\n              trigger: \"blur\"\n            }]\n          }]\n        }]\n      },\n      data: []\n    };\n  },\n  watch: {\n    'form.modelId': function formModelId() {\n      var _this = this;\n\n      if (!validatenull(this.form.modelId)) {\n        // 获取数据模型信息\n        modelDetail(this.form.modelId).then(function (res) {\n          var result = res.data;\n\n          if (result.success) {\n            var _result$data = result.data,\n                modelName = _result$data.modelName,\n                modelTable = _result$data.modelTable,\n                modelCode = _result$data.modelCode;\n\n            if (validatenull(_this.form.tablePrefix)) {\n              _this.form.tablePrefix = modelTable.split(\"_\")[0] + \"_\";\n            }\n\n            if (validatenull(_this.form.tableName)) {\n              _this.form.tableName = modelTable;\n            }\n\n            if (validatenull(_this.form.codeName)) {\n              _this.form.codeName = modelName;\n            }\n\n            if (validatenull(_this.form.serviceName)) {\n              _this.form.serviceName = \"blade-\".concat(modelCode);\n            }\n\n            if (validatenull(_this.form.pkName)) {\n              _this.form.pkName = \"id\";\n            }\n\n            if (validatenull(_this.form.packageName)) {\n              _this.form.packageName = \"org.springblade.\".concat(modelCode);\n            }\n\n            if (validatenull(_this.form.subFkId) && !validatenull(_this.form.tablePrefix)) {\n              _this.form.subFkId = modelTable.replace(_this.form.tablePrefix, \"\") + \"_id\";\n            } // 获取数据原型信息\n\n\n            prototypeDetail(_this.form.modelId).then(function (res) {\n              var result = res.data;\n\n              if (result.success) {\n                var columnTreeId = _this.findObject(_this.option.group, \"treeId\");\n\n                var columnTreePid = _this.findObject(_this.option.group, \"treePid\");\n\n                var columnTreeName = _this.findObject(_this.option.group, \"treeName\");\n\n                columnTreeId.dicData = result.data;\n                columnTreePid.dicData = result.data;\n                columnTreeName.dicData = result.data;\n              }\n            });\n          }\n        });\n      }\n    },\n    'form.templateType': function formTemplateType() {\n      // 模版类型\n      var type = this.form.templateType; // 主子表字段显隐\n\n      var columnSubModelId = this.findObject(this.option.group, \"subModelId\");\n      var columnSubFkId = this.findObject(this.option.group, \"subFkId\");\n      columnSubModelId.display = type === \"sub\";\n      columnSubFkId.display = type === \"sub\"; // 树表字段显隐\n\n      var columnTreeId = this.findObject(this.option.group, \"treeId\");\n      var columnTreePid = this.findObject(this.option.group, \"treePid\");\n      var columnTreeName = this.findObject(this.option.group, \"treeName\");\n      columnTreeId.display = type === \"tree\";\n      columnTreePid.display = type === \"tree\";\n      columnTreeName.display = type === \"tree\";\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.code_add, false),\n        viewBtn: this.vaildData(this.permission.code_view, false),\n        delBtn: this.vaildData(this.permission.code_delete, false),\n        editBtn: this.vaildData(this.permission.code_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    rowSave: function rowSave(row, done, loading) {\n      var _this2 = this;\n\n      add(row).then(function () {\n        _this2.onLoad(_this2.page);\n\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this3 = this;\n\n      update(row).then(function () {\n        _this3.onLoad(_this3.page);\n\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this4 = this;\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this4.onLoad(_this4.page);\n\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    handleDelete: function handleDelete() {\n      var _this5 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this5.ids);\n      }).then(function () {\n        _this5.onLoad(_this5.page);\n\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this5.$refs.crud.toggleSelection();\n      });\n    },\n    handleBuild: function handleBuild() {\n      var _this6 = this;\n\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n\n      this.$confirm(\"是否生成选中模块的代码?\", {\n        title: \"代码生成确认\",\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return build(_this6.ids);\n      }).then(function () {\n        _this6.onLoad(_this6.page);\n\n        _this6.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n\n        _this6.$refs.crud.toggleSelection();\n      });\n    },\n    handleCopy: function handleCopy(row) {\n      var _this7 = this;\n\n      copy(row.id).then(function () {\n        _this7.onLoad(_this7.page);\n\n        _this7.$message({\n          type: \"success\",\n          message: \"复制成功!\"\n        });\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this8 = this;\n\n      if ([\"edit\", \"view\"].includes(type)) {\n        getCode(this.form.id).then(function (res) {\n          _this8.form = res.data.data;\n        });\n      }\n\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this9 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(function (res) {\n        var data = res.data.data;\n        _this9.page.total = data.total;\n        _this9.data = data.records;\n        _this9.loading = false;\n\n        _this9.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":"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","names":["data","form","selectionList","loading","query","page","pageSize","currentPage","total","option","height","calcHeight","dialogWidth","tip","searchShow","searchMenuSpan","border","index","selection","labelWidth","menuWidth","viewBtn","dialogClickModal","tabs","column","label","prop","search","display","type","dicData","group","icon","span","dicUrl","props","value","rules","required","message","trigger","hide","overHidden","labelTip","dataType","watch","modelDetail","prototypeDetail","columnTreeId","columnTreePid","columnTreeName","columnSubModelId","columnSubFkId","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","methods","rowSave","row","done","add","window","rowUpdate","update","rowDel","confirmButtonText","cancelButtonText","then","searchReset","searchChange","params","selectionChange","list","selectionClear","handleDelete","handleBuild","title","handleCopy","copy","beforeOpen","getCode","currentChange","sizeChange","refreshChange","onLoad","getList"],"sourceRoot":"src/views/tool","sources":["code.vue"],"sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               ref=\"crud\"\n               v-model=\"form\"\n               :permission=\"permissionList\"\n               :page.sync=\"page\"\n               @row-del=\"rowDel\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               :before-open=\"beforeOpen\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\">\n      <template slot=\"menuLeft\">\n        <el-button type=\"danger\"\n                   size=\"small\"\n                   icon=\"el-icon-delete\"\n                   v-if=\"permission.code_delete\"\n                   plain\n                   @click=\"handleDelete\">删 除\n        </el-button>\n        <el-button type=\"primary\"\n                   size=\"small\"\n                   plain\n                   icon=\"el-icon-refresh\"\n                   @click=\"handleBuild\">代码生成\n        </el-button>\n      </template>\n      <template slot-scope=\"scope\" slot=\"menu\">\n        <el-button type=\"text\"\n                   size=\"small\"\n                   icon=\"el-icon-document-copy\"\n                   v-if=\"permission.code_edit\"\n                   class=\"none-border\"\n                   @click.stop=\"handleCopy(scope.row)\">复制\n        </el-button>\n      </template>\n    </avue-crud>\n  </basic-container>\n</template>\n\n<script>\n  import {getList, getCode, build, remove, add, update, copy} from \"@/api/tool/code\";\n  import {getDetail as modelDetail, prototypeDetail} from \"@/api/tool/model\";\n  import {templateDic} from \"@/const/tool/model\";\n  import {validatenull} from \"@/util/validate\";\n  import {mapGetters} from \"vuex\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionList: [],\n        loading: true,\n        query: {},\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          dialogWidth: 900,\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          selection: true,\n          labelWidth: 120,\n          menuWidth: 300,\n          viewBtn: true,\n          dialogClickModal: false,\n          tabs: true,\n          column: [\n            {\n              label: \"模块名\",\n              prop: \"codeName\",\n              search: true,\n              display: false,\n            },\n            {\n              label: '模版类型',\n              prop: 'templateType',\n              type: \"select\",\n              dicData: templateDic,\n              display: false,\n            },\n            {\n              label: \"表名\",\n              prop: \"tableName\",\n              search: true,\n              display: false,\n            },\n            {\n              label: \"服务名\",\n              prop: \"serviceName\",\n              search: true,\n              display: false,\n            },\n            {\n              label: \"包名\",\n              prop: \"packageName\",\n              display: false,\n            },\n          ],\n          group: [\n            {\n              label: '模型配置',\n              prop: 'modelSetting',\n              icon: 'el-icon-tickets',\n              column: [\n                {\n                  label: \"数据模型\",\n                  prop: \"modelId\",\n                  search: true,\n                  span: 24,\n                  type: \"select\",\n                  dicUrl: \"/api/blade-develop/model/select\",\n                  props: {\n                    label: \"modelName\",\n                    value: \"id\"\n                  },\n                  rules: [{\n                    required: true,\n                    message: \"请选择数据模型\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"模块名\",\n                  prop: \"codeName\",\n                  search: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入模块名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"服务名\",\n                  prop: \"serviceName\",\n                  search: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入服务名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"表名\",\n                  prop: \"tableName\",\n                  rules: [{\n                    required: true,\n                    message: \"请输入表名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"表前缀\",\n                  prop: \"tablePrefix\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入表前缀\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"主键名\",\n                  prop: \"pkName\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入主键名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"包名\",\n                  prop: \"packageName\",\n                  overHidden: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入包名\",\n                    trigger: \"blur\"\n                  }]\n                },\n              ]\n            },\n            {\n              label: '模版配置',\n              prop: 'templateSetting',\n              icon: 'el-icon-copy-document',\n              column: [\n                {\n                  label: '模版类型',\n                  prop: 'templateType',\n                  type: \"select\",\n                  dicData: templateDic,\n                  value: \"crud\",\n                  rules: [{\n                    required: true,\n                    message: \"请选择模版类型\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"作者信息\",\n                  prop: \"author\",\n                  value: \"BladeX\",\n                  rules: [{\n                    required: true,\n                    message: \"请输入作者\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"子表模型\",\n                  prop: \"subModelId\",\n                  type: \"select\",\n                  dicUrl: \"/api/blade-develop/model/select\",\n                  props: {\n                    label: \"modelName\",\n                    value: \"id\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"子表外键\",\n                  prop: \"subFkId\",\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"树主键字段\",\n                  prop: \"treeId\",\n                  type: \"select\",\n                  dicData: [],\n                  props: {\n                    label: \"comment\",\n                    value: \"jdbcName\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"树父主键字段\",\n                  prop: \"treePid\",\n                  type: \"select\",\n                  dicData: [],\n                  props: {\n                    label: \"comment\",\n                    value: \"jdbcName\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"树名称字段\",\n                  prop: \"treeName\",\n                  type: \"select\",\n                  dicData: [],\n                  props: {\n                    label: \"comment\",\n                    value: \"jdbcName\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n              ]\n            },\n            {\n              label: '生成配置',\n              prop: 'codingSetting',\n              icon: 'el-icon-printer',\n              column: [\n                {\n                  label: \"基础业务\",\n                  labelTip:'配置是否使用BladeX封装的BaseService解锁更多功能',\n                  prop: \"baseMode\",\n                  type: 'radio',\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  value: 2,\n                  dataType: \"number\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择基础业务\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"包装器\",\n                  labelTip:'配置是否使用Wrapper包装器来拓展Controller返回列表的字段',\n                  prop: \"wrapMode\",\n                  type: 'radio',\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  value: 2,\n                  dataType: \"number\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择包装器\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"远程调用\",\n                  labelTip:'配置是否使用Feign远程调用',\n                  prop: \"feignMode\",\n                  type: 'radio',\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  value: 1,\n                  dataType: \"number\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择基础业务\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"代码风格\",\n                  labelTip:'选择不同底层实现的代码模版',\n                  prop: \"codeStyle\",\n                  type: 'radio',\n                  dicData: [\n                    {\n                      label: \"saber\",\n                      value: \"saber\"\n                    },\n                    {\n                      label: \"element\",\n                      value: \"element\"\n                    }\n                  ],\n                  value: \"saber\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择代码风格\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"后端生成路径\",\n                  prop: \"apiPath\",\n                  span: 24,\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入后端生成路径\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"前端生成路径\",\n                  prop: \"webPath\",\n                  span: 24,\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入前端生成路径\",\n                    trigger: \"blur\"\n                  }]\n                }\n              ]\n            }\n          ]\n        },\n        data: []\n      };\n    },\n    watch: {\n      'form.modelId'() {\n        if (!validatenull(this.form.modelId)) {\n          // 获取数据模型信息\n          modelDetail(this.form.modelId).then(res => {\n            const result = res.data;\n            if (result.success) {\n              const {modelName, modelTable, modelCode} = result.data;\n              if (validatenull(this.form.tablePrefix)) {\n                this.form.tablePrefix = modelTable.split(\"_\")[0] + \"_\";\n              }\n              if (validatenull(this.form.tableName)) {\n                this.form.tableName = modelTable;\n              }\n              if (validatenull(this.form.codeName)) {\n                this.form.codeName = modelName;\n              }\n              if (validatenull(this.form.serviceName)) {\n                this.form.serviceName = `blade-${modelCode}`;\n              }\n              if (validatenull(this.form.pkName)) {\n                this.form.pkName = \"id\";\n              }\n              if (validatenull(this.form.packageName)) {\n                this.form.packageName = `org.springblade.${modelCode}`;\n              }\n              if (validatenull(this.form.subFkId) && !validatenull(this.form.tablePrefix)) {\n                this.form.subFkId = modelTable.replace(this.form.tablePrefix, \"\") + \"_id\";\n              }\n\n              // 获取数据原型信息\n              prototypeDetail(this.form.modelId).then(res => {\n                const result = res.data;\n                if (result.success) {\n                  const columnTreeId = this.findObject(this.option.group, \"treeId\");\n                  const columnTreePid = this.findObject(this.option.group, \"treePid\");\n                  const columnTreeName = this.findObject(this.option.group, \"treeName\");\n                  columnTreeId.dicData = result.data;\n                  columnTreePid.dicData = result.data;\n                  columnTreeName.dicData = result.data;\n                }\n              });\n            }\n          });\n        }\n      },\n      'form.templateType'() {\n        // 模版类型\n        const type = this.form.templateType;\n\n        // 主子表字段显隐\n        const columnSubModelId = this.findObject(this.option.group, \"subModelId\");\n        const columnSubFkId = this.findObject(this.option.group, \"subFkId\");\n        columnSubModelId.display = type === \"sub\";\n        columnSubFkId.display = type === \"sub\";\n\n        // 树表字段显隐\n        const columnTreeId = this.findObject(this.option.group, \"treeId\");\n        const columnTreePid = this.findObject(this.option.group, \"treePid\");\n        const columnTreeName = this.findObject(this.option.group, \"treeName\");\n        columnTreeId.display = type === \"tree\";\n        columnTreePid.display = type === \"tree\";\n        columnTreeName.display = type === \"tree\";\n\n      }\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.code_add, false),\n          viewBtn: this.vaildData(this.permission.code_view, false),\n          delBtn: this.vaildData(this.permission.code_delete, false),\n          editBtn: this.vaildData(this.permission.code_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleBuild() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"是否生成选中模块的代码?\", {\n          title: \"代码生成确认\",\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return build(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleCopy(row) {\n        copy(row.id).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"复制成功!\"\n          });\n        });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getCode(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n"]}]}