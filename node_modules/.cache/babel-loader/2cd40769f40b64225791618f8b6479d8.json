{"remainingRequest":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/bladex/saber/src/components/flow-design/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/bladex/saber/src/components/flow-design/main.vue","mtime":1666151205518},{"path":"/Users/jiang/WorkSpace/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/web.dom.iterable\";\nimport { modelView } from '@/api/flow/flow';\nexport default {\n  name: 'flowDesign',\n  props: {\n    isDialog: {\n      type: Boolean,\n      default: false\n    },\n    isDisplay: {\n      type: Boolean,\n      default: false\n    },\n    processInstanceId: String,\n    processDefinitionId: String\n  },\n  data: function data() {\n    return {\n      visible: false,\n      option: {\n        mode: 'view'\n      }\n    };\n  },\n  watch: {\n    isDisplay: {\n      handler: function handler(val) {\n        this.visible = val;\n      },\n      immediate: true\n    },\n    visible: {\n      handler: function handler(val) {\n        this.$emit('update:is-display', val);\n      }\n    },\n    processInstanceId: {\n      handler: function handler(val) {\n        if (!val) return;\n        this.getDetail({\n          processInstanceId: this.processInstanceId\n        });\n      },\n      immediate: true\n    },\n    processDefinitionId: {\n      handler: function handler(val) {\n        if (!val) return;\n        this.getDetail({\n          processDefinitionId: this.processDefinitionId\n        });\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    getDetail: function getDetail(params) {\n      var _this = this;\n\n      modelView(params).then(function (res) {\n        var data = res.data.data;\n        var xml = data.xml,\n            flow = data.flow;\n\n        _this.$set(_this.option, 'xml', xml);\n\n        if (flow) {\n          var flows = [];\n          flow.forEach(function (f) {\n            var endTime = f.endTime;\n            var ff = {\n              id: f.historyActivityId,\n              class: !endTime && f.historyActivityType !== 'candidate' ? 'nodePrimary' : ''\n            };\n            if (f.historyActivityType === 'sequenceFlow') ff.class = 'lineWarn';else if (!ff.class && f.historyActivityType !== 'candidate') ff.class = 'nodeSuccess';\n            var index = flows.findIndex(function (fl) {\n              return fl.id === f.historyActivityId;\n            });\n            if (index !== -1) flows.splice(index, 1, ff);else flows.push(ff);\n          });\n\n          _this.$set(_this.option, 'flows', flows);\n        }\n      });\n    }\n  }\n};",{"version":3,"mappings":";;AAuBA;AAEA;EACAA,kBADA;EAEAC;IACAC;MACAC,aADA;MAEAC;IAFA,CADA;IAKAC;MACAF,aADA;MAEAC;IAFA,CALA;IASAE,yBATA;IAUAC;EAVA,CAFA;EAcAC,IAdA,kBAcA;IACA;MACAC,cADA;MAEAC;QACAC;MADA;IAFA;EAMA,CArBA;EAsBAC;IACAP;MACAQ,OADA,mBACAC,GADA,EACA;QACA;MACA,CAHA;MAIAC;IAJA,CADA;IAOAN;MACAI,OADA,mBACAC,GADA,EACA;QACA;MACA;IAHA,CAPA;IAYAR;MACAO,OADA,mBACAC,GADA,EACA;QACA;QACA;UAAAR;QAAA;MACA,CAJA;MAKAS;IALA,CAZA;IAmBAR;MACAM,OADA,mBACAC,GADA,EACA;QACA;QACA;UAAAP;QAAA;MACA,CAJA;MAKAQ;IALA;EAnBA,CAtBA;EAiDAC;IACAC,SADA,qBACAC,MADA,EACA;MAAA;;MACAC;QACA;QACA;QAAA;;QACA;;QACA;UACA;UACAC;YACA;YAEA;cACAC,uBADA;cAEAC;YAFA;YAKA,yEACA;YAEA;cAAA;YAAA;YACA,kDACAC;UACA,CAdA;;UAeA;QACA;MACA,CAvBA;IAwBA;EA1BA;AAjDA","names":["name","props","isDialog","type","default","isDisplay","processInstanceId","processDefinitionId","data","visible","option","mode","watch","handler","val","immediate","methods","getDetail","params","modelView","flow","id","class","flows"],"sourceRoot":"src/components/flow-design","sources":["main.vue"],"sourcesContent":["<template>\n  <div>\n    <el-dialog v-if=\"isDialog\"\n               :visible.sync=\"visible\"\n               append-to-body\n               destroy-on-close\n               title=\"流程图展示\"\n               width=\"70%\"\n               custom-class=\"flow-design-dialog\">\n      <wf-design-base ref=\"bpmn\"\n                      style=\"height: 60vh;\"\n                      :options=\"option\"></wf-design-base>\n    </el-dialog>\n    <div v-else>\n      <wf-design-base v-if=\"visible\"\n                      ref=\"bpmn\"\n                      style=\"height: 60vh;\"\n                      :options=\"option\"></wf-design-base>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {modelView} from '@/api/flow/flow'\n\nexport default {\n  name: 'flowDesign',\n  props: {\n    isDialog: {\n      type: Boolean,\n      default: false\n    },\n    isDisplay: {\n      type: Boolean,\n      default: false\n    },\n    processInstanceId: String,\n    processDefinitionId: String,\n  },\n  data() {\n    return {\n      visible: false,\n      option: {\n        mode: 'view'\n      }\n    }\n  },\n  watch: {\n    isDisplay: {\n      handler(val) {\n        this.visible = val\n      },\n      immediate: true\n    },\n    visible: {\n      handler(val) {\n        this.$emit('update:is-display', val)\n      }\n    },\n    processInstanceId: {\n      handler(val) {\n        if (!val) return\n        this.getDetail({processInstanceId: this.processInstanceId})\n      },\n      immediate: true\n    },\n    processDefinitionId: {\n      handler(val) {\n        if (!val) return\n        this.getDetail({processDefinitionId: this.processDefinitionId})\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    getDetail(params) {\n      modelView(params).then(res => {\n        const data = res.data.data\n        const {xml, flow} = data\n        this.$set(this.option, 'xml', xml)\n        if (flow) {\n          const flows = []\n          flow.forEach(f => {\n            let {endTime} = f\n\n            const ff = {\n              id: f.historyActivityId,\n              class: (!endTime && f.historyActivityType !== 'candidate') ? 'nodePrimary' : ''\n            }\n\n            if (f.historyActivityType === 'sequenceFlow') ff.class = 'lineWarn'\n            else if (!ff.class && f.historyActivityType !== 'candidate') ff.class = 'nodeSuccess'\n\n            const index = flows.findIndex(fl => fl.id === f.historyActivityId)\n            if (index !== -1) flows.splice(index, 1, ff)\n            else flows.push(ff)\n          })\n          this.$set(this.option, 'flows', flows)\n        }\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.flow-design-dialog {\n  display: flex;\n  flex-direction: column;\n  margin: 0 !important;\n  position: absolute;\n  top: 40%;\n  left: 50%;\n  transform: translate(-50%, -40%);\n  max-height: calc(100% - 30px);\n  max-width: calc(100% - 30px);\n\n  .el-dialog__body {\n    flex: 1;\n    overflow: auto;\n  }\n}\n</style>\n"]}]}