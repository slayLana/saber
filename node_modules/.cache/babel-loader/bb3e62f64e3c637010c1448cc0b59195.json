{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js!/Users/jiang/WorkSpace/code/bladex/saber/node_modules/eslint-loader/index.js??ref--13-0!/Users/jiang/WorkSpace/code/bladex/saber/src/util/func.js","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/util/func.js","mtime":1666151205536},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/babel.config.js","mtime":1666151205448},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/eslint-loader/index.js","mtime":1666157452476}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-nan\";\nimport _classCallCheck from \"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/@babel/runtime-corejs2/helpers/esm/createClass.js\";\n\n/**\n * 通用工具类\n */\nvar func = /*#__PURE__*/function () {\n  function func() {\n    _classCallCheck(this, func);\n  }\n\n  _createClass(func, null, [{\n    key: \"notEmpty\",\n    value:\n    /**\n     * 不为空\n     * @param val\n     * @returns {boolean}\n     */\n    function notEmpty(val) {\n      return !this.isEmpty(val);\n    }\n    /**\n     * 是否为定义\n     * @param val\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isUndefined\",\n    value: function isUndefined(val) {\n      return val === null || typeof val === 'undefined';\n    }\n    /**\n     * 为空\n     * @param val\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty(val) {\n      if (val === null || typeof val === 'undefined' || typeof val === 'string' && val === '' && val !== 'undefined') {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * 强转int型\n     * @param val\n     * @param defaultValue\n     * @returns {number}\n     */\n\n  }, {\n    key: \"toInt\",\n    value: function toInt(val, defaultValue) {\n      if (this.isEmpty(val)) {\n        return defaultValue === undefined ? -1 : defaultValue;\n      }\n\n      var num = parseInt(val, 0);\n      return Number.isNaN(num) ? defaultValue === undefined ? -1 : defaultValue : num;\n    }\n    /**\n     * Json强转为Form类型\n     * @param obj\n     * @returns {FormData}\n     */\n\n  }, {\n    key: \"toFormData\",\n    value: function toFormData(obj) {\n      var data = new FormData();\n      Object.keys(obj).forEach(function (key) {\n        data.append(key, Array.isArray(obj[key]) ? obj[key].join(',') : obj[key]);\n      });\n      return data;\n    }\n    /**\n     * date类转为字符串格式\n     * @param date\n     * @param format\n     * @returns {null}\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(date) {\n      var _format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD HH:mm:ss';\n\n      return date ? date.format(_format) : null;\n    }\n    /**\n     * 根据逗号联合\n     * @param arr\n     * @returns {string}\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(arr) {\n      return arr ? arr.join(',') : '';\n    }\n    /**\n     * 根据逗号分隔\n     * @param str\n     * @returns {string}\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(str) {\n      return str ? String(str).split(',') : '';\n    }\n    /**\n     * 转换空字符串\n     * @param str\n     * @returns {string|*}\n     */\n\n  }, {\n    key: \"toStr\",\n    value: function toStr(str) {\n      if (typeof str === 'undefined' || str === null) {\n        return \"\";\n      }\n\n      return str;\n    }\n  }]);\n\n  return func;\n}();\n\nexport { func as default };",{"version":3,"names":["func","val","isEmpty","defaultValue","undefined","num","parseInt","Number","isNaN","obj","data","FormData","Object","keys","forEach","key","append","Array","isArray","join","date","format","arr","str","String","split"],"sources":["/Users/jiang/WorkSpace/code/bladex/saber/src/util/func.js"],"sourcesContent":["/**\n * 通用工具类\n */\nexport default class func {\n  /**\n   * 不为空\n   * @param val\n   * @returns {boolean}\n   */\n  static notEmpty(val) {\n    return !this.isEmpty(val);\n  }\n\n  /**\n   * 是否为定义\n   * @param val\n   * @returns {boolean}\n   */\n  static isUndefined(val) {\n    return val === null || typeof val === 'undefined';\n  }\n\n  /**\n   * 为空\n   * @param val\n   * @returns {boolean}\n   */\n  static isEmpty(val) {\n    if (\n      val === null ||\n      typeof val === 'undefined' ||\n      (typeof val === 'string' && val === '' && val !== 'undefined')\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 强转int型\n   * @param val\n   * @param defaultValue\n   * @returns {number}\n   */\n  static toInt(val, defaultValue) {\n    if (this.isEmpty(val)) {\n      return defaultValue === undefined ? -1 : defaultValue;\n    }\n    const num = parseInt(val, 0);\n    return Number.isNaN(num) ? (defaultValue === undefined ? -1 : defaultValue) : num;\n  }\n\n  /**\n   * Json强转为Form类型\n   * @param obj\n   * @returns {FormData}\n   */\n  static toFormData(obj) {\n    const data = new FormData();\n    Object.keys(obj).forEach(key => {\n      data.append(key, Array.isArray(obj[key]) ? obj[key].join(',') : obj[key]);\n    });\n    return data;\n  }\n\n  /**\n   * date类转为字符串格式\n   * @param date\n   * @param format\n   * @returns {null}\n   */\n  static format(date, format = 'YYYY-MM-DD HH:mm:ss') {\n    return date ? date.format(format) : null;\n  }\n\n  /**\n   * 根据逗号联合\n   * @param arr\n   * @returns {string}\n   */\n  static join(arr) {\n    return arr ? arr.join(',') : '';\n  }\n\n  /**\n   * 根据逗号分隔\n   * @param str\n   * @returns {string}\n   */\n  static split(str) {\n    return str ? String(str).split(',') : '';\n  }\n\n  /**\n   * 转换空字符串\n   * @param str\n   * @returns {string|*}\n   */\n  static toStr(str) {\n    if (typeof str === 'undefined' || str === null) {\n      return \"\";\n    }\n    return str;\n  }\n}\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;IACqBA,I;;;;;;;;IACnB;AACF;AACA;AACA;AACA;IACE,kBAAgBC,GAAhB,EAAqB;MACnB,OAAO,CAAC,KAAKC,OAAL,CAAaD,GAAb,CAAR;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,qBAAmBA,GAAnB,EAAwB;MACtB,OAAOA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAtC;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAeA,GAAf,EAAoB;MAClB,IACEA,GAAG,KAAK,IAAR,IACA,OAAOA,GAAP,KAAe,WADf,IAEC,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,EAAnC,IAAyCA,GAAG,KAAK,WAHpD,EAIE;QACA,OAAO,IAAP;MACD;;MACD,OAAO,KAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,eAAaA,GAAb,EAAkBE,YAAlB,EAAgC;MAC9B,IAAI,KAAKD,OAAL,CAAaD,GAAb,CAAJ,EAAuB;QACrB,OAAOE,YAAY,KAAKC,SAAjB,GAA6B,CAAC,CAA9B,GAAkCD,YAAzC;MACD;;MACD,IAAME,GAAG,GAAGC,QAAQ,CAACL,GAAD,EAAM,CAAN,CAApB;MACA,OAAOM,MAAM,CAACC,KAAP,CAAaH,GAAb,IAAqBF,YAAY,KAAKC,SAAjB,GAA6B,CAAC,CAA9B,GAAkCD,YAAvD,GAAuEE,GAA9E;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,oBAAkBI,GAAlB,EAAuB;MACrB,IAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;MACAC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,OAAjB,CAAyB,UAAAC,GAAG,EAAI;QAC9BL,IAAI,CAACM,MAAL,CAAYD,GAAZ,EAAiBE,KAAK,CAACC,OAAN,CAAcT,GAAG,CAACM,GAAD,CAAjB,IAA0BN,GAAG,CAACM,GAAD,CAAH,CAASI,IAAT,CAAc,GAAd,CAA1B,GAA+CV,GAAG,CAACM,GAAD,CAAnE;MACD,CAFD;MAGA,OAAOL,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,gBAAcU,IAAd,EAAoD;MAAA,IAAhCC,OAAgC,uEAAvB,qBAAuB;;MAClD,OAAOD,IAAI,GAAGA,IAAI,CAACC,MAAL,CAAYA,OAAZ,CAAH,GAAyB,IAApC;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,cAAYC,GAAZ,EAAiB;MACf,OAAOA,GAAG,GAAGA,GAAG,CAACH,IAAJ,CAAS,GAAT,CAAH,GAAmB,EAA7B;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,eAAaI,GAAb,EAAkB;MAChB,OAAOA,GAAG,GAAGC,MAAM,CAACD,GAAD,CAAN,CAAYE,KAAZ,CAAkB,GAAlB,CAAH,GAA4B,EAAtC;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,eAAaF,GAAb,EAAkB;MAChB,IAAI,OAAOA,GAAP,KAAe,WAAf,IAA8BA,GAAG,KAAK,IAA1C,EAAgD;QAC9C,OAAO,EAAP;MACD;;MACD,OAAOA,GAAP;IACD;;;;;;SApGkBvB,I"}]}