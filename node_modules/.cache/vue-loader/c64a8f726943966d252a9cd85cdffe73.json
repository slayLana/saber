{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/tool/model.vue?vue&type=style&index=0&id=6cb096e8&lang=css&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/tool/model.vue","mtime":1666151205544},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/css-loader/index.js","mtime":1666157452306},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1666157454418},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/postcss-loader/src/index.js","mtime":1666157453259},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n.none-border {\n  border: 0;\n  background-color: transparent !important;\n}\n\n.step-div {\n  margin-top: 30px;\n}\n",{"version":3,"sources":["model.vue"],"names":[],"mappings":";AAoVA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"model.vue","sourceRoot":"src/views/tool","sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               :page=\"page\"\n               :permission=\"permissionList\"\n               :before-open=\"beforeOpen\"\n               v-model=\"form\"\n               v-loading.fullscreen.lock=\"fullscreenLoading\"\n               ref=\"crud\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               @row-del=\"rowDel\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @on-load=\"onLoad\">\n      <template slot=\"menuLeft\">\n        <el-button type=\"danger\"\n                   size=\"small\"\n                   icon=\"el-icon-delete\"\n                   plain\n                   @click=\"handleDelete\">删 除\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\" slot=\"menu\">\n        <el-button type=\"text\"\n                   icon=\"el-icon-setting\"\n                   size=\"small\"\n                   plain\n                   class=\"none-border\"\n                   @click.stop=\"handleModel(row)\">模型配置\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\" slot=\"modelTable\">\n        <el-tag>{{ row.modelTable }}</el-tag>\n      </template>\n    </avue-crud>\n    <el-dialog title=\"数据库模型配置\"\n               :visible.sync=\"modelBox\"\n               :fullscreen=\"true\"\n               append-to-body>\n      <avue-crud ref=\"crudModel\" :option=\"optionModel\" :table-loading=\"loading\" :data=\"fields\"></avue-crud>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"danger\" @click=\"modelBox = false\">关 闭</el-button>\n        <el-button type=\"primary\" @click=\"handleSubmit\">提 交</el-button>\n      </span>\n    </el-dialog>\n  </basic-container>\n</template>\n\n<script>\nimport {\n  getList,\n  getDetail,\n  add,\n  update,\n  remove,\n  getTableList,\n  getTableInfoByName,\n  getModelPrototype,\n  submitModelPrototype\n} from \"@/api/tool/model\";\nimport {entityDic, option, optionModel} from \"@/const/tool/model\";\nimport {validatenull} from \"@/util/validate\";\nimport {mapGetters} from \"vuex\";\n\nexport default {\n  data() {\n    return {\n      form: {},\n      query: {},\n      loading: true,\n      loadingOption: {\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0)'\n      },\n      fullscreenLoading: false,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      selectionList: [],\n      modelBox: false,\n      modelId: 0,\n      datasourceId: 1,\n      tableInfo: {},\n      active: 0,\n      stepStart: 0,\n      stepEnd: 4,\n      data: [],\n      option: option,\n      optionModel: optionModel,\n      formStep: {},\n      fields: [],\n      selectionModelList: [],\n    };\n  },\n  watch: {\n    'form.datasourceId'() {\n      if (!validatenull(this.form.datasourceId)) {\n        const fullLoading = this.$loading(this.loadingOption);\n        getTableList(this.form.datasourceId).then(res => {\n          const column = this.findObject(this.option.column, \"modelTable\");\n          column.dicData = res.data.data;\n          fullLoading.close();\n        }).catch(() => {\n          fullLoading.close();\n        })\n      }\n    },\n    'form.modelTable'() {\n      if (!validatenull(this.form.modelTable)) {\n        const fullLoading = this.$loading(this.loadingOption);\n        getTableInfoByName(this.form.modelTable, this.form.datasourceId).then(res => {\n          const result = res.data;\n          if (result.success) {\n            const {comment, entityName} = result.data;\n            if (validatenull(this.form.modelClass)) {\n              this.form.modelClass = entityName;\n            }\n            if (validatenull(this.form.modelName)) {\n              this.form.modelName = comment;\n            }\n            if (validatenull(this.form.modelCode)) {\n              this.form.modelCode = entityName.replace(/^\\S/, s => s.toLowerCase());\n            }\n            fullLoading.close();\n          }\n        });\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\"permission\"]),\n    permissionList() {\n      return {\n        addBtn: true,\n        delBtn: true,\n        editBtn: true,\n        viewBtn: false\n      };\n    },\n    ids() {\n      let ids = [];\n      this.selectionList.forEach(ele => {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    },\n  },\n  methods: {\n    rowSave(row, done, loading) {\n      add(row).then(() => {\n        done();\n        this.onLoad(this.page);\n        this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      }, error => {\n        loading();\n        window.console.log(error);\n      });\n    },\n    rowUpdate(row, index, done, loading) {\n      update(row).then(() => {\n        done();\n        this.onLoad(this.page);\n        this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      }, error => {\n        loading();\n        window.console.log(error);\n      });\n    },\n    rowDel(row) {\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      })\n        .then(() => {\n          return remove(row.id);\n        })\n        .then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n        });\n    },\n    handleDelete() {\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      })\n        .then(() => {\n          return remove(this.ids);\n        })\n        .then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          this.$refs.crud.toggleSelection();\n        });\n    },\n    beforeOpen(done, type) {\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDetail(this.form.id).then(res => {\n          this.form = res.data.data;\n        });\n      }\n      done();\n    },\n    searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange(params, done) {\n      this.query = params;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionModelChange(list) {\n      this.selectionModelList = list;\n    },\n    selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    onLoad(page, params = {}) {\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n        const data = res.data.data;\n        this.page.total = data.total;\n        this.data = data.records;\n        this.loading = false;\n        this.selectionClear();\n      });\n    },\n    handleModel(row) {\n      this.fields = [];\n      this.modelBox = true;\n      this.loading = true;\n      this.modelId = row.id;\n      this.datasourceId = row.datasourceId;\n      getModelPrototype(this.modelId, this.datasourceId).then(res => {\n        const result = res.data;\n        if (result.success) {\n          this.fields = result.data;\n          this.fields.forEach(item => {\n            item.$cellEdit = true;\n            item.modelId = this.modelId;\n            // 首次加载配置默认值\n            if (validatenull(item.id)) {\n              item.isList = 1;\n              item.isForm = 1;\n              item.isRow = 0;\n              item.isRequired = 0;\n              item.isQuery = 0;\n              item.componentType = \"input\";\n            }\n            if (!validatenull(item.name)) {\n              item.jdbcName = item.name;\n              item.jdbcType = item.propertyType;\n              // 根据字段物理类型自动适配实体类型\n              if (item.propertyType === \"LocalDateTime\") {\n                item.propertyType = \"Date\";\n                item.propertyEntity = \"java.util.Date\";\n              } else {\n                entityDic.forEach(d => {\n                  if (d.label === item.propertyType) {\n                    item.propertyType = d.label;\n                    item.propertyEntity = d.value;\n                  }\n                });\n              }\n            }\n          });\n          this.loading = false;\n        }\n      });\n    },\n    handleSubmit() {\n      console.log(this.fields);\n      this.$confirm(\"确定提交模型配置?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(() => {\n        this.fields.forEach(item => {\n          entityDic.forEach(d => {\n            if (d.value === item.propertyEntity) {\n              item.propertyType = d.label;\n            }\n          });\n        });\n        submitModelPrototype(this.fields).then(res => {\n          const result = res.data;\n          if (result.success) {\n            this.$message.success(result.msg);\n            this.modelBox = false;\n          } else {\n            this.$message.error(result.msg);\n          }\n        })\n      });\n\n    }\n  }\n};\n</script>\n\n<style>\n.none-border {\n  border: 0;\n  background-color: transparent !important;\n}\n\n.step-div {\n  margin-top: 30px;\n}\n</style>\n"]}]}