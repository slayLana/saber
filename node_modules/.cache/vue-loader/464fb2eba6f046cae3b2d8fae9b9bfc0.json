{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/authority/apiscope.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/authority/apiscope.vue","mtime":1666151205537},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n  import {\n    add,\n    remove,\n    update,\n    getLazyMenuList,\n    getMenu\n  } from \"@/api/system/menu\";\n  import {\n    addApiScope,\n    removeApiScope,\n    updateApiScope,\n    getListApiScope,\n    getMenuApiScope\n  } from \"@/api/system/scope\";\n  import {mapGetters} from \"vuex\";\n  import iconList from \"@/config/iconList\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionList: [],\n        query: {},\n        loading: true,\n        parentId: 0,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        drawerVisible: false,\n        direction: 'rtl',\n        scopeLoading: false,\n        scopeMenuId: 0,\n        scopeMenuName: \"菜单\",\n        menu: true,\n        option: {\n          lazy: true,\n          tip: false,\n          simplePage: true,\n          searchShow: true,\n          searchMenuSpan: 6,\n          dialogWidth: \"60%\",\n          tree: true,\n          border: true,\n          index: true,\n          selection: true,\n          viewBtn: false,\n          editBtn: false,\n          addBtn: false,\n          delBtn: false,\n          menuWidth: 150,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"菜单名称\",\n              prop: \"name\",\n              search: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单名称\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"路由地址\",\n              prop: \"path\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入路由地址\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"上级菜单\",\n              prop: \"parentId\",\n              type: \"tree\",\n              dicUrl: \"/api/blade-system/menu/tree\",\n              hide: true,\n              props: {\n                label: \"title\"\n              },\n              rules: [\n                {\n                  required: false,\n                  message: \"请选择上级菜单\",\n                  trigger: \"click\"\n                }\n              ]\n            },\n            {\n              label: \"菜单图标\",\n              prop: \"source\",\n              type: \"icon\",\n              slot: true,\n              width: 80,\n              iconList: iconList,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单图标\",\n                  trigger: \"click\"\n                }\n              ]\n            },\n            {\n              label: \"菜单编号\",\n              prop: \"code\",\n              search: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单编号\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单类型\",\n              prop: \"category\",\n              type: \"radio\",\n              dicData: [\n                {\n                  label: \"菜单\",\n                  value: 1\n                },\n                {\n                  label: \"按钮\",\n                  value: 2\n                }\n              ],\n              hide: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择菜单类型\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单别名\",\n              prop: \"alias\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单别名\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"按钮功能\",\n              prop: \"action\",\n              type: \"radio\",\n              dicData: [\n                {\n                  label: \"工具栏\",\n                  value: 0\n                },\n                {\n                  label: \"操作栏\",\n                  value: 1\n                },\n                {\n                  label: \"工具操作栏\",\n                  value: 2\n                }\n              ],\n              hide: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择按钮功能\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单排序\",\n              prop: \"sort\",\n              type: \"number\",\n              width: 80,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单排序\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"新窗口\",\n              prop: \"isOpen\",\n              type: \"radio\",\n              dicData: [\n                {\n                  label: \"否\",\n                  value: 0\n                },\n                {\n                  label: \"是\",\n                  value: 1\n                },\n              ],\n              hide: true\n            },\n            {\n              label: \"菜单备注\",\n              prop: \"remark\",\n              type: \"textarea\",\n              span: 24,\n              minRows: 6,\n              hide: true\n            }\n          ]\n        },\n        data: [],\n        formScope: {},\n        selectionListScope: [],\n        pageScope: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        optionScope: {\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          viewBtn: true,\n          selection: true,\n          menuWidth: 200,\n          dialogWidth: 900,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"权限名称\",\n              prop: \"scopeName\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入权限名称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"权限编号\",\n              prop: \"resourceCode\",\n              search: true,\n              width: 180,\n              rules: [{\n                required: true,\n                message: \"请输入权限编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"权限路径\",\n              prop: \"scopePath\",\n              width: 180,\n              rules: [{\n                required: true,\n                message: \"请输入权限编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"接口类型\",\n              type: \"select\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=api_scope_type\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              slot: true,\n              width: 100,\n              prop: \"scopeType\",\n              rules: [{\n                required: true,\n                message: \"请输入通知类型\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"备注\",\n              prop: \"remark\",\n              span: 24,\n              hide: true,\n            },\n          ]\n        },\n        dataScope: []\n      };\n    },\n\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.menu_add, false),\n          viewBtn: this.vaildData(this.permission.menu_view, false),\n          delBtn: this.vaildData(this.permission.menu_delete, false),\n          editBtn: this.vaildData(this.permission.menu_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      },\n      scopeIds() {\n        let ids = [];\n        this.selectionListScope.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      // 菜单管理模块\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.parentId = 0;\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.parentId = '';\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getMenu(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getLazyMenuList(this.parentId, Object.assign(params, this.query)).then(res => {\n          this.data = res.data.data;\n          this.loading = false;\n          this.selectionClear();\n        });\n      },\n      treeLoad(tree, treeNode, resolve) {\n        const parentId = tree.id;\n        getLazyMenuList(parentId).then(res => {\n          resolve(res.data.data);\n        });\n      },\n      // 数据权限模块\n      handleDataScope(row) {\n        this.drawerVisible = true;\n        this.scopeMenuId = row.id;\n        this.scopeMenuName = row.name;\n        this.onLoadScope(this.pageScope)\n      },\n      handleDrawerClose(hide) {\n        hide();\n      },\n      rowSaveScope(row, done, loading) {\n        row = {\n          ...row,\n          menuId: this.scopeMenuId,\n        };\n        addApiScope(row).then(() => {\n          this.onLoadScope(this.pageScope);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdateScope(row, index, done, loading) {\n        row = {\n          ...row,\n          menuId: this.scopeMenuId,\n        };\n        updateApiScope(row).then(() => {\n          this.onLoadScope(this.pageScope);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDelScope(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return removeApiScope(row.id);\n          })\n          .then(() => {\n            this.onLoadScope(this.pageScope);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      handleDeleteScope() {\n        if (this.selectionListScope.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return removeApiScope(this.scopeIds);\n          })\n          .then(() => {\n            this.onLoadScope(this.pageScope);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crudScope.toggleSelection();\n          });\n      },\n      beforeOpenScope(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getMenuApiScope(this.formScope.id).then(res => {\n            this.formScope = res.data.data;\n          });\n        }\n        done();\n      },\n      searchResetScope() {\n        this.onLoadScope(this.pageScope);\n      },\n      searchChangeScope(params, done) {\n        this.onLoadScope(this.pageScope, params);\n        done();\n      },\n      selectionChangeScope(list) {\n        this.selectionListScope = list;\n      },\n      currentChangeScope(currentPage) {\n        this.pageScope.currentPage = currentPage;\n      },\n      sizeChangeScope(pageSize) {\n        this.pageScope.pageSize = pageSize;\n      },\n      onLoadScope(page, params = {}) {\n        this.scopeLoading = true;\n        const values = {\n          ...params,\n          menuId: this.scopeMenuId,\n        }\n        getListApiScope(page.currentPage, page.pageSize, Object.assign(values, this.query)).then(res => {\n          const data = res.data.data;\n          this.pageScope.total = data.total;\n          this.dataScope = data.records;\n          this.selectionListScope = [];\n          this.scopeLoading = false;\n        });\n      },\n    }\n  };\n",{"version":3,"sources":["apiscope.vue"],"names":[],"mappingsfile":"apiscope.vue","sourceRoot":"src/views/authority","sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               ref=\"crud\"\n               v-model=\"form\"\n               :permission=\"permissionList\"\n               :before-open=\"beforeOpen\"\n               @row-del=\"rowDel\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\"\n               @tree-load=\"treeLoad\">\n      <template slot-scope=\"{row}\" slot=\"menu\">\n        <el-button type=\"text\"\n                   icon=\"el-icon-setting\"\n                   size=\"small\"\n                   v-if=\"permission.api_scope_setting\"\n                   plain\n                   style=\"border: 0;background-color: transparent !important;\"\n                   @click.stop=\"handleDataScope(row)\">权限配置\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\" slot=\"source\">\n        <div style=\"text-align:center\">\n          <i :class=\"row.source\"/>\n        </div>\n      </template>\n    </avue-crud>\n    <el-drawer :title=\"`[${scopeMenuName}] 接口权限配置`\" :visible.sync=\"drawerVisible\" :direction=\"direction\"\n               append-to-body\n               :before-close=\"handleDrawerClose\" size=\"1000px\">\n      <basic-container>\n        <avue-crud :option=\"optionScope\"\n                   :data=\"dataScope\"\n                   :page=\"pageScope\"\n                   v-model=\"formScope\"\n                   :table-loading=\"scopeLoading\"\n                   ref=\"crudScope\"\n                   @row-del=\"rowDelScope\"\n                   @row-update=\"rowUpdateScope\"\n                   @row-save=\"rowSaveScope\"\n                   :before-open=\"beforeOpenScope\"\n                   @search-change=\"searchChangeScope\"\n                   @search-reset=\"searchResetScope\"\n                   @selection-change=\"selectionChangeScope\"\n                   @current-change=\"currentChangeScope\"\n                   @size-change=\"sizeChangeScope\"\n                   @on-load=\"onLoadScope\">\n          <template slot=\"menuLeft\">\n            <el-button type=\"danger\"\n                       size=\"small\"\n                       icon=\"el-icon-delete\"\n                       plain\n                       @click=\"handleDeleteScope\">删 除\n            </el-button>\n          </template>\n          <template slot-scope=\"{row}\"\n                    slot=\"scopeType\">\n            <el-tag>{{row.scopeTypeName}}</el-tag>\n          </template>\n        </avue-crud>\n      </basic-container>\n    </el-drawer>\n  </basic-container>\n</template>\n\n<script>\n  import {\n    add,\n    remove,\n    update,\n    getLazyMenuList,\n    getMenu\n  } from \"@/api/system/menu\";\n  import {\n    addApiScope,\n    removeApiScope,\n    updateApiScope,\n    getListApiScope,\n    getMenuApiScope\n  } from \"@/api/system/scope\";\n  import {mapGetters} from \"vuex\";\n  import iconList from \"@/config/iconList\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionList: [],\n        query: {},\n        loading: true,\n        parentId: 0,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        drawerVisible: false,\n        direction: 'rtl',\n        scopeLoading: false,\n        scopeMenuId: 0,\n        scopeMenuName: \"菜单\",\n        menu: true,\n        option: {\n          lazy: true,\n          tip: false,\n          simplePage: true,\n          searchShow: true,\n          searchMenuSpan: 6,\n          dialogWidth: \"60%\",\n          tree: true,\n          border: true,\n          index: true,\n          selection: true,\n          viewBtn: false,\n          editBtn: false,\n          addBtn: false,\n          delBtn: false,\n          menuWidth: 150,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"菜单名称\",\n              prop: \"name\",\n              search: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单名称\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"路由地址\",\n              prop: \"path\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入路由地址\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"上级菜单\",\n              prop: \"parentId\",\n              type: \"tree\",\n              dicUrl: \"/api/blade-system/menu/tree\",\n              hide: true,\n              props: {\n                label: \"title\"\n              },\n              rules: [\n                {\n                  required: false,\n                  message: \"请选择上级菜单\",\n                  trigger: \"click\"\n                }\n              ]\n            },\n            {\n              label: \"菜单图标\",\n              prop: \"source\",\n              type: \"icon\",\n              slot: true,\n              width: 80,\n              iconList: iconList,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单图标\",\n                  trigger: \"click\"\n                }\n              ]\n            },\n            {\n              label: \"菜单编号\",\n              prop: \"code\",\n              search: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单编号\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单类型\",\n              prop: \"category\",\n              type: \"radio\",\n              dicData: [\n                {\n                  label: \"菜单\",\n                  value: 1\n                },\n                {\n                  label: \"按钮\",\n                  value: 2\n                }\n              ],\n              hide: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择菜单类型\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单别名\",\n              prop: \"alias\",\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单别名\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"按钮功能\",\n              prop: \"action\",\n              type: \"radio\",\n              dicData: [\n                {\n                  label: \"工具栏\",\n                  value: 0\n                },\n                {\n                  label: \"操作栏\",\n                  value: 1\n                },\n                {\n                  label: \"工具操作栏\",\n                  value: 2\n                }\n              ],\n              hide: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择按钮功能\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"菜单排序\",\n              prop: \"sort\",\n              type: \"number\",\n              width: 80,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单排序\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: \"新窗口\",\n              prop: \"isOpen\",\n              type: \"radio\",\n              dicData: [\n                {\n                  label: \"否\",\n                  value: 0\n                },\n                {\n                  label: \"是\",\n                  value: 1\n                },\n              ],\n              hide: true\n            },\n            {\n              label: \"菜单备注\",\n              prop: \"remark\",\n              type: \"textarea\",\n              span: 24,\n              minRows: 6,\n              hide: true\n            }\n          ]\n        },\n        data: [],\n        formScope: {},\n        selectionListScope: [],\n        pageScope: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        optionScope: {\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          viewBtn: true,\n          selection: true,\n          menuWidth: 200,\n          dialogWidth: 900,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"权限名称\",\n              prop: \"scopeName\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入权限名称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"权限编号\",\n              prop: \"resourceCode\",\n              search: true,\n              width: 180,\n              rules: [{\n                required: true,\n                message: \"请输入权限编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"权限路径\",\n              prop: \"scopePath\",\n              width: 180,\n              rules: [{\n                required: true,\n                message: \"请输入权限编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"接口类型\",\n              type: \"select\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=api_scope_type\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              slot: true,\n              width: 100,\n              prop: \"scopeType\",\n              rules: [{\n                required: true,\n                message: \"请输入通知类型\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"备注\",\n              prop: \"remark\",\n              span: 24,\n              hide: true,\n            },\n          ]\n        },\n        dataScope: []\n      };\n    },\n\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.menu_add, false),\n          viewBtn: this.vaildData(this.permission.menu_view, false),\n          delBtn: this.vaildData(this.permission.menu_delete, false),\n          editBtn: this.vaildData(this.permission.menu_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      },\n      scopeIds() {\n        let ids = [];\n        this.selectionListScope.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      // 菜单管理模块\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.parentId = 0;\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.parentId = '';\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getMenu(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getLazyMenuList(this.parentId, Object.assign(params, this.query)).then(res => {\n          this.data = res.data.data;\n          this.loading = false;\n          this.selectionClear();\n        });\n      },\n      treeLoad(tree, treeNode, resolve) {\n        const parentId = tree.id;\n        getLazyMenuList(parentId).then(res => {\n          resolve(res.data.data);\n        });\n      },\n      // 数据权限模块\n      handleDataScope(row) {\n        this.drawerVisible = true;\n        this.scopeMenuId = row.id;\n        this.scopeMenuName = row.name;\n        this.onLoadScope(this.pageScope)\n      },\n      handleDrawerClose(hide) {\n        hide();\n      },\n      rowSaveScope(row, done, loading) {\n        row = {\n          ...row,\n          menuId: this.scopeMenuId,\n        };\n        addApiScope(row).then(() => {\n          this.onLoadScope(this.pageScope);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdateScope(row, index, done, loading) {\n        row = {\n          ...row,\n          menuId: this.scopeMenuId,\n        };\n        updateApiScope(row).then(() => {\n          this.onLoadScope(this.pageScope);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDelScope(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return removeApiScope(row.id);\n          })\n          .then(() => {\n            this.onLoadScope(this.pageScope);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      handleDeleteScope() {\n        if (this.selectionListScope.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return removeApiScope(this.scopeIds);\n          })\n          .then(() => {\n            this.onLoadScope(this.pageScope);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crudScope.toggleSelection();\n          });\n      },\n      beforeOpenScope(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getMenuApiScope(this.formScope.id).then(res => {\n            this.formScope = res.data.data;\n          });\n        }\n        done();\n      },\n      searchResetScope() {\n        this.onLoadScope(this.pageScope);\n      },\n      searchChangeScope(params, done) {\n        this.onLoadScope(this.pageScope, params);\n        done();\n      },\n      selectionChangeScope(list) {\n        this.selectionListScope = list;\n      },\n      currentChangeScope(currentPage) {\n        this.pageScope.currentPage = currentPage;\n      },\n      sizeChangeScope(pageSize) {\n        this.pageScope.pageSize = pageSize;\n      },\n      onLoadScope(page, params = {}) {\n        this.scopeLoading = true;\n        const values = {\n          ...params,\n          menuId: this.scopeMenuId,\n        }\n        getListApiScope(page.currentPage, page.pageSize, Object.assign(values, this.query)).then(res => {\n          const data = res.data.data;\n          this.pageScope.total = data.total;\n          this.dataScope = data.records;\n          this.selectionListScope = [];\n          this.scopeLoading = false;\n        });\n      },\n    }\n  };\n</script>\n"]}]}