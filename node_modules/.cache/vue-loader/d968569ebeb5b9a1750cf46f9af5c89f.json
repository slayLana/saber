{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/page/index/top/top-search.vue?vue&type=style&index=0&id=07f77b6e&lang=scss&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/page/index/top/top-search.vue","mtime":1666151205527},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/css-loader/index.js","mtime":1666157452306},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1666157454418},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/postcss-loader/src/index.js","mtime":1666157453259},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/sass-loader/dist/cjs.js","mtime":1666157452322},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n.my-autocomplete {\n  li {\n    line-height: normal;\n    padding: 7px;\n\n    .icon {\n      margin-right: 5px;\n      display: inline-block;\n      vertical-align: middle;\n    }\n\n    .name {\n      display: inline-block;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      vertical-align: middle;\n    }\n\n    .addr {\n      padding-top: 5px;\n      width: 100%;\n      font-size: 12px;\n      color: #b4b4b4;\n    }\n\n    .highlighted .addr {\n      color: #ddd;\n    }\n  }\n}\n",{"version":3,"sources":["top-search.vue"],"names":[],"mappings":";AAoIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"top-search.vue","sourceRoot":"src/page/index/top","sourcesContent":["<template>\n  <el-autocomplete class=\"top-search\"\n                   popper-class=\"my-autocomplete\"\n                   v-model=\"value\"\n                   :fetch-suggestions=\"querySearch\"\n                   :placeholder=\"$t('search')\"\n                   @select=\"handleSelect\">\n\n    <template slot-scope=\"{ item }\">\n      <i :class=\"[item[iconKey],'icon']\"></i>\n      <div class=\"name\">{{ item[labelKey] }}</div>\n      <div class=\"addr\">{{ item[pathKey] }}</div>\n    </template>\n  </el-autocomplete>\n</template>\n\n<script>\n  import config from \"../sidebar/config.js\";\n  import {mapGetters} from \"vuex\";\n\n  export default {\n    data() {\n      return {\n        config: config,\n        value: \"\",\n        menuList: []\n      };\n    },\n    created() {\n      this.getMenuList();\n    },\n\n    watch: {\n      menu() {\n        this.getMenuList();\n      }\n    },\n    computed: {\n      labelKey() {\n        return this.website.menu.props.label || this.config.propsDefault.label;\n      },\n      pathKey() {\n        return this.website.menu.props.path || this.config.propsDefault.path;\n      },\n      iconKey() {\n        return this.website.menu.props.icon || this.config.propsDefault.icon;\n      },\n      childrenKey() {\n        return (\n          this.website.menu.props.children || this.config.propsDefault.children\n        );\n      },\n      ...mapGetters([\"menu\", \"website\"])\n    },\n    methods: {\n      getMenuList() {\n        const findMenu = list => {\n          for (let i = 0; i < list.length; i++) {\n            const ele = Object.assign({}, list[i]);\n            if (this.validatenull(ele[this.childrenKey])) {\n              this.menuList.push(ele);\n            } else {\n              findMenu(ele[this.childrenKey]);\n            }\n          }\n        };\n        this.menuList = [];\n        findMenu(this.menu);\n      },\n      querySearch(queryString, cb) {\n        var restaurants = this.menuList;\n        var results = queryString\n          ? restaurants.filter(this.createFilter(queryString))\n          : restaurants;\n        // 调用 callback 返回建议列表的数据\n        cb(results);\n      },\n      createFilter(queryString) {\n        return restaurant => {\n          return (\n            restaurant.name.toLowerCase().indexOf(queryString.toLowerCase()) ===\n            0\n          );\n        };\n      },\n      handleSelect(item) {\n        this.value = \"\";\n        this.$router.push({\n          path: this.$router.$avueRouter.getPath({\n            name: item[this.labelKey],\n            src: item[this.pathKey]\n          }, item.meta),\n          query: item.query\n        });\n      }\n    }\n  };\n</script>\n\n<style lang=\"scss\">\n  .my-autocomplete {\n    li {\n      line-height: normal;\n      padding: 7px;\n\n      .icon {\n        margin-right: 5px;\n        display: inline-block;\n        vertical-align: middle;\n      }\n\n      .name {\n        display: inline-block;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        vertical-align: middle;\n      }\n\n      .addr {\n        padding-top: 5px;\n        width: 100%;\n        font-size: 12px;\n        color: #b4b4b4;\n      }\n\n      .highlighted .addr {\n        color: #ddd;\n      }\n    }\n  }\n</style>\n"]}]}