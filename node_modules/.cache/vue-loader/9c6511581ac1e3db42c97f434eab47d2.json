{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/page/index/top/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/page/index/top/index.vue","mtime":1666151205526},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n  import {resetRouter} from '@/router/router'\n  import {mapGetters, mapState} from \"vuex\";\n  import {fullscreenToggel, listenfullscreen} from \"@/util/util\";\n  import topLock from \"./top-lock\";\n  import topMenu from \"./top-menu\";\n  import topSearch from \"./top-search\";\n  import topTheme from \"./top-theme\";\n  import topLogs from \"./top-logs\";\n  import topColor from \"./top-color\";\n  import topNotice from './top-notice'\n  import topLang from \"./top-lang\";\n\n  export default {\n    components: {\n      topLock,\n      topMenu,\n      topSearch,\n      topTheme,\n      topLogs,\n      topColor,\n      topNotice,\n      topLang\n    },\n    name: \"top\",\n    data() {\n      return {\n        userBox: false,\n        userForm: {\n          deptId: '',\n          roleId: ''\n        },\n        userOption: {\n          labelWidth: 70,\n          submitBtn: true,\n          emptyBtn: false,\n          submitText: '切换',\n          column: [\n            {\n              label: '部门',\n              prop: 'deptId',\n              type: 'select',\n              props: {\n                label: 'deptName',\n                value: 'id'\n              },\n              dicUrl: '/api/blade-system/dept/select',\n              span: 24,\n              display: false,\n              rules: [{\n                required: true,\n                message: \"请选择部门\",\n                trigger: \"blur\"\n              }],\n            },\n            {\n              label: '角色',\n              prop: 'roleId',\n              type: 'select',\n              props: {\n                label: 'roleName',\n                value: 'id'\n              },\n              dicUrl: '/api/blade-system/role/select',\n              span: 24,\n              display: false,\n              rules: [{\n                required: true,\n                message: \"请选择角色\",\n                trigger: \"blur\"\n              }],\n            },\n          ]\n        }\n      };\n    },\n    filters: {},\n    created() {\n    },\n    mounted() {\n      listenfullscreen(this.setScreen);\n    },\n    computed: {\n      ...mapState({\n        showDebug: state => state.common.showDebug,\n        showTheme: state => state.common.showTheme,\n        showLock: state => state.common.showLock,\n        showFullScren: state => state.common.showFullScren,\n        showCollapse: state => state.common.showCollapse,\n        showSearch: state => state.common.showSearch,\n        showMenu: state => state.common.showMenu,\n        showColor: state => state.common.showColor\n      }),\n      ...mapGetters([\n        \"userInfo\",\n        \"isFullScren\",\n        \"tagWel\",\n        \"tagList\",\n        \"isCollapse\",\n        \"tag\",\n        \"logsLen\",\n        \"logsFlag\"\n      ])\n    },\n    methods: {\n      handleScreen() {\n        fullscreenToggel();\n      },\n      setCollapse() {\n        this.$store.commit(\"SET_COLLAPSE\");\n      },\n      setScreen() {\n        this.$store.commit(\"SET_FULLSCREN\");\n      },\n      switchDept() {\n        const userId = this.userInfo.user_id;\n        const deptColumn = this.findObject(this.userOption.column, \"deptId\");\n        deptColumn.dicUrl = `/api/blade-system/dept/select?userId=${userId}`;\n        deptColumn.display = true;\n        const roleColumn = this.findObject(this.userOption.column, \"roleId\");\n        roleColumn.dicUrl = `/api/blade-system/role/select?userId=${userId}`;\n        roleColumn.display = true;\n        this.userBox = true;\n      },\n      submitSwitch (form, done) {\n        this.$store.dispatch(\"refreshToken\", form).then(() => {\n          this.userBox = false;\n          this.$router.push({path: \"/\"});\n        })\n        done();\n      },\n      logout() {\n        this.$confirm(this.$t(\"logoutTip\"), this.$t(\"tip\"), {\n          confirmButtonText: this.$t(\"submitText\"),\n          cancelButtonText: this.$t(\"cancelText\"),\n          type: \"warning\"\n        }).then(() => {\n          this.$store.dispatch(\"LogOut\").then(() => {\n            resetRouter();\n            this.$router.push({path: \"/login\"});\n          });\n        });\n      }\n    }\n  };\n",{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"src/page/index/top","sourcesContent":["<template>\n  <div class=\"avue-top\">\n    <div class=\"top-bar__left\">\n      <div class=\"avue-breadcrumb\"\n           :class=\"[{ 'avue-breadcrumb--active': isCollapse }]\"\n           v-if=\"showCollapse\">\n        <i class=\"icon-navicon\"\n           @click=\"setCollapse\"></i>\n      </div>\n    </div>\n    <div class=\"top-bar__title\">\n      <div class=\"top-bar__item top-bar__item--show\"\n           v-if=\"showMenu\">\n        <top-menu ref=\"topMenu\"></top-menu>\n      </div>\n      <span class=\"top-bar__item\"\n            v-if=\"showSearch\">\n        <top-search></top-search>\n      </span>\n    </div>\n    <div class=\"top-bar__right\">\n      <el-tooltip v-if=\"showColor\"\n                  effect=\"dark\"\n                  :content=\"$t('navbar.color')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item\">\n          <top-color></top-color>\n        </div>\n      </el-tooltip>\n      <el-tooltip v-if=\"showDebug\"\n                  effect=\"dark\"\n                  :content=\"logsFlag?$t('navbar.bug'):logsLen+$t('navbar.bugs')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item\">\n          <top-logs></top-logs>\n        </div>\n      </el-tooltip>\n      <el-tooltip v-if=\"showLock\"\n                  effect=\"dark\"\n                  :content=\"$t('navbar.lock')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item\">\n          <top-lock></top-lock>\n        </div>\n      </el-tooltip>\n      <el-tooltip v-if=\"showTheme\"\n                  effect=\"dark\"\n                  :content=\"$t('navbar.theme')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item top-bar__item--show\">\n          <top-theme></top-theme>\n        </div>\n      </el-tooltip>\n      <el-tooltip effect=\"dark\"\n                  :content=\"$t('navbar.notice')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item top-bar__item--show\">\n          <top-notice></top-notice>\n        </div>\n      </el-tooltip>\n      <el-tooltip effect=\"dark\"\n                  :content=\"$t('navbar.language')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item top-bar__item--show\">\n          <top-lang></top-lang>\n        </div>\n      </el-tooltip>\n      <el-tooltip v-if=\"showFullScren\"\n                  effect=\"dark\"\n                  :content=\"isFullScren?$t('navbar.screenfullF'):$t('navbar.screenfull')\"\n                  placement=\"bottom\">\n        <div class=\"top-bar__item\">\n          <i :class=\"isFullScren?'icon-tuichuquanping':'icon-quanping'\"\n             @click=\"handleScreen\"></i>\n        </div>\n      </el-tooltip>\n      <img class=\"top-bar__img\"\n           :src=\"userInfo.avatar\">\n      <el-dropdown>\n        <span class=\"el-dropdown-link\">\n          {{userInfo.userName}}\n          <i class=\"el-icon-arrow-down el-icon--right\"></i>\n        </span>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item>\n            <router-link to=\"/\">{{$t('navbar.dashboard')}}</router-link>\n          </el-dropdown-item>\n          <el-dropdown-item>\n            <router-link to=\"/info/index\">{{$t('navbar.userinfo')}}</router-link>\n          </el-dropdown-item>\n          <el-dropdown-item v-if=\"this.website.switchMode\" @click.native=\"switchDept\"\n                            >{{$t('navbar.switchDept')}}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"logout\"\n                            divided>{{$t('navbar.logOut')}}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n      <el-dialog title=\"用户信息选择\"\n                 append-to-body\n                 :visible.sync=\"userBox\"\n                 width=\"350px\">\n        <avue-form ref=\"form\" :option=\"userOption\" v-model=\"userForm\" @submit=\"submitSwitch\"/>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n<script>\n  import {resetRouter} from '@/router/router'\n  import {mapGetters, mapState} from \"vuex\";\n  import {fullscreenToggel, listenfullscreen} from \"@/util/util\";\n  import topLock from \"./top-lock\";\n  import topMenu from \"./top-menu\";\n  import topSearch from \"./top-search\";\n  import topTheme from \"./top-theme\";\n  import topLogs from \"./top-logs\";\n  import topColor from \"./top-color\";\n  import topNotice from './top-notice'\n  import topLang from \"./top-lang\";\n\n  export default {\n    components: {\n      topLock,\n      topMenu,\n      topSearch,\n      topTheme,\n      topLogs,\n      topColor,\n      topNotice,\n      topLang\n    },\n    name: \"top\",\n    data() {\n      return {\n        userBox: false,\n        userForm: {\n          deptId: '',\n          roleId: ''\n        },\n        userOption: {\n          labelWidth: 70,\n          submitBtn: true,\n          emptyBtn: false,\n          submitText: '切换',\n          column: [\n            {\n              label: '部门',\n              prop: 'deptId',\n              type: 'select',\n              props: {\n                label: 'deptName',\n                value: 'id'\n              },\n              dicUrl: '/api/blade-system/dept/select',\n              span: 24,\n              display: false,\n              rules: [{\n                required: true,\n                message: \"请选择部门\",\n                trigger: \"blur\"\n              }],\n            },\n            {\n              label: '角色',\n              prop: 'roleId',\n              type: 'select',\n              props: {\n                label: 'roleName',\n                value: 'id'\n              },\n              dicUrl: '/api/blade-system/role/select',\n              span: 24,\n              display: false,\n              rules: [{\n                required: true,\n                message: \"请选择角色\",\n                trigger: \"blur\"\n              }],\n            },\n          ]\n        }\n      };\n    },\n    filters: {},\n    created() {\n    },\n    mounted() {\n      listenfullscreen(this.setScreen);\n    },\n    computed: {\n      ...mapState({\n        showDebug: state => state.common.showDebug,\n        showTheme: state => state.common.showTheme,\n        showLock: state => state.common.showLock,\n        showFullScren: state => state.common.showFullScren,\n        showCollapse: state => state.common.showCollapse,\n        showSearch: state => state.common.showSearch,\n        showMenu: state => state.common.showMenu,\n        showColor: state => state.common.showColor\n      }),\n      ...mapGetters([\n        \"userInfo\",\n        \"isFullScren\",\n        \"tagWel\",\n        \"tagList\",\n        \"isCollapse\",\n        \"tag\",\n        \"logsLen\",\n        \"logsFlag\"\n      ])\n    },\n    methods: {\n      handleScreen() {\n        fullscreenToggel();\n      },\n      setCollapse() {\n        this.$store.commit(\"SET_COLLAPSE\");\n      },\n      setScreen() {\n        this.$store.commit(\"SET_FULLSCREN\");\n      },\n      switchDept() {\n        const userId = this.userInfo.user_id;\n        const deptColumn = this.findObject(this.userOption.column, \"deptId\");\n        deptColumn.dicUrl = `/api/blade-system/dept/select?userId=${userId}`;\n        deptColumn.display = true;\n        const roleColumn = this.findObject(this.userOption.column, \"roleId\");\n        roleColumn.dicUrl = `/api/blade-system/role/select?userId=${userId}`;\n        roleColumn.display = true;\n        this.userBox = true;\n      },\n      submitSwitch (form, done) {\n        this.$store.dispatch(\"refreshToken\", form).then(() => {\n          this.userBox = false;\n          this.$router.push({path: \"/\"});\n        })\n        done();\n      },\n      logout() {\n        this.$confirm(this.$t(\"logoutTip\"), this.$t(\"tip\"), {\n          confirmButtonText: this.$t(\"submitText\"),\n          cancelButtonText: this.$t(\"cancelText\"),\n          type: \"warning\"\n        }).then(() => {\n          this.$store.dispatch(\"LogOut\").then(() => {\n            resetRouter();\n            this.$router.push({path: \"/login\"});\n          });\n        });\n      }\n    }\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n"]}]}