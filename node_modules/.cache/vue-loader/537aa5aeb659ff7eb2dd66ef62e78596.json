{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/page/login/codelogin.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/page/login/codelogin.vue","mtime":1666151205527},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\nimport { isvalidatemobile } from \"@/util/validate\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  name: \"codelogin\",\n  data() {\n    const validatePhone = (rule, value, callback) => {\n      if (isvalidatemobile(value)[0]) {\n        callback(new Error(isvalidatemobile(value)[1]));\n      } else {\n        callback();\n      }\n    };\n    const validateCode = (rule, value, callback) => {\n      if (value.length !== 4) {\n        callback(new Error(\"请输入4位数的验证码\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      msgText: \"\",\n      msgTime: \"\",\n      msgKey: false,\n      loginForm: {\n        phone: \"\",\n        code: \"\"\n      },\n      loginRules: {\n        phone: [{ required: true, trigger: \"blur\", validator: validatePhone }],\n        code: [{ required: true, trigger: \"blur\", validator: validateCode }]\n      }\n    };\n  },\n  created() {\n    this.msgText = this.config.MSGINIT;\n    this.msgTime = this.config.MSGTIME;\n  },\n  mounted() {},\n  computed: {\n    ...mapGetters([\"tagWel\"]),\n    config() {\n      return {\n        MSGINIT: this.$t(\"login.msgText\"),\n        MSGSCUCCESS: this.$t(\"login.msgSuccess\"),\n        MSGTIME: 60\n      };\n    }\n  },\n  props: [],\n  methods: {\n    handleSend() {\n      if (this.msgKey) return;\n      this.msgText = this.msgTime + this.config.MSGSCUCCESS;\n      this.msgKey = true;\n      const time = setInterval(() => {\n        this.msgTime--;\n        this.msgText = this.msgTime + this.config.MSGSCUCCESS;\n        if (this.msgTime === 0) {\n          this.msgTime = this.config.MSGTIME;\n          this.msgText = this.config.MSGINIT;\n          this.msgKey = false;\n          clearInterval(time);\n        }\n      }, 1000);\n    },\n    handleLogin() {\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.$store.dispatch(\"LoginByPhone\", this.loginForm).then(() => {\n            this.$router.push({ path: this.tagWel.value });\n          });\n        }\n      });\n    }\n  }\n};\n",{"version":3,"sources":["codelogin.vue"],"names":[],"mappings":";AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"codelogin.vue","sourceRoot":"src/page/login","sourcesContent":["<template>\n  <el-form class=\"login-form\"\n           status-icon\n           :rules=\"loginRules\"\n           ref=\"loginForm\"\n           :model=\"loginForm\"\n           label-width=\"0\">\n    <el-form-item prop=\"phone\">\n      <el-input size=\"small\"\n                @keyup.enter.native=\"handleLogin\"\n                v-model=\"loginForm.phone\"\n                auto-complete=\"off\"\n                :placeholder=\"$t('login.phone')\">\n        <i slot=\"prefix\"\n           class=\"icon-shouji\"/>\n      </el-input>\n    </el-form-item>\n    <el-form-item prop=\"code\">\n      <el-input size=\"small\"\n                @keyup.enter.native=\"handleLogin\"\n                v-model=\"loginForm.code\"\n                auto-complete=\"off\"\n                :placeholder=\"$t('login.code')\">\n        <i slot=\"prefix\"\n           class=\"icon-yanzhengma\"\n           style=\"margin-top:6px;\"/>\n        <template slot=\"append\">\n          <span @click=\"handleSend\"\n                class=\"msg-text\"\n                :class=\"[{display:msgKey}]\">{{msgText}}</span>\n        </template>\n      </el-input>\n    </el-form-item>\n    <el-form-item>\n      <el-button size=\"small\"\n                 type=\"primary\"\n                 @click.native.prevent=\"handleLogin\"\n                 class=\"login-submit\">{{$t('login.submit')}}</el-button>\n    </el-form-item>\n  </el-form>\n</template>\n\n<script>\nimport { isvalidatemobile } from \"@/util/validate\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  name: \"codelogin\",\n  data() {\n    const validatePhone = (rule, value, callback) => {\n      if (isvalidatemobile(value)[0]) {\n        callback(new Error(isvalidatemobile(value)[1]));\n      } else {\n        callback();\n      }\n    };\n    const validateCode = (rule, value, callback) => {\n      if (value.length !== 4) {\n        callback(new Error(\"请输入4位数的验证码\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      msgText: \"\",\n      msgTime: \"\",\n      msgKey: false,\n      loginForm: {\n        phone: \"\",\n        code: \"\"\n      },\n      loginRules: {\n        phone: [{ required: true, trigger: \"blur\", validator: validatePhone }],\n        code: [{ required: true, trigger: \"blur\", validator: validateCode }]\n      }\n    };\n  },\n  created() {\n    this.msgText = this.config.MSGINIT;\n    this.msgTime = this.config.MSGTIME;\n  },\n  mounted() {},\n  computed: {\n    ...mapGetters([\"tagWel\"]),\n    config() {\n      return {\n        MSGINIT: this.$t(\"login.msgText\"),\n        MSGSCUCCESS: this.$t(\"login.msgSuccess\"),\n        MSGTIME: 60\n      };\n    }\n  },\n  props: [],\n  methods: {\n    handleSend() {\n      if (this.msgKey) return;\n      this.msgText = this.msgTime + this.config.MSGSCUCCESS;\n      this.msgKey = true;\n      const time = setInterval(() => {\n        this.msgTime--;\n        this.msgText = this.msgTime + this.config.MSGSCUCCESS;\n        if (this.msgTime === 0) {\n          this.msgTime = this.config.MSGTIME;\n          this.msgText = this.config.MSGINIT;\n          this.msgKey = false;\n          clearInterval(time);\n        }\n      }, 1000);\n    },\n    handleLogin() {\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.$store.dispatch(\"LoginByPhone\", this.loginForm).then(() => {\n            this.$router.push({ path: this.tagWel.value });\n          });\n        }\n      });\n    }\n  }\n};\n</script>\n\n<style>\n.msg-text {\n  display: block;\n  width: 60px;\n  font-size: 12px;\n  text-align: center;\n  cursor: pointer;\n}\n.msg-text.display {\n  color: #ccc;\n}\n</style>\n"]}]}