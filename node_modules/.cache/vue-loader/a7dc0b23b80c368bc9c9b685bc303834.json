{"remainingRequest":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/bladex/saber/src/views/system/topmenu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/bladex/saber/src/views/system/topmenu.vue","mtime":1666151205543},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n  import {getList, getDetail, add, update, remove, grant, grantTree, getTopTree} from \"@/api/system/topmenu\";\n  import {mapGetters} from \"vuex\";\n  import iconList from \"@/config/iconList\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        box: false,\n        query: {},\n        loading: true,\n        props: {\n          label: \"title\",\n          value: \"key\"\n        },\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        selectionList: [],\n        menuGrantList: [],\n        menuTreeObj: [],\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          viewBtn: true,\n          selection: true,\n          dialogWidth: 900,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"菜单名\",\n              prop: \"name\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入菜单名\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"菜单图标\",\n              prop: \"source\",\n              type: \"icon\",\n              slot: true,\n              iconList: iconList,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单图标\",\n                  trigger: \"click\"\n                }\n              ]\n            },\n            {\n              label: \"菜单编号\",\n              prop: \"code\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入菜单编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"菜单排序\",\n              prop: \"sort\",\n              type: \"number\",\n              slot: true,\n              rules: [{\n                required: true,\n                message: \"请输入菜单排序\",\n                trigger: \"blur\"\n              }]\n            },\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.topmenu_add, false),\n          viewBtn: this.vaildData(this.permission.topmenu_view, false),\n          delBtn: this.vaildData(this.permission.topmenu_delete, false),\n          editBtn: this.vaildData(this.permission.topmenu_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      },\n      idsArray() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids;\n      }\n    },\n    methods: {\n      submit() {\n        const menuList = this.$refs.treeMenu.getCheckedKeys();\n        grant(this.idsArray, menuList).then(() => {\n          this.box = false;\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          this.onLoad(this.page);\n        });\n      },\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleMenuSetting() {\n        if (this.selectionList.length !== 1) {\n          this.$message.warning(\"只能选择一条数据\");\n          return;\n        }\n        this.menuTreeObj = [];\n        grantTree()\n          .then(res => {\n            this.menuGrantList = res.data.data.menu;\n            getTopTree(this.ids).then(res => {\n              this.menuTreeObj = res.data.data.menu;\n              this.box = true;\n            });\n          });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getDetail(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      sortChange(row) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n        }, error => {\n          window.console.log(error);\n        });\n      },\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n",{"version":3,"sources":["topmenu.vue"],"names":[],"mappings":";AAofile":"topmenu.vue","sourceRoot":"src/views/system","sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               :page.sync=\"page\"\n               :permission=\"permissionList\"\n               :before-open=\"beforeOpen\"\n               v-model=\"form\"\n               ref=\"crud\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               @row-del=\"rowDel\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\">\n      <template slot=\"menuLeft\">\n        <el-button type=\"danger\"\n                   size=\"small\"\n                   icon=\"el-icon-delete\"\n                   plain\n                   v-if=\"permission.topmenu_delete\"\n                   @click=\"handleDelete\">删 除\n        </el-button>\n        <el-button size=\"small\"\n                   icon=\"el-icon-delete\"\n                   @click=\"handleMenuSetting\"\n                   v-if=\"permission.topmenu_setting\"\n                   plain>菜单配置\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\" slot=\"source\">\n        <div style=\"text-align:center\">\n          <i :class=\"row.source\"></i>\n        </div>\n      </template>\n      <template slot=\"sort\" slot-scope=\"{row}\" >\n        <el-input-number v-model=\"row.sort\" @change=\"sortChange(row)\" :min=\"1\" :max=\"100\"></el-input-number>\n      </template>\n    </avue-crud>\n    <el-dialog title=\"下级菜单配置\"\n               append-to-body\n               :visible.sync=\"box\"\n               width=\"345px\">\n\n      <el-tree :data=\"menuGrantList\"\n               show-checkbox\n               node-key=\"id\"\n               ref=\"treeMenu\"\n               :default-checked-keys=\"menuTreeObj\"\n               :props=\"props\">\n      </el-tree>\n\n      <span slot=\"footer\"\n            class=\"dialog-footer\">\n        <el-button @click=\"box = false\">取 消</el-button>\n        <el-button type=\"primary\"\n                   @click=\"submit\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </basic-container>\n</template>\n\n<script>\n  import {getList, getDetail, add, update, remove, grant, grantTree, getTopTree} from \"@/api/system/topmenu\";\n  import {mapGetters} from \"vuex\";\n  import iconList from \"@/config/iconList\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        box: false,\n        query: {},\n        loading: true,\n        props: {\n          label: \"title\",\n          value: \"key\"\n        },\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        selectionList: [],\n        menuGrantList: [],\n        menuTreeObj: [],\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          viewBtn: true,\n          selection: true,\n          dialogWidth: 900,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"菜单名\",\n              prop: \"name\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入菜单名\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"菜单图标\",\n              prop: \"source\",\n              type: \"icon\",\n              slot: true,\n              iconList: iconList,\n              rules: [\n                {\n                  required: true,\n                  message: \"请输入菜单图标\",\n                  trigger: \"click\"\n                }\n              ]\n            },\n            {\n              label: \"菜单编号\",\n              prop: \"code\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入菜单编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"菜单排序\",\n              prop: \"sort\",\n              type: \"number\",\n              slot: true,\n              rules: [{\n                required: true,\n                message: \"请输入菜单排序\",\n                trigger: \"blur\"\n              }]\n            },\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.topmenu_add, false),\n          viewBtn: this.vaildData(this.permission.topmenu_view, false),\n          delBtn: this.vaildData(this.permission.topmenu_delete, false),\n          editBtn: this.vaildData(this.permission.topmenu_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      },\n      idsArray() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids;\n      }\n    },\n    methods: {\n      submit() {\n        const menuList = this.$refs.treeMenu.getCheckedKeys();\n        grant(this.idsArray, menuList).then(() => {\n          this.box = false;\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          this.onLoad(this.page);\n        });\n      },\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleMenuSetting() {\n        if (this.selectionList.length !== 1) {\n          this.$message.warning(\"只能选择一条数据\");\n          return;\n        }\n        this.menuTreeObj = [];\n        grantTree()\n          .then(res => {\n            this.menuGrantList = res.data.data.menu;\n            getTopTree(this.ids).then(res => {\n              this.menuTreeObj = res.data.data.menu;\n              this.box = true;\n            });\n          });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getDetail(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      sortChange(row) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n        }, error => {\n          window.console.log(error);\n        });\n      },\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n\n<style>\n  .none-border {\n    border: 0;\n    background-color: transparent !important;\n  }\n</style>\n"]}]}