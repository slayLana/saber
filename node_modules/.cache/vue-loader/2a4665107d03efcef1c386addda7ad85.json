{"remainingRequest":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/bladex/saber/node_modules/avue-plugin-ueditor/packages/ueditor/src/main.vue?vue&type=style&index=0&id=44393f86&lang=scss&","dependencies":[{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/avue-plugin-ueditor/packages/ueditor/src/main.vue","mtime":1666157454101},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/css-loader/index.js","mtime":1666157452306},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1666157454418},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/postcss-loader/src/index.js","mtime":1666157453259},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/sass-loader/dist/cjs.js","mtime":1666157452322},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n@import \"../../theme-chack/src/index.scss\";\n",{"version":3,"sources":["main.vue"],"names":[],"mappings":";AAwRA","file":"main.vue","sourceRoot":"node_modules/avue-plugin-ueditor/packages/ueditor/src","sourcesContent":["<template>\n  <div class=\"avue-ueditor\">\n    <div :id=\"id\"></div>\n    <el-dialog title=\"源代码编辑\"\n               :before-close=\"handleClose\"\n               :visible.sync=\"dialogVisible\"\n               width=\"100%\"\n               fullscreen\n               append-to-body>\n      <el-input v-model=\"textall\"\n                autosize\n                type=\"textarea\"></el-input>\n    </el-dialog>\n  </div>\n</template>\n<script>\nimport { getClient } from \"./upload/ali\";\nimport { getToken } from \"./upload/qiniu\";\nimport { getObjValue, HTMLFormat } from \"./upload/util\";\nimport E from 'wangeditor'\nexport default {\n  name: \"AvueUeditor\",\n  computed: {\n    domId () {\n      return '#' + this.id\n    },\n    imgFlag () {\n      return this.img.url == '';\n    },\n    isImg () {\n      return this.img.obj.src\n    },\n    urlKey () {\n      return this.props.url || 'url';\n    },\n    props () {\n      return this.options.props || {};\n    },\n    oss () {\n      return this.options.oss\n    },\n    customConfig () {\n      return this.options.customConfig || {}\n    },\n    action () {\n      return this.options.action\n    },\n    qiniu () {\n      return this.options.qiniu\n    },\n    ali () {\n      return this.options.ali\n    },\n    isQiniuOSS () {\n      return this.oss === \"qiniu\";\n    },\n    isAliOSS () {\n      return this.oss === \"ali\";\n    },\n    headers () {\n      return this.options.headers || {};\n    }\n  },\n  props: {\n    options: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    id: {\n      type: String,\n      default: () => {\n        return 'avue-ueditor-' + Math.ceil(Math.random() * 100)\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: String,\n      default: \"\"\n    },\n  },\n  data () {\n    return {\n      textall: '',\n      text: '',\n      dialogVisible: false,\n      editor: ''\n    };\n  },\n  watch: {\n    disabled (val) {\n      this.editor.$textElem.attr('contenteditable', !val)\n    },\n    value (newVal) {\n      if (this.editor) {\n        if (newVal && newVal !== this.text) {\n          this.text = newVal;\n          this.editor.txt.html(newVal);\n        } else if (!newVal) {\n          this.text = '';\n          this.editor.txt.html('');\n        }\n      }\n    },\n  },\n  mounted () {\n    this.initEdit();\n  },\n  methods: {\n    initEdit () {\n      this.editor = new E(this.domId)\n      window.wangEditor = E;\n      this.editor.customConfig.zIndex = 100;\n      this.editor.customConfig.onfocus = () => {\n        this.$emit('focus', this.text)\n      }\n      this.editor.customConfig.onblur = (html) => {\n        this.$emit('blur', html)\n      }\n      this.editor.customConfig.onchange = (html) => {\n        this.text = html;\n        this.$emit('input', this.text)\n      }\n      this.editor.customConfig = Object.assign(this.editor.customConfig, this.customConfig)\n      this.initUploadImg();\n      this.editor.create()\n      this.initPlugins();\n      if (this.disabled) {\n        this.editor.$textElem.attr('contenteditable', false)\n      }\n      this.editor.txt.html(this.value);\n      // 去掉文件粘贴自动上传，如果是复制的网页图片是不会生成两个img标签，粘贴事件不识别是否是网络图片，都会已文件的方式上传，导致bug\n      // this.handlePaste();\n    },\n    initUploadImg () {\n      this.editor.customConfig.customUploadImg = (file, insert) => {\n        this.uploadFile(file[0]).then(res => {\n          insert(res)\n        })\n      }\n    },\n    uploadFile (file) {\n      return new Promise((resolve, reject) => {\n        const loading = this.$loading({\n          lock: true,\n          text: 'Loading',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)',\n          // 只在输入框里面弹起loading，全屏loading很影响用户体验\n          target:`${this.domId}`\n        });\n\n        const headers = Object.assign(this.headers, { \"Content-Type\": \"multipart/form-data\" });\n        let oss_config = {};\n        let client;\n        let param = new FormData();\n        let url = this.action;\n        param.append(\"file\", file);\n        if (this.isQiniuOSS) {\n          oss_config = this.qiniu;\n          const token = getToken(oss_config.AK, oss_config.SK, {\n            scope: oss_config.scope,\n            deadline: new Date().getTime() + oss_config.deadline * 3600\n          });\n          param.append(\"token\", token);\n          url = \"http://up.qiniu.com/\";\n        } else if (this.isAliOSS) {\n          oss_config = this.ali;\n          client = getClient({\n            region: oss_config.region,\n            endpoint: oss_config.endpoint,\n            accessKeyId: oss_config.accessKeyId,\n            accessKeySecret: oss_config.accessKeySecret,\n            bucket: oss_config.bucket\n          });\n        }\n        (() => {\n          if (this.isAliOSS) {\n            return client.put(file.name, file);\n          } else {\n            return this.$axios.post(url, param, { headers });\n          }\n        })().then(res => {\n          let list = {};\n          var result = '';\n          if (this.isAliOSS) {\n            list = res;\n            result = list.url;\n          } else if (this.isQiniuOSS) {\n            list = res.data;\n            list.key = oss_config.url + list.key;\n            result = list.key;\n          } else {\n            list = getObjValue(res.data, this.props.res, \"object\");\n            result = list[this.urlKey];\n          }\n          var html = result\n          loading.close();\n          resolve(html)\n        }).catch(err => {\n          loading.close();\n          reject(err);\n        });\n      })\n\n    },\n    handleClose (done) {\n      this.$emit('input', HTMLFormat(this.textall))\n      done()\n    },\n    getUEContent () {\n      return this.editor.txt.html()\n    },\n    HTMLFormat,\n    handlePaste () {\n      //粘贴键\n      document.addEventListener(\"paste\", e => {\n        //获取剪切板文件\n        const getFile = event => {\n          if (event.clipboardData || event.originalEvent) {\n            var clipboardData =\n              event.clipboardData || event.originalEvent.clipboardData;\n            if (clipboardData.items) {\n              var items = clipboardData.items,\n                len = items.length,\n                blob = null;\n              for (var i = 0; i < len; i++) {\n                if (items[i].type.indexOf(\"image\") !== -1) {\n                  blob = items[i].getAsFile();\n                  return blob;\n                }\n              }\n            }\n          }\n        };\n        const file = getFile(e);\n        if (file) {\n          this.uploadFile(file).then(res => {\n            this.editor.txt.append('<img src=\"' + res + '\" />')\n          })\n        }\n      });\n    },\n    initPlugins () {\n      E.fullscreen = {\n        // editor create之后调用\n        init: function (editorSelector) {\n          setTimeout(() => {\n            document.querySelector(editorSelector + \" .w-e-toolbar\").appendHTML('<div class=\"w-e-menu\"><span class=\"_wangEditor_btn_fullscreen\" onclick=\"window.wangEditor.fullscreen.toggleFullscreen(\\'' + editorSelector + '\\')\">全屏</span></div>');\n          }, 0);\n        },\n        toggleFullscreen: function (editorSelector) {\n          document.querySelector(editorSelector).toggleClass('fullscreen-editor');\n          if (document.querySelector(editorSelector + ' ._wangEditor_btn_fullscreen').innerText == '全屏') {\n            document.querySelector(editorSelector + ' ._wangEditor_btn_fullscreen').innerText = '退出全屏';\n          } else {\n            document.querySelector(editorSelector + ' ._wangEditor_btn_fullscreen').innerText = '全屏';\n          }\n        }\n      };\n      E.fullscreen.init(this.domId);\n      E.views = {\n        init: function (editorSelector) {\n          document.querySelector(editorSelector + \" .w-e-toolbar\").appendHTML('<div class=\"w-e-menu\"><span class=\"_wangEditor_btn_sourcecode\" onclick=\"window.wangEditor.views.toggleFullscreen(\\'' + editorSelector + '\\')\">源代码</span></div>');\n        },\n        toggleFullscreen: () => {\n          this.textall = HTMLFormat(this.value);\n          this.dialogVisible = true;\n        }\n      };\n      E.views.init(this.domId);\n    },\n  }\n};\n</script>\n<style lang=\"scss\">\n@import \"../../theme-chack/src/index.scss\";\n</style>\n"]}]}