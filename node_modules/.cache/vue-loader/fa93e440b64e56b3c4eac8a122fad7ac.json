{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/work/claim.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/work/claim.vue","mtime":1666151205547},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n  import {mapGetters} from \"vuex\";\n  import {claimList, claimTask} from \"@/api/work/work\";\n  import {flowCategory, flowRoute} from \"@/util/flow\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionId: '',\n        selectionList: [],\n        query: {},\n        loading: true,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        processInstanceId: '',\n        flowBox: false,\n        workBox: false,\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          tip: false,\n          simplePage: true,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          selection: true,\n          editBtn: false,\n          addBtn: false,\n          viewBtn: false,\n          delBtn: false,\n          dialogWidth: 900,\n          menuWidth: 200,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"流程分类\",\n              type: \"select\",\n              row: true,\n              dicUrl: \"/api/blade-system/dict/dictionary?code=flow\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              slot: true,\n              prop: \"category\",\n              search: true,\n              hide: true,\n              width: 100,\n            },\n            {\n              label: '流程名称',\n              prop: 'processDefinitionName',\n              search: true,\n            },\n            {\n              label: '当前步骤',\n              prop: 'taskName',\n            },\n            {\n              label: '流程版本',\n              prop: 'processDefinitionVersion',\n              slot: true,\n              width: 80,\n            },\n            {\n              label: '申请时间',\n              prop: 'createTime',\n              width: 165,\n            },\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"permission\", \"flowRoutes\"]),\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      },\n    },\n    methods: {\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleClaim(row) {\n        this.$confirm(\"确定签收此任务?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return claimTask(row.taskId);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      handleDetail(row) {\n        this.$router.push({path: `/work/process/${flowRoute(this.flowRoutes, row.category)}/detail/${row.processInstanceId}/${row.businessId}`});\n      },\n      handleImage(row) {\n        this.processInstanceId = row.processInstanceId;\n        this.flowBox = true;\n      },\n      currentChange(currentPage){\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize){\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        const query = {\n          ...this.query,\n          category: (params.category) ? flowCategory(params.category) : null\n        };\n        this.loading = true;\n        claimList(page.currentPage, page.pageSize, Object.assign(params, query)).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n",{"version":3,"sources":["claim.vue"],"names":[],"mappingsfile":"claim.vue","sourceRoot":"src/views/work","sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               ref=\"crud\"\n               v-model=\"form\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\">\n      <template slot-scope=\"scope\" slot=\"menu\">\n        <el-button type=\"text\"\n                   size=\"small\"\n                   icon=\"el-icon-download\"\n                   v-if=\"permission.work_claim_sign\"\n                   @click.stop=\"handleClaim(scope.row)\">签收\n        </el-button>\n        <el-button type=\"text\"\n                   size=\"small\"\n                   icon=\"el-icon-info\"\n                   v-if=\"permission.work_claim_detail\"\n                   @click.stop=\"handleDetail(scope.row)\">详情\n        </el-button>\n        <el-button type=\"text\"\n                   size=\"small\"\n                   icon=\"el-icon-search\"\n                   v-if=\"permission.work_claim_follow\"\n                   @click.stop=\"handleImage(scope.row,scope.index)\">流程图\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\"\n                slot=\"processDefinitionVersion\">\n        <el-tag>v{{row.processDefinitionVersion}}</el-tag>\n      </template>\n    </avue-crud>\n    <flow-design is-dialog :is-display.sync=\"flowBox\" :process-instance-id=\"processInstanceId\"></flow-design>\n  </basic-container>\n</template>\n\n<script>\n  import {mapGetters} from \"vuex\";\n  import {claimList, claimTask} from \"@/api/work/work\";\n  import {flowCategory, flowRoute} from \"@/util/flow\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionId: '',\n        selectionList: [],\n        query: {},\n        loading: true,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        processInstanceId: '',\n        flowBox: false,\n        workBox: false,\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          tip: false,\n          simplePage: true,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          selection: true,\n          editBtn: false,\n          addBtn: false,\n          viewBtn: false,\n          delBtn: false,\n          dialogWidth: 900,\n          menuWidth: 200,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"流程分类\",\n              type: \"select\",\n              row: true,\n              dicUrl: \"/api/blade-system/dict/dictionary?code=flow\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              slot: true,\n              prop: \"category\",\n              search: true,\n              hide: true,\n              width: 100,\n            },\n            {\n              label: '流程名称',\n              prop: 'processDefinitionName',\n              search: true,\n            },\n            {\n              label: '当前步骤',\n              prop: 'taskName',\n            },\n            {\n              label: '流程版本',\n              prop: 'processDefinitionVersion',\n              slot: true,\n              width: 80,\n            },\n            {\n              label: '申请时间',\n              prop: 'createTime',\n              width: 165,\n            },\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"permission\", \"flowRoutes\"]),\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      },\n    },\n    methods: {\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleClaim(row) {\n        this.$confirm(\"确定签收此任务?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return claimTask(row.taskId);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      handleDetail(row) {\n        this.$router.push({path: `/work/process/${flowRoute(this.flowRoutes, row.category)}/detail/${row.processInstanceId}/${row.businessId}`});\n      },\n      handleImage(row) {\n        this.processInstanceId = row.processInstanceId;\n        this.flowBox = true;\n      },\n      currentChange(currentPage){\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize){\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        const query = {\n          ...this.query,\n          category: (params.category) ? flowCategory(params.category) : null\n        };\n        this.loading = true;\n        claimList(page.currentPage, page.pageSize, Object.assign(params, query)).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n"]}]}