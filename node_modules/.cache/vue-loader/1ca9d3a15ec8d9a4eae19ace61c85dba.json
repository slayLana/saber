{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/system/dept.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/system/dept.vue","mtime":1666151205541},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n  import {\n    getLazyList,\n    remove,\n    update,\n    add,\n    getDept,\n    getDeptTree\n  } from \"@/api/system/dept\";\n  import {mapGetters} from \"vuex\";\n  import website from '@/config/website';\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionList: [],\n        query: {},\n        loading: true,\n        parentId: 0,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0,\n        },\n        option: {\n          lazy: true,\n          tip: false,\n          simplePage: true,\n          searchShow: true,\n          searchMenuSpan: 6,\n          tree: true,\n          border: true,\n          index: true,\n          selection: true,\n          viewBtn: true,\n          menuWidth: 300,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"机构名称\",\n              prop: \"deptName\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入机构名称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"所属租户\",\n              prop: \"tenantId\",\n              type: \"tree\",\n              dicUrl: \"/api/blade-system/tenant/select\",\n              addDisplay: false,\n              editDisplay: false,\n              viewDisplay: website.tenantMode,\n              span: 24,\n              props: {\n                label: \"tenantName\",\n                value: \"tenantId\"\n              },\n              hide: !website.tenantMode,\n              search: website.tenantMode,\n              rules: [{\n                required: true,\n                message: \"请输入所属租户\",\n                trigger: \"click\"\n              }]\n            },\n            {\n              label: \"机构全称\",\n              prop: \"fullName\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入机构全称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"上级机构\",\n              prop: \"parentId\",\n              dicData: [],\n              type: \"tree\",\n              hide: true,\n              addDisabled: false,\n              props: {\n                label: \"title\"\n              },\n              rules: [{\n                required: false,\n                message: \"请选择上级机构\",\n                trigger: \"click\"\n              }]\n            },\n            {\n              label: \"机构类型\",\n              type: \"select\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=org_category\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              width: 120,\n              prop: \"deptCategory\",\n              slot: true,\n              rules: [{\n                required: true,\n                message: \"请输入机构类型\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"排序\",\n              prop: \"sort\",\n              type: \"number\",\n              align: \"right\",\n              width: 80,\n              rules: [{\n                required: true,\n                message: \"请输入排序\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"备注\",\n              prop: \"remark\",\n              rules: [{\n                required: false,\n                message: \"请输入备注\",\n                trigger: \"blur\"\n              }],\n              hide: true\n            }\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"userInfo\", \"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.dept_add, false),\n          viewBtn: this.vaildData(this.permission.dept_view, false),\n          delBtn: this.vaildData(this.permission.dept_delete, false),\n          editBtn: this.vaildData(this.permission.dept_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      initData() {\n        getDeptTree().then(res => {\n          const column = this.findObject(this.option.column, \"parentId\");\n          column.dicData = res.data.data;\n        });\n      },\n      handleAdd(row) {\n        this.parentId = row.id;\n        const column = this.findObject(this.option.column, \"parentId\");\n        column.value = row.id;\n        column.addDisabled = true;\n        this.$refs.crud.rowAdd();\n      },\n      rowSave(row, done, loading) {\n        add(row).then((res) => {\n          // 获取新增数据的相关字段\n          const data = res.data.data;\n          row.id = data.id;\n          row.deptCategoryName = data.deptCategoryName;\n          row.tenantId = data.tenantId;\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          // 数据回调进行刷新\n          done(row);\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          // 数据回调进行刷新\n          done(row);\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row, index, done) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            // 数据回调进行刷新\n            done(row);\n          });\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            // 刷新表格数据并重载\n            this.data = [];\n            this.parentId = 0;\n            this.$refs.crud.refreshTable();\n            this.$refs.crud.toggleSelection();\n            // 表格数据重载\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.parentId = 0;\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.parentId = '';\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      beforeOpen(done, type) {\n        if ([\"add\", \"edit\"].includes(type)) {\n          this.initData();\n        }\n        if ([\"edit\", \"view\"].includes(type)) {\n          getDept(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      beforeClose(done) {\n        this.parentId = \"\";\n        const column = this.findObject(this.option.column, \"parentId\");\n        column.value = \"\";\n        column.addDisabled = false;\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getLazyList(this.parentId, Object.assign(params, this.query)).then(res => {\n          this.data = res.data.data;\n          this.loading = false;\n          this.selectionClear();\n        });\n      },\n      treeLoad(tree, treeNode, resolve) {\n        const parentId = tree.id;\n        getLazyList(parentId).then(res => {\n          resolve(res.data.data);\n        });\n      }\n    }\n  };\n",{"version":3,"sources":["dept.vue"],"names":[],"mappings":";AAifile":"dept.vue","sourceRoot":"src/views/system","sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               ref=\"crud\"\n               v-model=\"form\"\n               :permission=\"permissionList\"\n               :before-open=\"beforeOpen\"\n               :before-close=\"beforeClose\"\n               @row-del=\"rowDel\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\"\n               @tree-load=\"treeLoad\">\n      <template slot=\"menuLeft\">\n        <el-button type=\"danger\"\n                   size=\"small\"\n                   icon=\"el-icon-delete\"\n                   v-if=\"permission.dept_delete\"\n                   plain\n                   @click=\"handleDelete\">删 除\n        </el-button>\n      </template>\n      <template slot-scope=\"scope\" slot=\"menu\">\n        <el-button\n          type=\"text\"\n          icon=\"el-icon-circle-plus-outline\"\n          size=\"small\"\n          @click.stop=\"handleAdd(scope.row,scope.index)\"\n          v-if=\"userInfo.role_name.includes('admin')\"\n        >新增子项\n        </el-button>\n      </template>\n      <template slot-scope=\"{row}\"\n                slot=\"deptCategory\">\n        <el-tag>{{row.deptCategoryName}}</el-tag>\n      </template>\n    </avue-crud>\n  </basic-container>\n</template>\n\n<script>\n  import {\n    getLazyList,\n    remove,\n    update,\n    add,\n    getDept,\n    getDeptTree\n  } from \"@/api/system/dept\";\n  import {mapGetters} from \"vuex\";\n  import website from '@/config/website';\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionList: [],\n        query: {},\n        loading: true,\n        parentId: 0,\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0,\n        },\n        option: {\n          lazy: true,\n          tip: false,\n          simplePage: true,\n          searchShow: true,\n          searchMenuSpan: 6,\n          tree: true,\n          border: true,\n          index: true,\n          selection: true,\n          viewBtn: true,\n          menuWidth: 300,\n          dialogClickModal: false,\n          column: [\n            {\n              label: \"机构名称\",\n              prop: \"deptName\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入机构名称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"所属租户\",\n              prop: \"tenantId\",\n              type: \"tree\",\n              dicUrl: \"/api/blade-system/tenant/select\",\n              addDisplay: false,\n              editDisplay: false,\n              viewDisplay: website.tenantMode,\n              span: 24,\n              props: {\n                label: \"tenantName\",\n                value: \"tenantId\"\n              },\n              hide: !website.tenantMode,\n              search: website.tenantMode,\n              rules: [{\n                required: true,\n                message: \"请输入所属租户\",\n                trigger: \"click\"\n              }]\n            },\n            {\n              label: \"机构全称\",\n              prop: \"fullName\",\n              search: true,\n              rules: [{\n                required: true,\n                message: \"请输入机构全称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"上级机构\",\n              prop: \"parentId\",\n              dicData: [],\n              type: \"tree\",\n              hide: true,\n              addDisabled: false,\n              props: {\n                label: \"title\"\n              },\n              rules: [{\n                required: false,\n                message: \"请选择上级机构\",\n                trigger: \"click\"\n              }]\n            },\n            {\n              label: \"机构类型\",\n              type: \"select\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=org_category\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              width: 120,\n              prop: \"deptCategory\",\n              slot: true,\n              rules: [{\n                required: true,\n                message: \"请输入机构类型\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"排序\",\n              prop: \"sort\",\n              type: \"number\",\n              align: \"right\",\n              width: 80,\n              rules: [{\n                required: true,\n                message: \"请输入排序\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"备注\",\n              prop: \"remark\",\n              rules: [{\n                required: false,\n                message: \"请输入备注\",\n                trigger: \"blur\"\n              }],\n              hide: true\n            }\n          ]\n        },\n        data: []\n      };\n    },\n    computed: {\n      ...mapGetters([\"userInfo\", \"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.dept_add, false),\n          viewBtn: this.vaildData(this.permission.dept_view, false),\n          delBtn: this.vaildData(this.permission.dept_delete, false),\n          editBtn: this.vaildData(this.permission.dept_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      initData() {\n        getDeptTree().then(res => {\n          const column = this.findObject(this.option.column, \"parentId\");\n          column.dicData = res.data.data;\n        });\n      },\n      handleAdd(row) {\n        this.parentId = row.id;\n        const column = this.findObject(this.option.column, \"parentId\");\n        column.value = row.id;\n        column.addDisabled = true;\n        this.$refs.crud.rowAdd();\n      },\n      rowSave(row, done, loading) {\n        add(row).then((res) => {\n          // 获取新增数据的相关字段\n          const data = res.data.data;\n          row.id = data.id;\n          row.deptCategoryName = data.deptCategoryName;\n          row.tenantId = data.tenantId;\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          // 数据回调进行刷新\n          done(row);\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          // 数据回调进行刷新\n          done(row);\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row, index, done) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            // 数据回调进行刷新\n            done(row);\n          });\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            // 刷新表格数据并重载\n            this.data = [];\n            this.parentId = 0;\n            this.$refs.crud.refreshTable();\n            this.$refs.crud.toggleSelection();\n            // 表格数据重载\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.parentId = 0;\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.parentId = '';\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      beforeOpen(done, type) {\n        if ([\"add\", \"edit\"].includes(type)) {\n          this.initData();\n        }\n        if ([\"edit\", \"view\"].includes(type)) {\n          getDept(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      beforeClose(done) {\n        this.parentId = \"\";\n        const column = this.findObject(this.option.column, \"parentId\");\n        column.value = \"\";\n        column.addDisabled = false;\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getLazyList(this.parentId, Object.assign(params, this.query)).then(res => {\n          this.data = res.data.data;\n          this.loading = false;\n          this.selectionClear();\n        });\n      },\n      treeLoad(tree, treeNode, resolve) {\n        const parentId = tree.id;\n        getLazyList(parentId).then(res => {\n          resolve(res.data.data);\n        });\n      }\n    }\n  };\n</script>\n\n<style>\n</style>\n"]}]}