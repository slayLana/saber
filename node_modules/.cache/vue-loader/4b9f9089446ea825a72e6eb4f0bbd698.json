{"remainingRequest":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/bladex/saber/src/views/tool/code.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/bladex/saber/src/views/tool/code.vue","mtime":1666151205543},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n  import {getList, getCode, build, remove, add, update, copy} from \"@/api/tool/code\";\n  import {getDetail as modelDetail, prototypeDetail} from \"@/api/tool/model\";\n  import {templateDic} from \"@/const/tool/model\";\n  import {validatenull} from \"@/util/validate\";\n  import {mapGetters} from \"vuex\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionList: [],\n        loading: true,\n        query: {},\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          dialogWidth: 900,\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          selection: true,\n          labelWidth: 120,\n          menuWidth: 300,\n          viewBtn: true,\n          dialogClickModal: false,\n          tabs: true,\n          column: [\n            {\n              label: \"模块名\",\n              prop: \"codeName\",\n              search: true,\n              display: false,\n            },\n            {\n              label: '模版类型',\n              prop: 'templateType',\n              type: \"select\",\n              dicData: templateDic,\n              display: false,\n            },\n            {\n              label: \"表名\",\n              prop: \"tableName\",\n              search: true,\n              display: false,\n            },\n            {\n              label: \"服务名\",\n              prop: \"serviceName\",\n              search: true,\n              display: false,\n            },\n            {\n              label: \"包名\",\n              prop: \"packageName\",\n              display: false,\n            },\n          ],\n          group: [\n            {\n              label: '模型配置',\n              prop: 'modelSetting',\n              icon: 'el-icon-tickets',\n              column: [\n                {\n                  label: \"数据模型\",\n                  prop: \"modelId\",\n                  search: true,\n                  span: 24,\n                  type: \"select\",\n                  dicUrl: \"/api/blade-develop/model/select\",\n                  props: {\n                    label: \"modelName\",\n                    value: \"id\"\n                  },\n                  rules: [{\n                    required: true,\n                    message: \"请选择数据模型\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"模块名\",\n                  prop: \"codeName\",\n                  search: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入模块名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"服务名\",\n                  prop: \"serviceName\",\n                  search: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入服务名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"表名\",\n                  prop: \"tableName\",\n                  rules: [{\n                    required: true,\n                    message: \"请输入表名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"表前缀\",\n                  prop: \"tablePrefix\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入表前缀\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"主键名\",\n                  prop: \"pkName\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入主键名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"包名\",\n                  prop: \"packageName\",\n                  overHidden: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入包名\",\n                    trigger: \"blur\"\n                  }]\n                },\n              ]\n            },\n            {\n              label: '模版配置',\n              prop: 'templateSetting',\n              icon: 'el-icon-copy-document',\n              column: [\n                {\n                  label: '模版类型',\n                  prop: 'templateType',\n                  type: \"select\",\n                  dicData: templateDic,\n                  value: \"crud\",\n                  rules: [{\n                    required: true,\n                    message: \"请选择模版类型\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"作者信息\",\n                  prop: \"author\",\n                  value: \"BladeX\",\n                  rules: [{\n                    required: true,\n                    message: \"请输入作者\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"子表模型\",\n                  prop: \"subModelId\",\n                  type: \"select\",\n                  dicUrl: \"/api/blade-develop/model/select\",\n                  props: {\n                    label: \"modelName\",\n                    value: \"id\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"子表外键\",\n                  prop: \"subFkId\",\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"树主键字段\",\n                  prop: \"treeId\",\n                  type: \"select\",\n                  dicData: [],\n                  props: {\n                    label: \"comment\",\n                    value: \"jdbcName\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"树父主键字段\",\n                  prop: \"treePid\",\n                  type: \"select\",\n                  dicData: [],\n                  props: {\n                    label: \"comment\",\n                    value: \"jdbcName\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"树名称字段\",\n                  prop: \"treeName\",\n                  type: \"select\",\n                  dicData: [],\n                  props: {\n                    label: \"comment\",\n                    value: \"jdbcName\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n              ]\n            },\n            {\n              label: '生成配置',\n              prop: 'codingSetting',\n              icon: 'el-icon-printer',\n              column: [\n                {\n                  label: \"基础业务\",\n                  labelTip:'配置是否使用BladeX封装的BaseService解锁更多功能',\n                  prop: \"baseMode\",\n                  type: 'radio',\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  value: 2,\n                  dataType: \"number\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择基础业务\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"包装器\",\n                  labelTip:'配置是否使用Wrapper包装器来拓展Controller返回列表的字段',\n                  prop: \"wrapMode\",\n                  type: 'radio',\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  value: 2,\n                  dataType: \"number\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择包装器\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"远程调用\",\n                  labelTip:'配置是否使用Feign远程调用',\n                  prop: \"feignMode\",\n                  type: 'radio',\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  value: 1,\n                  dataType: \"number\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择基础业务\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"代码风格\",\n                  labelTip:'选择不同底层实现的代码模版',\n                  prop: \"codeStyle\",\n                  type: 'radio',\n                  dicData: [\n                    {\n                      label: \"saber\",\n                      value: \"saber\"\n                    },\n                    {\n                      label: \"element\",\n                      value: \"element\"\n                    }\n                  ],\n                  value: \"saber\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择代码风格\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"后端生成路径\",\n                  prop: \"apiPath\",\n                  span: 24,\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入后端生成路径\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"前端生成路径\",\n                  prop: \"webPath\",\n                  span: 24,\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入前端生成路径\",\n                    trigger: \"blur\"\n                  }]\n                }\n              ]\n            }\n          ]\n        },\n        data: []\n      };\n    },\n    watch: {\n      'form.modelId'() {\n        if (!validatenull(this.form.modelId)) {\n          // 获取数据模型信息\n          modelDetail(this.form.modelId).then(res => {\n            const result = res.data;\n            if (result.success) {\n              const {modelName, modelTable, modelCode} = result.data;\n              if (validatenull(this.form.tablePrefix)) {\n                this.form.tablePrefix = modelTable.split(\"_\")[0] + \"_\";\n              }\n              if (validatenull(this.form.tableName)) {\n                this.form.tableName = modelTable;\n              }\n              if (validatenull(this.form.codeName)) {\n                this.form.codeName = modelName;\n              }\n              if (validatenull(this.form.serviceName)) {\n                this.form.serviceName = `blade-${modelCode}`;\n              }\n              if (validatenull(this.form.pkName)) {\n                this.form.pkName = \"id\";\n              }\n              if (validatenull(this.form.packageName)) {\n                this.form.packageName = `org.springblade.${modelCode}`;\n              }\n              if (validatenull(this.form.subFkId) && !validatenull(this.form.tablePrefix)) {\n                this.form.subFkId = modelTable.replace(this.form.tablePrefix, \"\") + \"_id\";\n              }\n\n              // 获取数据原型信息\n              prototypeDetail(this.form.modelId).then(res => {\n                const result = res.data;\n                if (result.success) {\n                  const columnTreeId = this.findObject(this.option.group, \"treeId\");\n                  const columnTreePid = this.findObject(this.option.group, \"treePid\");\n                  const columnTreeName = this.findObject(this.option.group, \"treeName\");\n                  columnTreeId.dicData = result.data;\n                  columnTreePid.dicData = result.data;\n                  columnTreeName.dicData = result.data;\n                }\n              });\n            }\n          });\n        }\n      },\n      'form.templateType'() {\n        // 模版类型\n        const type = this.form.templateType;\n\n        // 主子表字段显隐\n        const columnSubModelId = this.findObject(this.option.group, \"subModelId\");\n        const columnSubFkId = this.findObject(this.option.group, \"subFkId\");\n        columnSubModelId.display = type === \"sub\";\n        columnSubFkId.display = type === \"sub\";\n\n        // 树表字段显隐\n        const columnTreeId = this.findObject(this.option.group, \"treeId\");\n        const columnTreePid = this.findObject(this.option.group, \"treePid\");\n        const columnTreeName = this.findObject(this.option.group, \"treeName\");\n        columnTreeId.display = type === \"tree\";\n        columnTreePid.display = type === \"tree\";\n        columnTreeName.display = type === \"tree\";\n\n      }\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.code_add, false),\n          viewBtn: this.vaildData(this.permission.code_view, false),\n          delBtn: this.vaildData(this.permission.code_delete, false),\n          editBtn: this.vaildData(this.permission.code_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleBuild() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"是否生成选中模块的代码?\", {\n          title: \"代码生成确认\",\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return build(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleCopy(row) {\n        copy(row.id).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"复制成功!\"\n          });\n        });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getCode(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n",{"version":3,"sources":["code.vue"],"names":[],"mappings":";AAiDA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"code.vue","sourceRoot":"src/views/tool","sourcesContent":["<template>\n  <basic-container>\n    <avue-crud :option=\"option\"\n               :table-loading=\"loading\"\n               :data=\"data\"\n               ref=\"crud\"\n               v-model=\"form\"\n               :permission=\"permissionList\"\n               :page.sync=\"page\"\n               @row-del=\"rowDel\"\n               @row-update=\"rowUpdate\"\n               @row-save=\"rowSave\"\n               :before-open=\"beforeOpen\"\n               @search-change=\"searchChange\"\n               @search-reset=\"searchReset\"\n               @selection-change=\"selectionChange\"\n               @current-change=\"currentChange\"\n               @size-change=\"sizeChange\"\n               @refresh-change=\"refreshChange\"\n               @on-load=\"onLoad\">\n      <template slot=\"menuLeft\">\n        <el-button type=\"danger\"\n                   size=\"small\"\n                   icon=\"el-icon-delete\"\n                   v-if=\"permission.code_delete\"\n                   plain\n                   @click=\"handleDelete\">删 除\n        </el-button>\n        <el-button type=\"primary\"\n                   size=\"small\"\n                   plain\n                   icon=\"el-icon-refresh\"\n                   @click=\"handleBuild\">代码生成\n        </el-button>\n      </template>\n      <template slot-scope=\"scope\" slot=\"menu\">\n        <el-button type=\"text\"\n                   size=\"small\"\n                   icon=\"el-icon-document-copy\"\n                   v-if=\"permission.code_edit\"\n                   class=\"none-border\"\n                   @click.stop=\"handleCopy(scope.row)\">复制\n        </el-button>\n      </template>\n    </avue-crud>\n  </basic-container>\n</template>\n\n<script>\n  import {getList, getCode, build, remove, add, update, copy} from \"@/api/tool/code\";\n  import {getDetail as modelDetail, prototypeDetail} from \"@/api/tool/model\";\n  import {templateDic} from \"@/const/tool/model\";\n  import {validatenull} from \"@/util/validate\";\n  import {mapGetters} from \"vuex\";\n\n  export default {\n    data() {\n      return {\n        form: {},\n        selectionList: [],\n        loading: true,\n        query: {},\n        page: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 0\n        },\n        option: {\n          height: 'auto',\n          calcHeight: 30,\n          dialogWidth: 900,\n          tip: false,\n          searchShow: true,\n          searchMenuSpan: 6,\n          border: true,\n          index: true,\n          selection: true,\n          labelWidth: 120,\n          menuWidth: 300,\n          viewBtn: true,\n          dialogClickModal: false,\n          tabs: true,\n          column: [\n            {\n              label: \"模块名\",\n              prop: \"codeName\",\n              search: true,\n              display: false,\n            },\n            {\n              label: '模版类型',\n              prop: 'templateType',\n              type: \"select\",\n              dicData: templateDic,\n              display: false,\n            },\n            {\n              label: \"表名\",\n              prop: \"tableName\",\n              search: true,\n              display: false,\n            },\n            {\n              label: \"服务名\",\n              prop: \"serviceName\",\n              search: true,\n              display: false,\n            },\n            {\n              label: \"包名\",\n              prop: \"packageName\",\n              display: false,\n            },\n          ],\n          group: [\n            {\n              label: '模型配置',\n              prop: 'modelSetting',\n              icon: 'el-icon-tickets',\n              column: [\n                {\n                  label: \"数据模型\",\n                  prop: \"modelId\",\n                  search: true,\n                  span: 24,\n                  type: \"select\",\n                  dicUrl: \"/api/blade-develop/model/select\",\n                  props: {\n                    label: \"modelName\",\n                    value: \"id\"\n                  },\n                  rules: [{\n                    required: true,\n                    message: \"请选择数据模型\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"模块名\",\n                  prop: \"codeName\",\n                  search: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入模块名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"服务名\",\n                  prop: \"serviceName\",\n                  search: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入服务名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"表名\",\n                  prop: \"tableName\",\n                  rules: [{\n                    required: true,\n                    message: \"请输入表名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"表前缀\",\n                  prop: \"tablePrefix\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入表前缀\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"主键名\",\n                  prop: \"pkName\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入主键名\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"包名\",\n                  prop: \"packageName\",\n                  overHidden: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入包名\",\n                    trigger: \"blur\"\n                  }]\n                },\n              ]\n            },\n            {\n              label: '模版配置',\n              prop: 'templateSetting',\n              icon: 'el-icon-copy-document',\n              column: [\n                {\n                  label: '模版类型',\n                  prop: 'templateType',\n                  type: \"select\",\n                  dicData: templateDic,\n                  value: \"crud\",\n                  rules: [{\n                    required: true,\n                    message: \"请选择模版类型\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"作者信息\",\n                  prop: \"author\",\n                  value: \"BladeX\",\n                  rules: [{\n                    required: true,\n                    message: \"请输入作者\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"子表模型\",\n                  prop: \"subModelId\",\n                  type: \"select\",\n                  dicUrl: \"/api/blade-develop/model/select\",\n                  props: {\n                    label: \"modelName\",\n                    value: \"id\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"子表外键\",\n                  prop: \"subFkId\",\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"树主键字段\",\n                  prop: \"treeId\",\n                  type: \"select\",\n                  dicData: [],\n                  props: {\n                    label: \"comment\",\n                    value: \"jdbcName\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"树父主键字段\",\n                  prop: \"treePid\",\n                  type: \"select\",\n                  dicData: [],\n                  props: {\n                    label: \"comment\",\n                    value: \"jdbcName\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n                {\n                  label: \"树名称字段\",\n                  prop: \"treeName\",\n                  type: \"select\",\n                  dicData: [],\n                  props: {\n                    label: \"comment\",\n                    value: \"jdbcName\"\n                  },\n                  display: false,\n                  hide: true,\n                },\n              ]\n            },\n            {\n              label: '生成配置',\n              prop: 'codingSetting',\n              icon: 'el-icon-printer',\n              column: [\n                {\n                  label: \"基础业务\",\n                  labelTip:'配置是否使用BladeX封装的BaseService解锁更多功能',\n                  prop: \"baseMode\",\n                  type: 'radio',\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  value: 2,\n                  dataType: \"number\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择基础业务\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"包装器\",\n                  labelTip:'配置是否使用Wrapper包装器来拓展Controller返回列表的字段',\n                  prop: \"wrapMode\",\n                  type: 'radio',\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  value: 2,\n                  dataType: \"number\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择包装器\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"远程调用\",\n                  labelTip:'配置是否使用Feign远程调用',\n                  prop: \"feignMode\",\n                  type: 'radio',\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=yes_no\",\n                  props: {\n                    label: \"dictValue\",\n                    value: \"dictKey\"\n                  },\n                  value: 1,\n                  dataType: \"number\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择基础业务\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"代码风格\",\n                  labelTip:'选择不同底层实现的代码模版',\n                  prop: \"codeStyle\",\n                  type: 'radio',\n                  dicData: [\n                    {\n                      label: \"saber\",\n                      value: \"saber\"\n                    },\n                    {\n                      label: \"element\",\n                      value: \"element\"\n                    }\n                  ],\n                  value: \"saber\",\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请选择代码风格\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"后端生成路径\",\n                  prop: \"apiPath\",\n                  span: 24,\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入后端生成路径\",\n                    trigger: \"blur\"\n                  }]\n                },\n                {\n                  label: \"前端生成路径\",\n                  prop: \"webPath\",\n                  span: 24,\n                  hide: true,\n                  rules: [{\n                    required: true,\n                    message: \"请输入前端生成路径\",\n                    trigger: \"blur\"\n                  }]\n                }\n              ]\n            }\n          ]\n        },\n        data: []\n      };\n    },\n    watch: {\n      'form.modelId'() {\n        if (!validatenull(this.form.modelId)) {\n          // 获取数据模型信息\n          modelDetail(this.form.modelId).then(res => {\n            const result = res.data;\n            if (result.success) {\n              const {modelName, modelTable, modelCode} = result.data;\n              if (validatenull(this.form.tablePrefix)) {\n                this.form.tablePrefix = modelTable.split(\"_\")[0] + \"_\";\n              }\n              if (validatenull(this.form.tableName)) {\n                this.form.tableName = modelTable;\n              }\n              if (validatenull(this.form.codeName)) {\n                this.form.codeName = modelName;\n              }\n              if (validatenull(this.form.serviceName)) {\n                this.form.serviceName = `blade-${modelCode}`;\n              }\n              if (validatenull(this.form.pkName)) {\n                this.form.pkName = \"id\";\n              }\n              if (validatenull(this.form.packageName)) {\n                this.form.packageName = `org.springblade.${modelCode}`;\n              }\n              if (validatenull(this.form.subFkId) && !validatenull(this.form.tablePrefix)) {\n                this.form.subFkId = modelTable.replace(this.form.tablePrefix, \"\") + \"_id\";\n              }\n\n              // 获取数据原型信息\n              prototypeDetail(this.form.modelId).then(res => {\n                const result = res.data;\n                if (result.success) {\n                  const columnTreeId = this.findObject(this.option.group, \"treeId\");\n                  const columnTreePid = this.findObject(this.option.group, \"treePid\");\n                  const columnTreeName = this.findObject(this.option.group, \"treeName\");\n                  columnTreeId.dicData = result.data;\n                  columnTreePid.dicData = result.data;\n                  columnTreeName.dicData = result.data;\n                }\n              });\n            }\n          });\n        }\n      },\n      'form.templateType'() {\n        // 模版类型\n        const type = this.form.templateType;\n\n        // 主子表字段显隐\n        const columnSubModelId = this.findObject(this.option.group, \"subModelId\");\n        const columnSubFkId = this.findObject(this.option.group, \"subFkId\");\n        columnSubModelId.display = type === \"sub\";\n        columnSubFkId.display = type === \"sub\";\n\n        // 树表字段显隐\n        const columnTreeId = this.findObject(this.option.group, \"treeId\");\n        const columnTreePid = this.findObject(this.option.group, \"treePid\");\n        const columnTreeName = this.findObject(this.option.group, \"treeName\");\n        columnTreeId.display = type === \"tree\";\n        columnTreePid.display = type === \"tree\";\n        columnTreeName.display = type === \"tree\";\n\n      }\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.code_add, false),\n          viewBtn: this.vaildData(this.permission.code_view, false),\n          delBtn: this.vaildData(this.permission.code_delete, false),\n          editBtn: this.vaildData(this.permission.code_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      rowSave(row, done, loading) {\n        add(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowUpdate(row, index, done, loading) {\n        update(row).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          done();\n        }, error => {\n          window.console.log(error);\n          loading();\n        });\n      },\n      rowDel(row) {\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(row.id);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n          });\n      },\n      searchReset() {\n        this.query = {};\n        this.onLoad(this.page);\n      },\n      searchChange(params, done) {\n        this.query = params;\n        this.page.currentPage = 1;\n        this.onLoad(this.page, params);\n        done();\n      },\n      selectionChange(list) {\n        this.selectionList = list;\n      },\n      selectionClear() {\n        this.selectionList = [];\n        this.$refs.crud.toggleSelection();\n      },\n      handleDelete() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"确定将选择数据删除?\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleBuild() {\n        if (this.selectionList.length === 0) {\n          this.$message.warning(\"请选择至少一条数据\");\n          return;\n        }\n        this.$confirm(\"是否生成选中模块的代码?\", {\n          title: \"代码生成确认\",\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return build(this.ids);\n          })\n          .then(() => {\n            this.onLoad(this.page);\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.$refs.crud.toggleSelection();\n          });\n      },\n      handleCopy(row) {\n        copy(row.id).then(() => {\n          this.onLoad(this.page);\n          this.$message({\n            type: \"success\",\n            message: \"复制成功!\"\n          });\n        });\n      },\n      beforeOpen(done, type) {\n        if ([\"edit\", \"view\"].includes(type)) {\n          getCode(this.form.id).then(res => {\n            this.form = res.data.data;\n          });\n        }\n        done();\n      },\n      currentChange(currentPage) {\n        this.page.currentPage = currentPage;\n      },\n      sizeChange(pageSize) {\n        this.page.pageSize = pageSize;\n      },\n      refreshChange() {\n        this.onLoad(this.page, this.query);\n      },\n      onLoad(page, params = {}) {\n        this.loading = true;\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n          const data = res.data.data;\n          this.page.total = data.total;\n          this.data = data.records;\n          this.loading = false;\n          this.selectionClear();\n        });\n      }\n    }\n  };\n</script>\n"]}]}