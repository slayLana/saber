{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/page/index/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/page/index/index.vue","mtime":1666151205524},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n  import {mapGetters} from \"vuex\";\n  import tags from \"./tags\";\n  import search from \"./search\";\n  import top from \"./top/\";\n  import sidebar from \"./sidebar/\";\n  import admin from \"@/util/admin\";\n  import {validatenull} from \"@/util/validate\";\n  import {calcDate} from \"@/util/date.js\";\n  import {getStore} from \"@/util/store.js\";\n\n  export default {\n    components: {\n      top,\n      tags,\n      search,\n      sidebar\n    },\n    name: \"index\",\n    provide() {\n      return {\n        index: this\n      };\n    },\n    data() {\n      return {\n        //搜索控制\n        isSearch: false,\n        //刷新token锁\n        refreshLock: false,\n        //刷新token的时间\n        refreshTime: \"\"\n      };\n    },\n    created() {\n      //实时检测刷新token\n      this.refreshToken();\n    },\n    mounted() {\n      this.init();\n    },\n    computed: mapGetters([\"isMenu\", \"isLock\", \"isCollapse\", \"website\", \"menu\"]),\n    props: [],\n    methods: {\n      showCollapse() {\n        this.$store.commit(\"SET_COLLAPSE\");\n      },\n      // 初始化\n      init() {\n        this.$store.commit(\"SET_SCREEN\", admin.getScreen());\n        window.onresize = () => {\n          setTimeout(() => {\n            this.$store.commit(\"SET_SCREEN\", admin.getScreen());\n          }, 0);\n        };\n        this.$store.dispatch(\"FlowRoutes\").then(() => {\n        });\n      },\n      //打开菜单\n      openMenu(item = {}) {\n        this.$store.dispatch(\"GetMenu\", item.id).then(data => {\n          if (data.length !== 0) {\n            this.$router.$avueRouter.formatRoutes(data, true);\n          }\n          //当点击顶部菜单后默认打开第一个菜单\n          /*if (!this.validatenull(item)) {\n            let itemActive = {},\n              childItemActive = 0;\n            if (item.path) {\n              itemActive = item;\n            } else {\n              if (this.menu[childItemActive].length === 0) {\n                itemActive = this.menu[childItemActive];\n              } else {\n                itemActive = this.menu[childItemActive].children[childItemActive];\n              }\n            }\n            this.$store.commit('SET_MENU_ID', item);\n            this.$router.push({\n              path: this.$router.$avueRouter.getPath({\n                name: (itemActive.label || itemActive.name),\n                src: itemActive.path\n              }, itemActive.meta)\n            });\n          }*/\n\n        });\n      },\n      // 定时检测token\n      refreshToken() {\n        this.refreshTime = setInterval(() => {\n          const token = getStore({\n            name: \"token\",\n            debug: true\n          }) || {};\n          const date = calcDate(token.datetime, new Date().getTime());\n          if (validatenull(date)) return;\n          if (date.seconds >= this.website.tokenTime && !this.refreshLock) {\n            this.refreshLock = true;\n            this.$store\n              .dispatch(\"refreshToken\")\n              .then(() => {\n                this.refreshLock = false;\n              })\n              .catch(() => {\n                this.refreshLock = false;\n              });\n          }\n        }, 10000);\n      }\n    }\n  };\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/page/index","sourcesContent":["<template>\n  <div class=\"avue-contail\" :class=\"{'avue--collapse':isCollapse}\">\n    <div class=\"avue-header\">\n      <!-- 顶部导航栏 -->\n      <top ref=\"top\"/>\n    </div>\n    <div class=\"avue-layout\">\n      <div class=\"avue-left\">\n        <!-- 左侧导航栏 -->\n        <sidebar/>\n      </div>\n      <div class=\"avue-main\">\n        <!-- 顶部标签卡 -->\n        <tags/>\n        <transition name=\"fade-scale\">\n          <search class=\"avue-view\" v-show=\"isSearch\"></search>\n        </transition>\n        <!-- 主体视图层 -->\n        <div style=\"height:100%;overflow-y:auto;overflow-x:hidden;\" id=\"avue-view\" v-show=\"!isSearch\">\n          <keep-alive>\n            <router-view class=\"avue-view\" v-if=\"$route.meta.keepAlive\"/>\n          </keep-alive>\n          <router-view class=\"avue-view\" v-if=\"!$route.meta.keepAlive\"/>\n        </div>\n      </div>\n    </div>\n    <div class=\"avue-shade\" @click=\"showCollapse\"></div>\n  </div>\n</template>\n\n<script>\n  import {mapGetters} from \"vuex\";\n  import tags from \"./tags\";\n  import search from \"./search\";\n  import top from \"./top/\";\n  import sidebar from \"./sidebar/\";\n  import admin from \"@/util/admin\";\n  import {validatenull} from \"@/util/validate\";\n  import {calcDate} from \"@/util/date.js\";\n  import {getStore} from \"@/util/store.js\";\n\n  export default {\n    components: {\n      top,\n      tags,\n      search,\n      sidebar\n    },\n    name: \"index\",\n    provide() {\n      return {\n        index: this\n      };\n    },\n    data() {\n      return {\n        //搜索控制\n        isSearch: false,\n        //刷新token锁\n        refreshLock: false,\n        //刷新token的时间\n        refreshTime: \"\"\n      };\n    },\n    created() {\n      //实时检测刷新token\n      this.refreshToken();\n    },\n    mounted() {\n      this.init();\n    },\n    computed: mapGetters([\"isMenu\", \"isLock\", \"isCollapse\", \"website\", \"menu\"]),\n    props: [],\n    methods: {\n      showCollapse() {\n        this.$store.commit(\"SET_COLLAPSE\");\n      },\n      // 初始化\n      init() {\n        this.$store.commit(\"SET_SCREEN\", admin.getScreen());\n        window.onresize = () => {\n          setTimeout(() => {\n            this.$store.commit(\"SET_SCREEN\", admin.getScreen());\n          }, 0);\n        };\n        this.$store.dispatch(\"FlowRoutes\").then(() => {\n        });\n      },\n      //打开菜单\n      openMenu(item = {}) {\n        this.$store.dispatch(\"GetMenu\", item.id).then(data => {\n          if (data.length !== 0) {\n            this.$router.$avueRouter.formatRoutes(data, true);\n          }\n          //当点击顶部菜单后默认打开第一个菜单\n          /*if (!this.validatenull(item)) {\n            let itemActive = {},\n              childItemActive = 0;\n            if (item.path) {\n              itemActive = item;\n            } else {\n              if (this.menu[childItemActive].length === 0) {\n                itemActive = this.menu[childItemActive];\n              } else {\n                itemActive = this.menu[childItemActive].children[childItemActive];\n              }\n            }\n            this.$store.commit('SET_MENU_ID', item);\n            this.$router.push({\n              path: this.$router.$avueRouter.getPath({\n                name: (itemActive.label || itemActive.name),\n                src: itemActive.path\n              }, itemActive.meta)\n            });\n          }*/\n\n        });\n      },\n      // 定时检测token\n      refreshToken() {\n        this.refreshTime = setInterval(() => {\n          const token = getStore({\n            name: \"token\",\n            debug: true\n          }) || {};\n          const date = calcDate(token.datetime, new Date().getTime());\n          if (validatenull(date)) return;\n          if (date.seconds >= this.website.tokenTime && !this.refreshLock) {\n            this.refreshLock = true;\n            this.$store\n              .dispatch(\"refreshToken\")\n              .then(() => {\n                this.refreshLock = false;\n              })\n              .catch(() => {\n                this.refreshLock = false;\n              });\n          }\n        }, 10000);\n      }\n    }\n  };\n</script>\n"]}]}