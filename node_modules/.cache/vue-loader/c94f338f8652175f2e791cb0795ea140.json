{"remainingRequest":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiang/WorkSpace/code/bladex/saber/src/views/base/region.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiang/WorkSpace/code/bladex/saber/src/views/base/region.vue","mtime":1666151205538},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/babel-loader/lib/index.js","mtime":1666157453268},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/cache-loader/dist/cjs.js","mtime":1666157453018},{"path":"/Users/jiang/WorkSpace/code/bladex/saber/node_modules/vue-loader/lib/index.js","mtime":1666157454301}],"contextDependencies":[],"result":["\n  import {getLazyTree, getDetail, submit, remove} from \"@/api/base/region\";\n  import {exportBlob} from \"@/api/common\";\n  import {mapGetters} from \"vuex\";\n  import {validatenull} from \"@/util/validate\";\n  import {downloadXls} from \"@/util/util\";\n  import {dateNow} from \"@/util/date\";\n  import {getToken} from \"@/util/auth\";\n  import NProgress from 'nprogress';\n  import 'nprogress/nprogress.css';\n\n  export default {\n    data() {\n      return {\n        topCode: '00',\n        treeCode: '',\n        treeParentCode: '',\n        treeData: [],\n        treeOption: {\n          nodeKey: 'id',\n          lazy: true,\n          treeLoad: function (node, resolve) {\n            const parentCode = (node.level === 0) ? \"00\" : node.data.id;\n            getLazyTree(parentCode).then(res => {\n              resolve(res.data.data.map(item => {\n                return {\n                  ...item,\n                  leaf: !item.hasChildren\n                }\n              }))\n            });\n          },\n          addBtn: false,\n          menu: false,\n          size: 'small',\n          props: {\n            labelText: '标题',\n            label: 'title',\n            value: 'value',\n            children: 'children'\n          }\n        },\n        regionForm: {},\n        regionOption: {\n          labelWidth: 100,\n          column: [\n            {\n              label: \"父区划编号\",\n              prop: \"parentCode\",\n              span: 24,\n              disabled: true,\n              rules: [{\n                required: true,\n                message: \"请输入父区划编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"父区划名称\",\n              prop: \"parentName\",\n              span: 24,\n              disabled: true,\n            },\n            {\n              label: \"区划编号\",\n              prop: \"code\",\n              formslot: true,\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请输入区划编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划子编号\",\n              prop: \"subCode\",\n              display: false,\n            },\n            {\n              label: \"区划名称\",\n              prop: \"name\",\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请输入区划名称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划等级\",\n              prop: \"regionLevel\",\n              type: \"radio\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=region\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请选择区划等级\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划排序\",\n              prop: \"sort\",\n              type: \"number\",\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请输入区划排序\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划备注\",\n              prop: \"remark\",\n              type: \"textarea\",\n              minRows: 6,\n              span: 24,\n            },\n          ]\n        },\n        excelBox: false,\n        excelForm: {},\n        excelOption: {\n          submitBtn: false,\n          emptyBtn: false,\n          column: [\n            {\n              label: '模板上传',\n              prop: 'excelFile',\n              type: 'upload',\n              drag: true,\n              loadText: '模板上传中，请稍等',\n              span: 24,\n              propsHttp: {\n                res: 'data'\n              },\n              tip: '请上传 .xls,.xlsx 标准格式文件',\n              action: \"/api/blade-system/region/import-region\"\n            },\n            {\n              label: \"数据覆盖\",\n              prop: \"isCovered\",\n              type: \"switch\",\n              align: \"center\",\n              width: 80,\n              dicData: [\n                {\n                  label: \"否\",\n                  value: 0\n                },\n                {\n                  label: \"是\",\n                  value: 1\n                }\n              ],\n              value: 0,\n              slot: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择是否覆盖\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: '模板下载',\n              prop: 'excelTemplate',\n              formslot: true,\n              span: 24,\n            }\n          ]\n        },\n        debugBox: false,\n        debugForm: {},\n        debugOption: {\n          labelWidth: 50,\n          submitBtn: false,\n          emptyBtn: false,\n          column: [\n            {\n              label: '省份',\n              prop: 'province',\n              type: 'select',\n              props: {\n                label: 'name',\n                value: 'code'\n              },\n              cascader: ['city'],\n              dicUrl: '/api/blade-system/region/select',\n              span: 24,\n            },\n            {\n              label: '地市',\n              prop: 'city',\n              type: 'select',\n              props: {\n                label: 'name',\n                value: 'code'\n              },\n              cascader: ['district'],\n              dicFlag: false,\n              dicUrl: '/api/blade-system/region/select?code={{province}}',\n              span: 24,\n            },\n            {\n              label: '区县',\n              prop: 'district',\n              type: 'select',\n              props: {\n                label: 'name',\n                value: 'code'\n              },\n              dicFlag: false,\n              dicUrl: '/api/blade-system/region/select?code={{city}}',\n              span: 24,\n            }\n          ]\n        }\n      };\n    },\n    watch: {\n      'regionForm.subCode'() {\n        this.regionForm.code = this.regionForm.parentCode + this.regionForm.subCode;\n      },\n      'excelForm.isCovered'() {\n        if (this.excelForm.isCovered !== '') {\n          const column = this.findObject(this.excelOption.column, \"excelFile\");\n          column.action = `/api/blade-system/region/import-region?isCovered=${this.excelForm.isCovered}`;\n        }\n      }\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.region_add, false),\n          viewBtn: this.vaildData(this.permission.region_view, false),\n          delBtn: this.vaildData(this.permission.region_delete, false),\n          editBtn: this.vaildData(this.permission.region_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      initTree() {\n        this.treeData = [];\n        getLazyTree(this.topCode).then(res => {\n          this.treeData = res.data.data.map(item => {\n            return {\n              ...item,\n              leaf: !item.hasChildren\n            }\n          })\n        });\n      },\n      nodeClick(data) {\n        const column = this.findObject(this.regionOption.column, \"parentCode\");\n        column.disabled = true;\n        this.treeCode = data.id;\n        this.treeParentCode = data.parentId;\n        getDetail(this.treeCode).then(res => {\n          this.regionForm = res.data.data;\n          this.regionForm.subCode = this.regionForm.code.replace(this.regionForm.parentCode, '');\n        })\n      },\n      addChildren() {\n        if (validatenull(this.regionForm.code) || validatenull(this.regionForm.name)) {\n          this.$message.warning(\"请先选择一项区划\");\n          return;\n        }\n        this.regionForm.parentCode = this.regionForm.code;\n        this.regionForm.parentName = this.regionForm.name;\n        this.regionForm.code = '';\n        this.regionForm.subCode = '';\n        this.regionForm.name = '';\n        this.regionForm.regionLevel = (this.regionForm.regionLevel === 5) ? 5 : this.regionForm.regionLevel + 1;\n      },\n      handleSubmit(form, done, loading) {\n        const parentCode = form.parentCode === this.topCode ? '' : form.parentCode;\n        form.code = parentCode + form.subCode;\n        submit(form).then(() => {\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          this.initTree();\n          this.regionForm.subCode = '';\n          this.$refs.form.resetForm();\n          done();\n        }, error => {\n          loading();\n          window.console.log(error);\n        });\n      },\n      handleDelete() {\n        if (validatenull(this.regionForm.code)) {\n          this.$message.warning(\"请先选择一项区划\");\n          return;\n        }\n        this.$confirm(`确定将 [${this.regionForm.name}] 数据删除?`, {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.treeCode);\n          })\n          .then(() => {\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.initTree();\n            this.regionForm.subCode = '';\n            this.$refs.form.resetForm();\n          });\n      },\n      uploadAfter(res, done, loading, column) {\n        window.console.log(column);\n        this.excelBox = false;\n        this.initTree();\n        done();\n      },\n      handleDebug() {\n        this.debugBox = true;\n      },\n      handleImport() {\n        this.excelBox = true;\n      },\n      handleExport() {\n        this.$confirm(\"是否导出行政区划数据?\", \"提示\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        }).then(() => {\n          NProgress.start();\n          exportBlob(`/api/blade-system/region/export-region?${this.website.tokenHeader}=${getToken()}`).then(res => {\n            downloadXls(res.data, `行政区划数据${dateNow()}.xlsx`);\n            NProgress.done();\n          })\n        });\n      },\n      handleTemplate() {\n        exportBlob(`/api/blade-system/region/export-template?${this.website.tokenHeader}=${getToken()}`).then(res => {\n          downloadXls(res.data, \"行政区划模板.xlsx\");\n        })\n      },\n    }\n  };\n",{"version":3,"sources":["region.vue"],"names":[],"mappings":";AAqfile":"region.vue","sourceRoot":"src/views/base","sourcesContent":["<template>\n  <el-row>\n    <el-col :span=\"9\">\n      <div class=\"box\">\n        <el-scrollbar>\n          <basic-container>\n            <avue-tree :option=\"treeOption\" :data=\"treeData\" @node-click=\"nodeClick\"/>\n          </basic-container>\n        </el-scrollbar>\n      </div>\n    </el-col>\n    <el-col :span=\"15\">\n      <basic-container>\n        <el-button-group>\n          <el-button v-if=\"permission.region_add\" type=\"primary\" size=\"small\" icon=\"el-icon-circle-plus-outline\" @click=\"addChildren\">新增下级</el-button>\n          <el-button v-if=\"permission.region_delete\" type=\"primary\" size=\"small\" icon=\"el-icon-delete\" @click=\"handleDelete\">删除</el-button>\n          <el-button v-if=\"permission.region_import\" type=\"primary\" size=\"small\" icon=\"el-icon-upload2\" @click=\"handleImport\">导入</el-button>\n          <el-button v-if=\"permission.region_export\" type=\"primary\" size=\"small\" icon=\"el-icon-download\" @click=\"handleExport\">导出</el-button>\n          <el-button v-if=\"permission.region_debug\" type=\"primary\" size=\"small\" icon=\"el-icon-video-play\" @click=\"handleDebug\">调试</el-button>\n        </el-button-group>\n      </basic-container>\n      <basic-container>\n        <avue-form ref=\"form\" :option=\"regionOption\" v-model=\"regionForm\" @submit=\"handleSubmit\">\n          <template slot=\"code\" slot-scope=\"{}\">\n            <el-input placeholder=\"请输入 区划子编号\" v-model=\"regionForm.subCode\">\n              <template slot=\"prepend\">{{regionForm.parentCode}}</template>\n            </el-input>\n          </template>\n        </avue-form>\n        <el-dialog title=\"行政区划数据导入\"\n                   append-to-body\n                   :visible.sync=\"excelBox\"\n                   width=\"555px\">\n          <avue-form :option=\"excelOption\" v-model=\"excelForm\" :upload-after=\"uploadAfter\">\n            <template slot=\"excelTemplate\">\n              <el-button type=\"primary\" @click=\"handleTemplate\">\n                点击下载<i class=\"el-icon-download el-icon--right\"></i>\n              </el-button>\n            </template>\n          </avue-form>\n        </el-dialog>\n        <el-dialog title=\"行政区划数据调试\"\n                   append-to-body\n                   :visible.sync=\"debugBox\"\n                   width=\"350px\">\n          <avue-form :option=\"debugOption\" v-model=\"debugForm\"/>\n        </el-dialog>\n      </basic-container>\n    </el-col>\n  </el-row>\n</template>\n\n<script>\n  import {getLazyTree, getDetail, submit, remove} from \"@/api/base/region\";\n  import {exportBlob} from \"@/api/common\";\n  import {mapGetters} from \"vuex\";\n  import {validatenull} from \"@/util/validate\";\n  import {downloadXls} from \"@/util/util\";\n  import {dateNow} from \"@/util/date\";\n  import {getToken} from \"@/util/auth\";\n  import NProgress from 'nprogress';\n  import 'nprogress/nprogress.css';\n\n  export default {\n    data() {\n      return {\n        topCode: '00',\n        treeCode: '',\n        treeParentCode: '',\n        treeData: [],\n        treeOption: {\n          nodeKey: 'id',\n          lazy: true,\n          treeLoad: function (node, resolve) {\n            const parentCode = (node.level === 0) ? \"00\" : node.data.id;\n            getLazyTree(parentCode).then(res => {\n              resolve(res.data.data.map(item => {\n                return {\n                  ...item,\n                  leaf: !item.hasChildren\n                }\n              }))\n            });\n          },\n          addBtn: false,\n          menu: false,\n          size: 'small',\n          props: {\n            labelText: '标题',\n            label: 'title',\n            value: 'value',\n            children: 'children'\n          }\n        },\n        regionForm: {},\n        regionOption: {\n          labelWidth: 100,\n          column: [\n            {\n              label: \"父区划编号\",\n              prop: \"parentCode\",\n              span: 24,\n              disabled: true,\n              rules: [{\n                required: true,\n                message: \"请输入父区划编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"父区划名称\",\n              prop: \"parentName\",\n              span: 24,\n              disabled: true,\n            },\n            {\n              label: \"区划编号\",\n              prop: \"code\",\n              formslot: true,\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请输入区划编号\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划子编号\",\n              prop: \"subCode\",\n              display: false,\n            },\n            {\n              label: \"区划名称\",\n              prop: \"name\",\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请输入区划名称\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划等级\",\n              prop: \"regionLevel\",\n              type: \"radio\",\n              dicUrl: \"/api/blade-system/dict/dictionary?code=region\",\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              dataType: \"number\",\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请选择区划等级\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划排序\",\n              prop: \"sort\",\n              type: \"number\",\n              span: 24,\n              rules: [{\n                required: true,\n                message: \"请输入区划排序\",\n                trigger: \"blur\"\n              }]\n            },\n            {\n              label: \"区划备注\",\n              prop: \"remark\",\n              type: \"textarea\",\n              minRows: 6,\n              span: 24,\n            },\n          ]\n        },\n        excelBox: false,\n        excelForm: {},\n        excelOption: {\n          submitBtn: false,\n          emptyBtn: false,\n          column: [\n            {\n              label: '模板上传',\n              prop: 'excelFile',\n              type: 'upload',\n              drag: true,\n              loadText: '模板上传中，请稍等',\n              span: 24,\n              propsHttp: {\n                res: 'data'\n              },\n              tip: '请上传 .xls,.xlsx 标准格式文件',\n              action: \"/api/blade-system/region/import-region\"\n            },\n            {\n              label: \"数据覆盖\",\n              prop: \"isCovered\",\n              type: \"switch\",\n              align: \"center\",\n              width: 80,\n              dicData: [\n                {\n                  label: \"否\",\n                  value: 0\n                },\n                {\n                  label: \"是\",\n                  value: 1\n                }\n              ],\n              value: 0,\n              slot: true,\n              rules: [\n                {\n                  required: true,\n                  message: \"请选择是否覆盖\",\n                  trigger: \"blur\"\n                }\n              ]\n            },\n            {\n              label: '模板下载',\n              prop: 'excelTemplate',\n              formslot: true,\n              span: 24,\n            }\n          ]\n        },\n        debugBox: false,\n        debugForm: {},\n        debugOption: {\n          labelWidth: 50,\n          submitBtn: false,\n          emptyBtn: false,\n          column: [\n            {\n              label: '省份',\n              prop: 'province',\n              type: 'select',\n              props: {\n                label: 'name',\n                value: 'code'\n              },\n              cascader: ['city'],\n              dicUrl: '/api/blade-system/region/select',\n              span: 24,\n            },\n            {\n              label: '地市',\n              prop: 'city',\n              type: 'select',\n              props: {\n                label: 'name',\n                value: 'code'\n              },\n              cascader: ['district'],\n              dicFlag: false,\n              dicUrl: '/api/blade-system/region/select?code={{province}}',\n              span: 24,\n            },\n            {\n              label: '区县',\n              prop: 'district',\n              type: 'select',\n              props: {\n                label: 'name',\n                value: 'code'\n              },\n              dicFlag: false,\n              dicUrl: '/api/blade-system/region/select?code={{city}}',\n              span: 24,\n            }\n          ]\n        }\n      };\n    },\n    watch: {\n      'regionForm.subCode'() {\n        this.regionForm.code = this.regionForm.parentCode + this.regionForm.subCode;\n      },\n      'excelForm.isCovered'() {\n        if (this.excelForm.isCovered !== '') {\n          const column = this.findObject(this.excelOption.column, \"excelFile\");\n          column.action = `/api/blade-system/region/import-region?isCovered=${this.excelForm.isCovered}`;\n        }\n      }\n    },\n    computed: {\n      ...mapGetters([\"permission\"]),\n      permissionList() {\n        return {\n          addBtn: this.vaildData(this.permission.region_add, false),\n          viewBtn: this.vaildData(this.permission.region_view, false),\n          delBtn: this.vaildData(this.permission.region_delete, false),\n          editBtn: this.vaildData(this.permission.region_edit, false)\n        };\n      },\n      ids() {\n        let ids = [];\n        this.selectionList.forEach(ele => {\n          ids.push(ele.id);\n        });\n        return ids.join(\",\");\n      }\n    },\n    methods: {\n      initTree() {\n        this.treeData = [];\n        getLazyTree(this.topCode).then(res => {\n          this.treeData = res.data.data.map(item => {\n            return {\n              ...item,\n              leaf: !item.hasChildren\n            }\n          })\n        });\n      },\n      nodeClick(data) {\n        const column = this.findObject(this.regionOption.column, \"parentCode\");\n        column.disabled = true;\n        this.treeCode = data.id;\n        this.treeParentCode = data.parentId;\n        getDetail(this.treeCode).then(res => {\n          this.regionForm = res.data.data;\n          this.regionForm.subCode = this.regionForm.code.replace(this.regionForm.parentCode, '');\n        })\n      },\n      addChildren() {\n        if (validatenull(this.regionForm.code) || validatenull(this.regionForm.name)) {\n          this.$message.warning(\"请先选择一项区划\");\n          return;\n        }\n        this.regionForm.parentCode = this.regionForm.code;\n        this.regionForm.parentName = this.regionForm.name;\n        this.regionForm.code = '';\n        this.regionForm.subCode = '';\n        this.regionForm.name = '';\n        this.regionForm.regionLevel = (this.regionForm.regionLevel === 5) ? 5 : this.regionForm.regionLevel + 1;\n      },\n      handleSubmit(form, done, loading) {\n        const parentCode = form.parentCode === this.topCode ? '' : form.parentCode;\n        form.code = parentCode + form.subCode;\n        submit(form).then(() => {\n          this.$message({\n            type: \"success\",\n            message: \"操作成功!\"\n          });\n          this.initTree();\n          this.regionForm.subCode = '';\n          this.$refs.form.resetForm();\n          done();\n        }, error => {\n          loading();\n          window.console.log(error);\n        });\n      },\n      handleDelete() {\n        if (validatenull(this.regionForm.code)) {\n          this.$message.warning(\"请先选择一项区划\");\n          return;\n        }\n        this.$confirm(`确定将 [${this.regionForm.name}] 数据删除?`, {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        })\n          .then(() => {\n            return remove(this.treeCode);\n          })\n          .then(() => {\n            this.$message({\n              type: \"success\",\n              message: \"操作成功!\"\n            });\n            this.initTree();\n            this.regionForm.subCode = '';\n            this.$refs.form.resetForm();\n          });\n      },\n      uploadAfter(res, done, loading, column) {\n        window.console.log(column);\n        this.excelBox = false;\n        this.initTree();\n        done();\n      },\n      handleDebug() {\n        this.debugBox = true;\n      },\n      handleImport() {\n        this.excelBox = true;\n      },\n      handleExport() {\n        this.$confirm(\"是否导出行政区划数据?\", \"提示\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        }).then(() => {\n          NProgress.start();\n          exportBlob(`/api/blade-system/region/export-region?${this.website.tokenHeader}=${getToken()}`).then(res => {\n            downloadXls(res.data, `行政区划数据${dateNow()}.xlsx`);\n            NProgress.done();\n          })\n        });\n      },\n      handleTemplate() {\n        exportBlob(`/api/blade-system/region/export-template?${this.website.tokenHeader}=${getToken()}`).then(res => {\n          downloadXls(res.data, \"行政区划模板.xlsx\");\n        })\n      },\n    }\n  };\n</script>\n\n<style>\n  .box {\n    height: 800px;\n  }\n\n  .el-scrollbar {\n    height: 100%;\n  }\n\n  .box .el-scrollbar__wrap {\n    overflow: scroll;\n  }\n</style>\n"]}]}